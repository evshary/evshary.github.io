<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARM CortexM3/4權限切換</title>
    <url>/2018/12/02/ARM-CortexM3-4%E6%AC%8A%E9%99%90%E5%88%87%E6%8F%9B/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>最近我在研究怎麼在ARM Cortex M3&#x2F;4上面跑一個自己寫的OS，最主要是參考jserv的<a href="https://github.com/jserv/mini-arm-os">mini-arm-os</a>和<a href="https://github.com/PikoRT/pikoRT">pikoRT</a>，相關程式碼放在<a href="https://github.com/evshary/arm-os-4fun">arm-os-4fun</a>。<br>最近發現自己遇到了些問題，想說再研究怎麼解決的過程中順便把細節紀錄下，供自己未來可以參考。</p>
<p>這邊首先要探討的是Cortex M3&#x2F;4上面有的權限模式，以及它們是怎麼進行切換等細節。<br>原本我是在qemu上面跑<a href="http://beckus.github.io/qemu_stm32/">STM32虛擬機</a>，但是後來發現好像跟真實硬體有點不一致，所以後來我都在STM32F429的硬體上面來測試了。</p>
<h1 id="Cortex-M權限設計"><a href="#Cortex-M權限設計" class="headerlink" title="Cortex M權限設計"></a>Cortex M權限設計</h1><p>首先我們先了解Cortex上面有哪些權限模式，處理器上面有兩種Operation Modes：Thread mode和Handler mode。</p>
<ul>
<li>Thread Mode：一般程式運行的狀態。</li>
<li>Handler Mode：處理exception的狀態。</li>
</ul>
<p>然而除了這個以外，還有不同的Privilege Levels，避免一般使用者可以存取敏感資源。</p>
<ul>
<li>Privileged：可以存取所有資源，在CPU reset之後就是privileged。</li>
<li>Unprivileged：通常是讓OS中userspace的程式運行用的，在幾個方面存取資源是受限的。<ul>
<li>MSR、MRS指令存取上會有限制。</li>
<li>無法存取system timer、NVIC。</li>
<li>有些memory無法存取。</li>
</ul>
</li>
</ul>
<p>Operation Modes和Privilege Levels的關係如下所示，Unprivileged不能進入Handler Mode的。</p>
<table>
<thead>
<tr>
<th>-</th>
<th>Privileged Level</th>
<th>Unprivileged Level</th>
</tr>
</thead>
<tbody><tr>
<td>Handler Mode</td>
<td>O(state1)</td>
<td>X</td>
</tr>
<tr>
<td>Thread Mode</td>
<td>O(state2)</td>
<td>O(state3)</td>
</tr>
</tbody></table>
<ul>
<li>上面標註的state 1-3是為了方便我們後面講解而標的。</li>
</ul>
<h1 id="如何切換權限與模式"><a href="#如何切換權限與模式" class="headerlink" title="如何切換權限與模式"></a>如何切換權限與模式</h1><p>關於切換的部分可參考下圖，圖片來源<a href="https://community.arm.com/processors/b/blog/posts/a-tour-of-the-cortex-m3-core">A tour of the Cortex-M3 Core</a></p>
<p><img src="https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-21-42/6470.handler_2D00_thread.PNG" alt="模式切換"></p>
<p>下面我們先看怎麼樣從state2,state3進入state1，也就是發生exception，然後再從state1回來。</p>
<h2 id="Exception-Entry"><a href="#Exception-Entry" class="headerlink" title="Exception Entry"></a>Exception Entry</h2><p>進入exception有兩種情況：</p>
<ol>
<li>目前我們在thread mode</li>
<li>preempts：發生的exception比目前我們所在的exception權限還高</li>
</ol>
<p>發生exception時，ARM會自動把當前的register的資訊存起來，順序為xPSR, PC, LR, R12, R3, R2, R1, R0。儲存的方式就是push到當前的stack中，可能是main stack(SP&#x3D;MSP)，也可能是process stack(SP&#x3D;PSP)。</p>
<table>
<thead>
<tr>
<th>address</th>
<th>register</th>
</tr>
</thead>
<tbody><tr>
<td>SP+00</td>
<td>R0 &lt;- SP after exception</td>
</tr>
<tr>
<td>SP+0x04</td>
<td>R1</td>
</tr>
<tr>
<td>SP+0x08</td>
<td>R2</td>
</tr>
<tr>
<td>SP+0x0C</td>
<td>R3</td>
</tr>
<tr>
<td>SP+0x10</td>
<td>R12</td>
</tr>
<tr>
<td>SP+0x14</td>
<td>LR</td>
</tr>
<tr>
<td>SP+0x18</td>
<td>PC</td>
</tr>
<tr>
<td>SP+0x1C</td>
<td>xPSR</td>
</tr>
<tr>
<td>SP+0x20</td>
<td>xxx &lt;- SP before exception</td>
</tr>
</tbody></table>
<p>完成後接著會開始執行exception handler，並且把EXC_RETURN寫入LR。</p>
<h2 id="Exception-Return"><a href="#Exception-Return" class="headerlink" title="Exception Return"></a>Exception Return</h2><p>要從exception跳還必須要符合兩個條件：</p>
<ol>
<li>目前正在Handler Mode。</li>
<li>PC的值是合法的EXC_RETURN。</li>
</ol>
<p>關於EXC_RETURN的值，其實代表了ARM從handler mode回去的路徑，有三種可能：</p>
<ol>
<li>目前是nested exception，回去上層還是handler mode。</li>
<li>是由privileged thread mode呼叫的，也就是要回到state2。</li>
<li>是由unprivileged thread mode呼叫的，也就是要回到state3。</li>
</ol>
<p>因此EXC_RETURN有三個可能的值</p>
<table>
<thead>
<tr>
<th>EXC_RETURN</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>0xFFFFFFF1</td>
<td>Return to Handler mode.<br>Exception return gets state from the main stack.<br>Execution uses MSP after return.</td>
</tr>
<tr>
<td>0xFFFFFFF9</td>
<td>Return to Thread mode.<br>Exception Return get state from the main stack.<br>Execution uses MSP after return.</td>
</tr>
<tr>
<td>0xFFFFFFFD</td>
<td>Return to Thread mode.<br>Exception return gets state from the process stack.<br>Execution uses PSP after return.</td>
</tr>
</tbody></table>
<h2 id="Privileged-to-Unprivileged"><a href="#Privileged-to-Unprivileged" class="headerlink" title="Privileged to Unprivileged"></a>Privileged to Unprivileged</h2><p>接著我們要來探討怎麼從Privileged進入Unprivileged，也就是state2進入state3的部分。</p>
<p>如果要進入Unprivileged，那必須使用到特殊register - control。</p>
<table>
<thead>
<tr>
<th>bit</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>CONTROL[1]</td>
<td>0：Use MSP, 1: Use PSP</td>
</tr>
<tr>
<td>CONTROL[0]</td>
<td>0：Privileged thread mode, 1：Unprivileged thread mode</td>
</tr>
</tbody></table>
<p>要特別注意操作control register一定要用MRS和MSR register</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CONTROL值搬到R0</span><br><span class="line">MRS R0, CONTROL</span><br><span class="line"># R0的值放入CONTROL</span><br><span class="line">MSR CONTROL, R0</span><br></pre></td></tr></table></figure>
<p>進入Unprivileged Thread Mode的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV R0, 3</span><br><span class="line">MSR CONTROL, R0</span><br></pre></td></tr></table></figure>

<h1 id="ARM在切換上面的設計"><a href="#ARM在切換上面的設計" class="headerlink" title="ARM在切換上面的設計"></a>ARM在切換上面的設計</h1><p>ARM在處理nested exception上有自己的一套做法來加快速度，確保高優先權的exception能更快被執行到，達到更高的即時性(real-time)。</p>
<p>下面介紹兩種在Cortex M上面的機制：</p>
<ul>
<li>tail-chained：<ul>
<li>情況：如果發生exception1的時候又發生exception2，但是exception2的優先權沒有高於exception1，必須等待。</li>
<li>原本：一般來說exception1結束的時候會先pop stack，然後再push stack進入處理exception2。</li>
<li>改進：exception1到exception2中間的pop&amp;push其實是沒意義的，所以ARM Cortex M會在exception1結束後直接執行exception2，減少了中間的浪費。</li>
</ul>
</li>
<li>late-arriving<ul>
<li>情況：如果發生exception1並且執行state saving(上面說的push register)，這時候有更高優先權的exception2進來，發生preempts。</li>
<li>原本：會中斷exception1的state saving，優先讓給exception2。</li>
<li>改進：exception2其實也是需要state saving，所以繼續維持state saving，然後直接執行exception2。當exception2結束後，就又可以使用tail-chained的模式來執行exception1。</li>
</ul>
</li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p>關於Cortex M相關的資料非常推薦下面兩本書籍，都有中文的翻譯。JosephYiu有參與ARM Cortex M的設計，比較有權威性。</p>
<ul>
<li><a href="https://www.books.com.tw/products/CN11146482">ARM Cortex-M3權威指南</a></li>
<li><a href="https://www.tenlong.com.tw/products/9787302402923">ARM Cortex-M3與Cortex-M4權威指南, 3&#x2F;e ARM Cortex-M3与Cortex-M4权威指南</a></li>
</ul>
<p>可參考jserv老師和學生撰寫的rtenv+簡介，裡面也有提到ARM CM3權限的部分。</p>
<ul>
<li><a href="http://wiki.csie.ncku.edu.tw/embedded/rtenv">rtenv+</a></li>
</ul>
]]></content>
      <categories>
        <category>ARM</category>
      </categories>
  </entry>
  <entry>
    <title>C語言的行內組譯</title>
    <url>/2018/05/20/C-Inline-Assembly/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>有時候我們會在C的程式碼內看到<code>asm&#123;...&#125;</code>的結構，這代表的是行內組譯的概念，也就是在C語言中為了效率等目的直接要求compiler加入我們所指定組合語言。</p>
<p>舉個最簡單的範例，如果我們要求加入nop的指令，那就會變成如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 一個nop指令 */</span></span><br><span class="line"><span class="keyword">asm</span>(<span class="string">&quot;nop&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行要用\n隔開 */</span></span><br><span class="line">__asm__(<span class="string">&quot;nop\n&quot;</span></span><br><span class="line">        <span class="string">&quot;nop\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>不管是<code>asm</code>還是<code>__asm__</code>都是合法的，只要不要跟自己的symbol有衝突即可。</p>
<p>聰明的你可能發覺一件事，剛剛的例子只有指令而已，那如果假設我們要跟自己設定的變數互動那要怎麼辦呢？這時候就要用比較複雜的格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asm ( assembler template               /* 組合語言內容 */</span><br><span class="line">    : output operands                  /* 輸出的參數 */</span><br><span class="line">    : input operands                   /* 輸入的參數 */</span><br><span class="line">    : list of clobbered registers      /* 組合語言執行後會改變的項目 */</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>我們還是直接來看看程式比較有感覺</p>
<h2 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h2><p>我們寫一個簡單的test.c，只負責做加法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum, num1, num2;</span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    num2 = <span class="number">2</span>;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\r\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>編譯並且看一下組語的內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc test.c -s test.s</span><br><span class="line">$ cat test.s</span><br><span class="line">        .file   &quot;test.c&quot;</span><br><span class="line">        .text</span><br><span class="line">        .section        .rodata</span><br><span class="line">.LC0:</span><br><span class="line">        .string &quot;sum=%d\r\n&quot;</span><br><span class="line">        .text</span><br><span class="line">        .globl  main</span><br><span class="line">        .type   main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">        .cfi_startproc</span><br><span class="line">        pushq   %rbp</span><br><span class="line">        .cfi_def_cfa_offset 16</span><br><span class="line">        .cfi_offset 6, -16</span><br><span class="line">        movq    %rsp, %rbp</span><br><span class="line">        .cfi_def_cfa_register 6</span><br><span class="line">        subq    $16, %rsp</span><br><span class="line">        movl    $1, -4(%rbp)</span><br><span class="line">        movl    $2, -8(%rbp)</span><br><span class="line">        movl    -4(%rbp), %edx</span><br><span class="line">        movl    -8(%rbp), %eax</span><br><span class="line">        addl    %edx, %eax</span><br><span class="line">        movl    %eax, -12(%rbp)</span><br><span class="line">        movl    -12(%rbp), %eax</span><br><span class="line">        movl    %eax, %esi</span><br><span class="line">        movl    $.LC0, %edi</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        call    printf</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        leave</span><br><span class="line">        .cfi_def_cfa 7, 8</span><br><span class="line">        ret</span><br><span class="line">        .cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">        .size   main, .-main</span><br><span class="line">        .ident  &quot;GCC: (GNU) 8.1.0&quot;</span><br><span class="line">        .section        .note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>
<p>先不管其他細節，可以看到中間有兩行<code>addl    %edx, %eax</code>和<code>movl    %eax, -12(%rbp)</code>，對應的也就是<code>sum = num1 + num2;</code>，那我們來改寫一下吧！</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum, num1, num2;</span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    num2 = <span class="number">2</span>;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;addl    %%edx, %%eax\n&quot;</span></span><br><span class="line">        :<span class="string">&quot;=a&quot;</span>(sum)</span><br><span class="line">        :<span class="string">&quot;a&quot;</span>(num1), <span class="string">&quot;d&quot;</span>(num2)</span><br><span class="line">       );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\r\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>編譯並執行後就會發現結果是一樣的。不過到這邊我想大部分的人心中一定充滿了三個小朋友，所以還是在稍微解釋一下。</p>
<p>如前面所提，我們最主要執行的是<code>addl    %%edx, %%eax\n</code>，這邊跟前面不一樣的是%另有用途(後面會提)，所以要表示暫存器%eax時，我們要用%%來取代%字元。<br>然後第二行的<code>&quot;=a&quot;(sum)</code>中，<code>=</code>代表執行結束後我們要把某個值填到某個變數內(這邊指的就是括號中的sum)，可是某個值又是怎麼決定的呢？這個就是a的概念，也就是「規範條件」，要求編譯器只能對應到符合條件的register。</p>
<p>如果以x86的架構為例(這邊要注意每個CPU架構的規範條件都不同)：</p>
<table>
<thead>
<tr>
<th>規範條件</th>
<th>Register(s)</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>%eax, %ax, %al</td>
</tr>
<tr>
<td>b</td>
<td>%ebx, %bx, %bl</td>
</tr>
<tr>
<td>c</td>
<td>%ecx, %cx, %cl</td>
</tr>
<tr>
<td>d</td>
<td>%edx, %dx, %dl</td>
</tr>
<tr>
<td>S</td>
<td>%esi, %si</td>
</tr>
<tr>
<td>D</td>
<td>%edi, %di</td>
</tr>
<tr>
<td>f</td>
<td>fp</td>
</tr>
</tbody></table>
<p>由此可知就是要把%eax的結果填入sum中。同理，第三行的input部分<code>&quot;a&quot;(num1), &quot;d&quot;(num2)</code>分別也代表在執行組合語言前為num1和num2選擇register(這邊的例子是num1填入%eax、num2填入%edx)。</p>
<p>回頭看一下如果編成組合語言會是什麼樣子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        movl    $1, -4(%rbp)</span><br><span class="line">        movl    $2, -8(%rbp)</span><br><span class="line">        movl    -4(%rbp), %eax</span><br><span class="line">        movl    -8(%rbp), %edx</span><br><span class="line">#APP</span><br><span class="line"># 8 &quot;test.c&quot; 1</span><br><span class="line">        addl    %edx, %eax</span><br><span class="line"></span><br><span class="line"># 0 &quot;&quot; 2</span><br><span class="line">#NO_APP</span><br><span class="line">        movl    %eax, -12(%rbp)</span><br><span class="line">        movl    -12(%rbp), %eax</span><br><span class="line">        movl    %eax, %esi</span><br><span class="line">        movl    $.LC0, %edi</span><br><span class="line">        movl    $0, %eax</span><br><span class="line">        call    printf</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>在#APP和#NO_APP間就是我們的組語部分，看起來蠻符合我們的預期。</p>
<h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>可是我們難道都一定要自行決定register嗎？我們想要交由compiler決定。這時候其實可以用比較寬鬆的限制條件。一樣是x86的架構才能用：</p>
<table>
<thead>
<tr>
<th>規範條件</th>
<th>Register(s)</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>%eax, %ebx, %ecx, %edx, %esi, %edi</td>
</tr>
<tr>
<td>q</td>
<td>%eax, %ebx, %ecx, %edx</td>
</tr>
<tr>
<td>0,1,2..</td>
<td>%0, %1, %2…(代表第幾個參數)</td>
</tr>
</tbody></table>
<p>那就修改程式吧！</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;addl    %2, %0\n&quot;</span></span><br><span class="line">        :<span class="string">&quot;=r&quot;</span>(sum)</span><br><span class="line">        :<span class="string">&quot;0&quot;</span>(num1), <span class="string">&quot;r&quot;</span>(num2)</span><br><span class="line">       );</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>在這裡，我們input使用sum和num2使用<code>r</code>，代表交由compiler決定要用哪個register。但是num1為什麼是0呢？這個意思是我們要num1的值所放入的register要跟sum同樣。<br>0,1,2分別代表我們所決定的register順序，也就是%0&#x3D;&gt;之後要輸出到sum的register，%1&#x3D;&gt;num1放入的register，%2&#x3D;&gt;num2放入的register。</p>
<p>當然最後執行結果也會和範例一一樣。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></li>
<li><a href="http://sp1.wikidot.com/gnuinlineassembly">在 C 語言當中內嵌 GNU 的組合語言</a></li>
<li><a href="http://wen00072.github.io/blog/2015/12/10/about-inline-asm/">關於GNU Inline Assembly</a></li>
<li><a href="http://www.ethernut.de/en/documents/arm-inline-asm.html">ARM GCC Inline Assembler Cookbook</a></li>
<li><a href="https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">GCC-Inline-Assembly-HOWTO</a></li>
</ul>
]]></content>
      <categories>
        <category>程式語言</category>
        <category>C</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>關於ELF的兩三事</title>
    <url>/2018/05/06/ELF-format/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>程式設計師很大的機率是脫離不了Linux，而如果我們要在Linux上compile，大概一定會接觸到ELF這個格式。底下來簡單介紹一下ELF的格式是什麼，我們要怎麼從它獲得資訊。</p>
<p>ELF全名是Executable and Linking Format，在Linux中是編譯後的binary、object檔規範，也就是說我們從source code編譯後產生的檔案格式就是ELF了。</p>
<p>ELF的格式可以從兩種角度來看，第一種是Link的時候，第二種是執行的時候。兩者都一樣會有ELF header，但是底下的組成概念就完全不一樣。</p>
<p>Link的時候：</p>
<table>
<thead>
<tr>
<th>ELF header</th>
</tr>
</thead>
<tbody><tr>
<td>Program Header Table(Optional)</td>
</tr>
<tr>
<td>Section 1</td>
</tr>
<tr>
<td>Section 2</td>
</tr>
<tr>
<td>…</td>
</tr>
<tr>
<td>Section N</td>
</tr>
<tr>
<td>Section Header Table</td>
</tr>
</tbody></table>
<p>執行的時候：</p>
<table>
<thead>
<tr>
<th>ELF header</th>
</tr>
</thead>
<tbody><tr>
<td>Program Header Table</td>
</tr>
<tr>
<td>Segment 1</td>
</tr>
<tr>
<td>Segment 2</td>
</tr>
<tr>
<td>…</td>
</tr>
<tr>
<td>Segment N</td>
</tr>
<tr>
<td>Section Header Table(Optional)</td>
</tr>
</tbody></table>
<p>兩者最大的差異是Link的時候是以Section為觀點，用Section Header Table來當索引，指向各個Section。執行的時候則是用Segment為觀點，一個Segment可能是多個Section所組成，然後再用Program Header Table指向各個Segment。</p>
<h1 id="觀察ELF的方法"><a href="#觀察ELF的方法" class="headerlink" title="觀察ELF的方法"></a>觀察ELF的方法</h1><p>那要如何觀察ELF呢？如果你嘗試用記事本打開應該只會看到一團不知所云的亂碼，所以我們底下會透過各種工具的使用教學來解釋ELF格式。</p>
<h2 id="查看執行檔-od"><a href="#查看執行檔-od" class="headerlink" title="查看執行檔 - od"></a>查看執行檔 - od</h2><p>首先我們可以試著使用od這個指令來看檔案內容。od全名是octal dump，顧名思義就是用八進制來印內容，但他並不僅僅如此而已。</p>
<p>od指令的格式：<code>od -t [顯示格式] -A [偏移量使用的基數] [filename]</code></p>
<ul>
<li>-t：後面可接型態(d, o, x…)、一次顯示的byte數(數字)、是否顯示ASCII code(z)</li>
<li>-A：偏移量有(d, o, x, n)，n代表不顯示偏移量</li>
<li>-v：不省略重複的內容</li>
</ul>
<p>我們最常用格式：</p>
<ul>
<li><code>od -t x1 -A x [filename]</code>：代表用16進制來顯示檔案，偏移量是16的倍數</li>
<li><code>od -t x1z -A x [filename]</code>：同上，但是多加上顯示ASCII code</li>
</ul>
<p>那我們來看看ELF檔長什麼樣子，這邊以大家最常用的ls為例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ od -t x1z -A x /bin/ls | less</span><br><span class="line">000000 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00  &gt;.ELF............&lt;</span><br><span class="line">000010 02 00 3e 00 01 00 00 00 90 48 40 00 00 00 00 00  &gt;..&gt;......H@.....&lt;</span><br><span class="line">000020 40 00 00 00 00 00 00 00 00 a7 01 00 00 00 00 00  &gt;@...............&lt;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>可以看到前面有個<code>7f 45 4c 46</code>開頭，ASCII是<code>.ELF</code>(.代表非可見字元，這邊是0x7f也就是\177)，這個就是傳說中的ELF magic code了。不過這邊先停一下，如果我們要繼續用hex來看其實有點累，所以先換個工具來試試吧！</p>
<h2 id="使用readelf來觀察ELF資訊"><a href="#使用readelf來觀察ELF資訊" class="headerlink" title="使用readelf來觀察ELF資訊"></a>使用readelf來觀察ELF資訊</h2><p>readelf很明顯就是觀察ELF檔案的專門工具，使用方式如下</p>
<ul>
<li>格式：<code>readelf [選項] [filename]</code></li>
<li>讀取標頭選項<ul>
<li>-h：印 ELF header</li>
<li>-l：印 Program Header Table</li>
<li>-S：印 Section Header Table</li>
<li>-e：三者都印</li>
</ul>
</li>
<li>讀取資訊選項<ul>
<li>-s：符號表</li>
<li>-r：重定位資訊</li>
</ul>
</li>
<li>特別用法：<ul>
<li>-a：所有標頭資訊全部印出</li>
<li>-xn：先用-S看要查看的Section數字，然後n填上該數字就可以hexdump那個section</li>
</ul>
</li>
</ul>
<p>那我們來看看ls的ELF header長什麼樣。從下面可以看到，除了剛剛看到的Magic code外，還有版本、適用哪個OS&#x2F;ABI、在哪個機器平台運行、entry point adddress等等。</p>
<p>值得注意的是這邊有紀錄Program Header、Section Header的開始位址、大小、數量，所以我們可以用這個資訊找到Program&#x2F;Section Header。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -h /bin/ls</span><br><span class="line">ELF 檔頭：</span><br><span class="line">  魔術位元組：   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  類別:                              ELF64</span><br><span class="line">  資料:                              2 的補數，小尾序(little endian)</span><br><span class="line">  版本:                              1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI 版本:                          0</span><br><span class="line">  類型:                              EXEC (可執行檔案)</span><br><span class="line">  系統架構:                          Advanced Micro Devices X86-64</span><br><span class="line">  版本:                              0x1</span><br><span class="line">  進入點位址：               0x404890</span><br><span class="line">  程式標頭起點：          64 (檔案內之位元組)</span><br><span class="line">  區段標頭起點：          108288 (檔案內之位元組)</span><br><span class="line">  旗標：             0x0</span><br><span class="line">  此標頭的大小：       64 (位元組)</span><br><span class="line">  程式標頭大小：       56 (位元組)</span><br><span class="line">  Number of program headers:         9</span><br><span class="line">  區段標頭大小：         64 (位元組)</span><br><span class="line">  區段標頭數量：         28</span><br><span class="line">  字串表索引區段標頭： 27</span><br></pre></td></tr></table></figure>

<p>而Program Header的部分，我們可以看到有9個Segement，以及實際的位址在哪。另外有個「區段到節區映射中」(Section to Segment mapping)，這就是多個Section如何組成一個Segment的對應。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -l /bin/ls</span><br><span class="line">Elf 檔案類型為 EXEC (可執行檔案)</span><br><span class="line">進入點 0x404890</span><br><span class="line">共有 9 個程式標頭，開始於偏移量 64</span><br><span class="line"></span><br><span class="line">程式標頭：</span><br><span class="line">  類型           偏移量             虛擬位址           實體位址</span><br><span class="line">                 檔案大小          記憶大小              旗標   對齊</span><br><span class="line">  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040</span><br><span class="line">                 0x00000000000001f8 0x00000000000001f8  R E    8</span><br><span class="line">  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238</span><br><span class="line">                 0x000000000000001c 0x000000000000001c  R      1</span><br><span class="line">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span><br><span class="line">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</span><br><span class="line">                 0x0000000000019d44 0x0000000000019d44  R E    200000</span><br><span class="line">  LOAD           0x0000000000019df0 0x0000000000619df0 0x0000000000619df0</span><br><span class="line">                 0x0000000000000804 0x0000000000001570  RW     200000</span><br><span class="line">  DYNAMIC        0x0000000000019e08 0x0000000000619e08 0x0000000000619e08</span><br><span class="line">                 0x00000000000001f0 0x00000000000001f0  RW     8</span><br><span class="line">  NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254</span><br><span class="line">                 0x0000000000000044 0x0000000000000044  R      4</span><br><span class="line">  GNU_EH_FRAME   0x000000000001701c 0x000000000041701c 0x000000000041701c</span><br><span class="line">                 0x000000000000072c 0x000000000000072c  R      4</span><br><span class="line">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x0000000000000000 0x0000000000000000  RW     10</span><br><span class="line">  GNU_RELRO      0x0000000000019df0 0x0000000000619df0 0x0000000000619df0</span><br><span class="line">                 0x0000000000000210 0x0000000000000210  R      1</span><br><span class="line"></span><br><span class="line"> 區段到節區映射中:</span><br><span class="line">  節區段...</span><br><span class="line">   00</span><br><span class="line">   01     .interp</span><br><span class="line">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gn                                   u.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_                                   frame_hdr .eh_frame</span><br><span class="line">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss</span><br><span class="line">   04     .dynamic</span><br><span class="line">   05     .note.ABI-tag .note.gnu.build-id</span><br><span class="line">   06     .eh_frame_hdr</span><br><span class="line">   07</span><br><span class="line">   08     .init_array .fini_array .jcr .dynamic .got</span><br></pre></td></tr></table></figure>

<p>Section Header的話會仔細列出這個ELF所包含的所有Section以及位址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -S /bin/ls</span><br><span class="line"></span><br><span class="line">共有 28 個區段標頭，從偏移量 0x1a700 開始：</span><br><span class="line"></span><br><span class="line">區段標頭：</span><br><span class="line">  [號] 名稱              類型             位址              偏移量</span><br><span class="line">       大小              全體大小         旗標   連結  資訊  對齊</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000400238  00000238</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298</span><br><span class="line">       0000000000000068  0000000000000000   A       5     0     8</span><br><span class="line">...</span><br><span class="line">  [24] .data             PROGBITS         000000000061a3a0  0001a3a0</span><br><span class="line">       0000000000000254  0000000000000000  WA       0     0     32</span><br><span class="line">  [25] .bss              NOBITS           000000000061a600  0001a5f4</span><br><span class="line">       0000000000000d60  0000000000000000  WA       0     0     32</span><br><span class="line">  [26] .gnu_debuglink    PROGBITS         0000000000000000  0001a5f4</span><br><span class="line">       0000000000000008  0000000000000000           0     0     1</span><br><span class="line">  [27] .shstrtab         STRTAB           0000000000000000  0001a5fc</span><br><span class="line">       00000000000000fe  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure>

<h2 id="objdump取得ELF內容"><a href="#objdump取得ELF內容" class="headerlink" title="objdump取得ELF內容"></a>objdump取得ELF內容</h2><p>除了看ELF內的資訊外，我們可以進一步得到更細的資訊，包括dump內容和反組譯程式，這時候就要用objdump了</p>
<ul>
<li><code>objdump -s -j [section] [filename]</code>：把特定section完整dump出來</li>
<li><code>objdump -h [filename]</code>：看有哪些section，跟readelf功用類似</li>
<li><code>objdump -x [filename]</code>：把所有section都顯示出來</li>
<li><code>objdump -d [filename]</code>：反組譯程式</li>
<li><code>objdump -d -S [filename]</code>：反組譯程式加上行數</li>
<li><code>objdump -d -l [filename]</code>：反組譯程式加上source code</li>
</ul>
<p>同樣以ls為例，可以看到我們把text section的內容印出來了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ objdump -s -j .text /bin/ls</span><br><span class="line"></span><br><span class="line">/bin/ls：     檔案格式 elf64-x86-64</span><br><span class="line"></span><br><span class="line">Contents of section .text:</span><br><span class="line"> 4028a0 50b9882c 4100baa6 0e0000be 36374100  P..,A.......67A.</span><br><span class="line"> 4028b0 bf983c41 00e896fb ffff660f 1f440000  ..&lt;A......f..D..</span><br><span class="line"> 4028c0 41574156 41554154 554889f5 5389fb48  AWAVAUATUH..S..H</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h2 id="objcopy-x2F-strip修改ELF檔案"><a href="#objcopy-x2F-strip修改ELF檔案" class="headerlink" title="objcopy&#x2F;strip修改ELF檔案"></a>objcopy&#x2F;strip修改ELF檔案</h2><p>objcopy最主要的功能就是可以把文件作轉換，一部份或全部的內容copy另一個文件中</p>
<ul>
<li><code>objcopy -S -R .comment -R .note [input filename] [output filename]</code>：把編譯出來的symbol移除不必要的section(-S代表去掉symbol, relocation的訊息)</li>
<li><code>objcopy -O binary -j [section] [input filename] [output filename]</code>：也可以把某個section拿出來</li>
</ul>
<p>關於移除不必要的section部分，其實strip就可以做到了，只要用<code>strip [filename]</code>即可。</p>
<h3 id="objcopy進階用法"><a href="#objcopy進階用法" class="headerlink" title="objcopy進階用法"></a>objcopy進階用法</h3><p>objcopy可以做到把檔案變成ELF格式，提供給我們linking，這樣我們就可以避免檔案的讀取。</p>
<p>這邊用個簡單的範例，假設我們想要把某個文字檔包在程式內部(其實可以用圖片比較有感覺，只是我不想寫太複雜的程式)</p>
<p>先創立text.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is test txt.</span><br></pre></td></tr></table></figure>

<p>然後把text.txt變成object file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objcopy -I binary -O elf64-x86-64 -B i386:x86-64 text.txt text.o</span><br></pre></td></tr></table></figure>

<p>如果這時候show object資訊的話</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ objdump -x text.o</span><br><span class="line"></span><br><span class="line">text.o：     檔案格式 elf64-x86-64</span><br><span class="line">text.o</span><br><span class="line">系統架構：i386:x86-64， 旗標 0x00000010：</span><br><span class="line">HAS_SYMS</span><br><span class="line">起始位址 0x0000000000000000</span><br><span class="line"></span><br><span class="line">區段：</span><br><span class="line">索引名稱          大小      VMA               LMA               檔案關閉 對齊</span><br><span class="line">  0 .data         00000012  0000000000000000  0000000000000000  00000040  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">SYMBOL TABLE:</span><br><span class="line">0000000000000000 l    d  .data  0000000000000000 .data</span><br><span class="line">0000000000000000 g       .data  0000000000000000 _binary_test_txt_start</span><br><span class="line">0000000000000012 g       .data  0000000000000000 _binary_test_txt_end</span><br><span class="line">0000000000000012 g       *ABS*  0000000000000000 _binary_test_txt_size</span><br></pre></td></tr></table></figure>

<p>symsymbola把下面那些symbol放入test.c內，即可使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">extern char _binary_text_txt_start[];</span><br><span class="line">extern char _binary_text_txt_end[];</span><br><span class="line">extern char _binary_text_txt_size[];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char *ptr = _binary_text_txt_start;</span><br><span class="line">    printf(&quot;text.txt=%s\r\n&quot;, ptr);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯並執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc test.o test.o -o a.out</span><br><span class="line">% ./a.out</span><br><span class="line">text.txt=This is test txt.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="nm觀察symbol"><a href="#nm觀察symbol" class="headerlink" title="nm觀察symbol"></a>nm觀察symbol</h2><p>剛剛提了那麼多都是以ELF內的各種section為主，但是我們實際開發程式其實還是比較重視symbol，那我們有簡單方式可以看symbol嗎？這時候就要用到nm了。</p>
<ul>
<li><code>nm [filename]</code>：可以顯示symbol的數值、型態、名稱</li>
<li><code>nm --size-sort -r -S [filename]</code>：由大到小顯示symbol的數值、大小、型態、名稱</li>
</ul>
<p>舉個例子，我們可以看到下面執行結果symbol由大到小排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nm --size-sort -r -S test</span><br><span class="line">00008464 00000064 T __libc_csu_init</span><br><span class="line">00008444 00000020 T main</span><br><span class="line">000084c8 00000004 T __libc_csu_fini</span><br><span class="line">000084d4 00000004 R _IO_stdin_used</span><br><span class="line">00011028 00000001 b completed.9228</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>關於常見型態的部分可參考下表：</p>
<table>
<thead>
<tr>
<th>Section</th>
<th>類型(大寫代表global、小寫是local)</th>
</tr>
</thead>
<tbody><tr>
<td>text section</td>
<td>T&#x2F;t</td>
</tr>
<tr>
<td>data section</td>
<td>D&#x2F;d</td>
</tr>
<tr>
<td>Read only</td>
<td>R&#x2F;r</td>
</tr>
<tr>
<td>BSS</td>
<td>B&#x2F;b</td>
</tr>
<tr>
<td>未定義(如extern)</td>
<td>U</td>
</tr>
</tbody></table>
<h1 id="addr2line從位址轉成symbol"><a href="#addr2line從位址轉成symbol" class="headerlink" title="addr2line從位址轉成symbol"></a>addr2line從位址轉成symbol</h1><p>有時候我們執行程式會只知道位址，但是想要從位址得到到底是在程式哪行掛掉</p>
<ul>
<li><code>addr2line -f -e [filename] [address]</code>：-f代表要顯示是哪個function，-e代表address是來自該執行檔</li>
</ul>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>本篇文章主要簡單介紹ELF的結構，然後我們可以用 od、readelf、objdump、objcopy&#x2F;strip、nm, addr2line 幾個工具觀察ELF的格式。如果想要有進一步的認識，建議可以研究參考的連結。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></li>
<li><a href="http://ccckmit.wikidot.com/lk:elf">陳鍾誠的網站 - 目的檔格式 (ELF)</a></li>
<li><a href="https://paper.seebug.org/papers/Archive/refs/elf/Understanding_ELF.pdf">ELF 格式解析</a></li>
<li><a href="https://blog.csdn.net/xzongyuan/article/details/21082959">objcopy给目标文件设计一个段</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>GnuPG教學</title>
    <url>/2018/10/14/GnuPG%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>GPG全名為Gnu Privacy Guard(GnuPG) ，最初的目的是為了加密通訊的加密軟體，是為了替代PGP並符合GPL而產生的。目前很多自由軟體社群要驗證身份也都會需要用到這套工具。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ul>
<li>指令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ubuntu</span><br><span class="line">sudo apt-get install gnupg</span><br><span class="line"># MAX</span><br><span class="line">brew install gnupg</span><br></pre></td></tr></table></figure></li>
<li>GUI<ul>
<li>其實現在GUI介面都做得很好看了，而且也很容易上手，建議可以用GUI的tools。</li>
<li>MAC的GUI tools可從<a href="https://gpgtools.org/gpgsuite.html">gpgtools.org</a>安裝</li>
</ul>
</li>
</ul>
<h2 id="建立key"><a href="#建立key" class="headerlink" title="建立key"></a>建立key</h2><ol>
<li>先產生key<ul>
<li>可選擇”RSA &amp; RSA”，key長度為4096</li>
<li>真實姓名就填自己的英文名字，備註可填中文</li>
<li>產生的key會放在<code>~/.gnupg</code>這個目錄下</li>
<li>記得要輸入密碼，防止別人入侵系統時可以直接拿到私鑰</li>
<li>最後會產生出user ID的hash(UID)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --full-generate-key</span><br><span class="line"># 如果gen key發生問題，可用如下指令後再一次</span><br><span class="line">gpgconf --kill gpg-agent</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>接下來就是產生撤銷憑證，未來忘記密碼可以用來撤銷，因此要小心保管<ul>
<li>注意如果key有填utf-8，這步在MAC可能會出問題，不過如果是用GUI卻沒問題，原因並不清楚。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -o revocation.crt --gen-revoke [UID]</span><br><span class="line"># 也可以直接放到.gnupg內</span><br><span class="line">gpg --gen-revoke [UID] &gt; ~/.gnupg/revocation-[UID].crt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>釋出公鑰，這個公鑰可以傳給朋友，或是上傳到server<ul>
<li>-a：代表匯出明碼</li>
<li>-o：代表輸出檔名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -ao mypublic.asc --export [UID]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>如果是要把朋友的公鑰放入已知道人的清單<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --import friends.asc</span><br></pre></td></tr></table></figure></li>
<li>可以用fingerprint顯示自已的公鑰後，弄到pdf上印出<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -v --fingerprint [UID]</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="管理key"><a href="#管理key" class="headerlink" title="管理key"></a>管理key</h2><h3 id="查看、編輯與刪除key"><a href="#查看、編輯與刪除key" class="headerlink" title="查看、編輯與刪除key"></a>查看、編輯與刪除key</h3><ol>
<li>查看目前的鑰匙<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有公鑰</span><br><span class="line">gpg --list-keys</span><br><span class="line"># 同時看簽名</span><br><span class="line">gpg --list-sigs </span><br><span class="line"># 列出所有私鑰</span><br><span class="line">gpg --list-secret-keys</span><br></pre></td></tr></table></figure></li>
<li>編輯key(對key簽名也是用同樣的方法)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --edit-key [UID]</span><br></pre></td></tr></table></figure></li>
<li>刪除已存入key的方式，如果有私鑰要先刪除<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先刪除私鑰</span><br><span class="line">gpg --delete-secret-key [UID]</span><br><span class="line"># 刪除公鑰</span><br><span class="line">gpg --delete-key [UID]</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h3><ol>
<li>首先先搜尋對象的public key<ul>
<li>這裡指定的key server是用MIT的，可以找其他也有公信力的Server，可參考<a href="https://en.wikipedia.org/wiki/Key_server_(cryptographic)">wiki</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://pgp.mit.edu --search-keys &#x27;Linus Torvalds&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>得到對方的public key後，將其存入<code>~/.gnupg/pubring.gpg</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://pgp.mit.edu --recv-keys 79BE3E4300411886</span><br></pre></td></tr></table></figure></li>
<li>可查看與更新朋友的public key<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --list-keys</span><br><span class="line">gpg --refresh-keys</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="import-x2F-export"><a href="#import-x2F-export" class="headerlink" title="import&#x2F;export"></a>import&#x2F;export</h3><ol>
<li>除了搜尋以外，也可以用import&#x2F;export的方式管理朋友的公鑰<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg --import public_keys_list.txt</span><br><span class="line">gpg --export -ao public_keys_list.txt</span><br></pre></td></tr></table></figure></li>
<li>import&#x2F;export自己的金鑰<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># export 公鑰</span><br><span class="line">gpg --armor --output public-key.asc --export [UID]</span><br><span class="line"># export 私鑰</span><br><span class="line">gpg --armor --output private-key.asc --export-secret-keys [UID]</span><br><span class="line"># import</span><br><span class="line">gpg --import [金鑰]</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="用key傳送接收信件"><a href="#用key傳送接收信件" class="headerlink" title="用key傳送接收信件"></a>用key傳送接收信件</h2><ol>
<li>假設我們要傳送secret.tgz給朋友，可以先進行加密<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -ear 朋友 &lt; secret.tgz &gt; secret.tgz.asc </span><br></pre></td></tr></table></figure></li>
<li>朋友收到secret.tgz.asc後可用如下指令變回secret.tgz<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpg -d &lt; secret.tgz.asc &gt; secret.tgz</span><br></pre></td></tr></table></figure></li>
<li>如果要確認發信人身份<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先對檔案簽名</span><br><span class="line">gpg --clearsign file.txt</span><br><span class="line"># 驗證檔案身份</span><br><span class="line">gpg --verify &lt; file.txt.asc</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://newtoypia.blogspot.com/2013/12/gnupg-pgp.html">使用 GnuPG 建立你的 PGP 金鑰， 讓別人能夠私密寄信給你</a></li>
<li><a href="https://wiki.debian.org/Keysigning">Debian關於Keysigning的教學</a></li>
<li><a href="https://wiki.archlinux.org/index.php/GnuPG_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87)">GnuPG (正體中文)-GnuPG</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程-阮一峰</a></li>
<li><a href="http://egret-bunjinw.blogspot.com/2013/08/gpg.html">gpg 數位簽章</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP header 安全設定</title>
    <url>/2018/01/03/HTTP-header-%E5%AE%89%E5%85%A8%E8%A8%AD%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="總覽"><a href="#總覽" class="headerlink" title="總覽"></a>總覽</h1><p>根據<a href="https://devco.re/blog/2014/03/10/security-issues-of-http-headers-1/">DEVCORE</a>，相關HTTP header可以如下分類</p>
<ul>
<li>防禦 XSS：<ul>
<li>Content-Security-Policy</li>
<li>Set-Cookie: HttpOnly</li>
<li>X-XSS-Protection</li>
<li>X-Download-Options</li>
</ul>
</li>
<li>防禦 Clickjacking：<ul>
<li>X-Frame-Options</li>
</ul>
</li>
<li>強化 HTTPS 機制：<ul>
<li>Set-Cookie: Secure</li>
<li>Strict-Transport-Security</li>
</ul>
</li>
<li>避免瀏覽器誤判文件形態：<ul>
<li>X-Content-Type-Options</li>
</ul>
</li>
<li>保護網站資源別被任意存取：<ul>
<li>Access-Control-Allow-Origin</li>
<li>X-Permitted-Cross-Domain-Policies</li>
</ul>
</li>
</ul>
<h1 id="防禦-XSS"><a href="#防禦-XSS" class="headerlink" title="防禦 XSS"></a>防禦 XSS</h1><h2 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h2><ul>
<li>原理：<ul>
<li>用來控制不要讀取外部不可信賴資源，可以防止XSS或injection</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: policy # policy代表描述你的CSP的策略</span><br></pre></td></tr></table></figure>
<ul>
<li>範例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 所有內容都來自同一個地方</span><br><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;</span><br><span class="line"># 比較複雜的設定，不擋image來源，但是設定media和script的來源，注意後方設定會蓋掉default-src的設定</span><br><span class="line">Content-SecContent-Security-Policy: default-src &#x27;self&#x27;; img-src *; media-src media1.com media2.com; script-src userscripts.example.com</span><br><span class="line"># 推薦設定：因為預設會擋html裡有js,style，但是大部分都會用到，所以要加上unsafe-inline</span><br><span class="line">Content-Security-Policy: default-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>可參考<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/Using_Content_Security_Policy">内容安全策略( CSP )</a>: 對CSP的基本解說</li>
<li><a href="https://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/">Content-Security-Policy - HTTP Headers 的資安議題 (2)</a>: 對CSP非常詳細的解說，建議一定要看一下。</li>
</ul>
</li>
</ul>
<h2 id="Set-Cookie-HttpOnly"><a href="#Set-Cookie-HttpOnly" class="headerlink" title="Set-Cookie: HttpOnly"></a>Set-Cookie: HttpOnly</h2><ul>
<li>原理：<ul>
<li>http only確保javascript無法直接存取cookie。</li>
</ul>
</li>
<li>啟動方式：<ul>
<li>只要在Set-Cookie的header加上HttpOnly就可以生效了。</li>
</ul>
</li>
</ul>
<h2 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h2><ul>
<li>原理：<ul>
<li>這是IE引進的功能，可以檢查XSS攻擊，不過firefox不支援。基本上CSP已經提供足夠防禦，但是可以讓不支援CSP舊版瀏覽器有比較高的安全性。</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-XSS-Protection: 0   # 禁止XSS過濾</span><br><span class="line">X-XSS-Protection: 1   # 允許XSS過濾，遇到XSS會清除頁面</span><br><span class="line">X-XSS-Protection: 1; mode=block  # 允許XSS過濾，遇到XSS會阻擋頁面加載</span><br></pre></td></tr></table></figure></li>
<li>可參考：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-XSS-Protection">mozilla X-XSS-Protection</a>: 詳細介紹這個header在哪些browser支援和有什麼選項</li>
<li><a href="http://likewaylai.blogspot.tw/2012/03/javax-xss-protection.html">資安JAVA(十一)：X-XSS-Protection</a>: 這邊有提到X-XSS-Protection的由來，並且提到IE8之前在這個功能上的問題</li>
</ul>
</li>
</ul>
<h2 id="X-Download-Options"><a href="#X-Download-Options" class="headerlink" title="X-Download-Options"></a>X-Download-Options</h2><ul>
<li>原理：<ul>
<li>在IE8加入了這個選項，防止使用者下載檔案的時候點選直接開啟，避免執行執行了程式而且沒有在下載管理員留下紀錄的問題。</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Download-Options: noopen</span><br></pre></td></tr></table></figure></li>
<li>可參考<ul>
<li><a href="https://msdn.microsoft.com/zh-tw/library/jj542450(v=vs.85).aspx">Microsoft-自訂下載體驗</a>: 為什麼要有這個選項</li>
<li><a href="https://stackoverflow.com/questions/15299325/x-download-options-noopen-equivalent">X-Download-Options: noopen equivalent</a>: 其他browser沒有想對應功能</li>
</ul>
</li>
</ul>
<h1 id="防禦-Clickjacking"><a href="#防禦-Clickjacking" class="headerlink" title="防禦 Clickjacking"></a>防禦 Clickjacking</h1><h2 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h2><ul>
<li>原理：<ul>
<li>控制frame和iframe顯示頁面的規則，不讓別人可以內嵌頁面。</li>
</ul>
</li>
<li>啟動方式：<ul>
<li>在header加上X-Frame-Options: XXX，XXX可以是<ul>
<li>DENY：禁止frame頁面</li>
<li>SAMEORIGIN：允許frame顯示同一網站頁面</li>
<li>ALLOW-FROM url：允許frame顯示某一網站頁面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Frame-Options: SAMEORIGIN</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="強化-HTTPS-機制"><a href="#強化-HTTPS-機制" class="headerlink" title="強化 HTTPS 機制"></a>強化 HTTPS 機制</h1><h2 id="Set-Cookie-Secure"><a href="#Set-Cookie-Secure" class="headerlink" title="Set-Cookie: Secure"></a>Set-Cookie: Secure</h2><ul>
<li>原理：<ul>
<li>強制讓cookie必須要在https的情況下才能傳輸</li>
</ul>
</li>
<li>啟動方式：<ul>
<li>只要在Set-Cookie的header加上Secure就可以生效了。</li>
</ul>
</li>
</ul>
<h2 id="Strict-Transport-Security"><a href="#Strict-Transport-Security" class="headerlink" title="Strict-Transport-Security"></a>Strict-Transport-Security</h2><ul>
<li>原理：<ul>
<li>當使用者用http連線，強制轉成https連線，這個選項只有在https連線的情況下才有用，如果是http會被忽略(因為可能有MITM)</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=expireTime [; includeSubdomains]</span><br><span class="line"># max-age=expireTime: browser要記住這個網站要用https連線的時間</span><br><span class="line"># includeSubdomains: 哪些subdomain也都要同樣設定</span><br></pre></td></tr></table></figure></li>
<li>可參考<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Security/HTTP_Strict_Transport_Security">Mozilla HTTP Strict Transport Security</a>: 詳細介紹這個header在哪些browser支援和有什麼選項</li>
</ul>
</li>
</ul>
<h1 id="避免瀏覽器誤判文件形態"><a href="#避免瀏覽器誤判文件形態" class="headerlink" title="避免瀏覽器誤判文件形態"></a>避免瀏覽器誤判文件形態</h1><h2 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h2><ul>
<li>原理：<ul>
<li>告訴client要遵守Content-Type的MIME設定，不要自行偵測，管理者必須要確保自己的設定是沒有錯誤的。</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Content-Type-Options：nosniff</span><br></pre></td></tr></table></figure></li>
<li>可參考<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options">Mozilla X-Content-Type-Options</a>: 詳細介紹這個header在哪些browser支援和有什麼選項</li>
</ul>
</li>
</ul>
<h1 id="保護網站資源別被任意存取"><a href="#保護網站資源別被任意存取" class="headerlink" title="保護網站資源別被任意存取"></a>保護網站資源別被任意存取</h1><h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><ul>
<li>原理：<ul>
<li>CORS是用來解決腳本的跨域資源請求問題，用來確保資源是否可以被其他網站存取，但是要注意它不能阻擋CSRF</li>
<li>不能阻擋CSRF的原因：<ul>
<li>CORS是阻擋js所發出的request，但是CSRF可以透過form, tag等發起請求</li>
<li>Acess-Control-Allow-Origin是由browser解析的，所以其實request已經發出了，只是response被browser阻擋</li>
</ul>
</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Origin: &lt;origin&gt;</span><br></pre></td></tr></table></figure></li>
<li>可參考<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin">Mozilla Access-Control-Allow-Origin</a>: 詳細介紹這個header的選項</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS">跨來源資源共享（CORS）</a>:詳細解釋CORS(Cross-Origin Resource Sharing)的功能</li>
<li><a href="https://blog.toright.com/posts/3205/%E5%AF%A6%E4%BD%9C-cross-origin-resource-sharing-cros-%E8%A7%A3%E6%B1%BA-ajax-%E7%99%BC%E9%80%81%E8%B7%A8%E7%B6%B2%E5%9F%9F%E5%AD%98%E5%8F%96-request.html">實作 Cross-Origin Resource Sharing (CORS) 解決 Ajax 發送跨網域存取 Request</a>: 如何用CORS存取外部資源</li>
<li><a href="https://b1ngz.github.io/csrf-and-cors/">简单聊一聊 CSRF 与 CORS 的关系:</a> CORS並不能防禦CSRF，這篇有很詳細的介紹</li>
</ul>
</li>
</ul>
<h2 id="X-Permitted-Cross-Domain-Policies"><a href="#X-Permitted-Cross-Domain-Policies" class="headerlink" title="X-Permitted-Cross-Domain-Policies"></a>X-Permitted-Cross-Domain-Policies</h2><ul>
<li>原理：<ul>
<li>當不能把crossdomain.xml放在根目錄時需要設定該選項</li>
<li>crossdomain.xml: 從別的domain讀取flash時所需要的策略文件</li>
</ul>
</li>
<li>啟動方式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Permitted-Cross-Domain-Policies: master-only # master-only代表只允許主策略文件(/crossdomain.xml)</span><br></pre></td></tr></table></figure></li>
<li>可參考<ul>
<li><a href="http://blog.xuite.net/fireworkgoldfish/CodeIndex/27179479-Cross+Domain+Policy">Cross Domain Policy</a>: 提到關於crossdomain.xml的設定</li>
<li><a href="http://blog.csdn.net/summerhust/article/details/7721627">关于跨域策略文件crossdomain.xml文件</a>: crossdomain.xml的範例</li>
<li><a href="https://toutiao.io/posts/218856/app_preview">如何使用 HTTP 响应头字段来提高 Web 安全性？</a>: X-Permitted-Cross-Domain-Policies相關解說</li>
</ul>
</li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.qa-knowhow.com/?p=1467">11個網站安全防護的 http Header 設定</a>: 其他人提到的header設定</li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>Linux和程式的互動</title>
    <url>/2018/06/12/Linux%E5%92%8C%E7%A8%8B%E5%BC%8F%E7%9A%84%E4%BA%92%E5%8B%95/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>這篇我們想要來探討 Linux 是怎麼和程式互動的，這邊包括兩個部分：Linux 如何執行程式以及程式如何讓 Linux 做系統操作。</p>
<h1 id="程式如何執行main"><a href="#程式如何執行main" class="headerlink" title="程式如何執行main"></a>程式如何執行main</h1><p>一般要呼叫程式來執行的，我們知道的是只要在 shell 下類似<code>./a.out</code>的指令，程式就會執行我們程式中的 main，但是這其中的原理是什麼呢？讓我們看看到執行 main 前做了哪些事。</p>
<p>下面例子我們以Kernel v4.17為例</p>
<ol>
<li>首先 shell 會 fork 一個 process，然後再呼叫 exec 系列函數把該 process 置換成指定的程式</li>
<li>execve 會呼叫 do_execve ，然後再呼叫 do_execveat_common，可參考<a href="https://elixir.bootlin.com/linux/v4.17/source/fs/exec.c#L1856">fs&#x2F;exec.c的1856行</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">do_execve</span><span class="params">(<span class="keyword">struct</span> filename *filename,</span></span><br><span class="line"><span class="params">	<span class="type">const</span> <span class="type">char</span> __user *<span class="type">const</span> __user *__argv,</span></span><br><span class="line"><span class="params">	<span class="type">const</span> <span class="type">char</span> __user *<span class="type">const</span> __user *__envp)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_arg_ptr</span> <span class="title">argv</span> =</span> &#123; .ptr.native = __argv &#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_arg_ptr</span> <span class="title">envp</span> =</span> &#123; .ptr.native = __envp &#125;;</span><br><span class="line">	<span class="keyword">return</span> do_execveat_common(AT_FDCWD, filename, argv, envp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接著do_execveat_common會讀取struct linux_binprm，並且根據檔案格式尋找適合的binary header<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_execveat_common</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> filename *filename,</span></span><br><span class="line"><span class="params">			      <span class="keyword">struct</span> user_arg_ptr argv,</span></span><br><span class="line"><span class="params">			      <span class="keyword">struct</span> user_arg_ptr envp,</span></span><br><span class="line"><span class="params">			      <span class="type">int</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 重要的structure，保留執行檔的相關訊息</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">linux_binprm</span> *<span class="title">bprm</span>;</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 打開要執行的ELF檔</span></span><br><span class="line">	file = do_open_execat(fd, filename, flags);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 生成mm_struct，供執行檔使用</span></span><br><span class="line">	retval = bprm_mm_init(bprm);</span><br><span class="line">	<span class="keyword">if</span> (retval)</span><br><span class="line">		<span class="keyword">goto</span> out_unmark;</span><br><span class="line">    <span class="comment">// 計算帶入的參數</span></span><br><span class="line">	bprm-&gt;argc = count(argv, MAX_ARG_STRINGS);</span><br><span class="line">	<span class="keyword">if</span> ((retval = bprm-&gt;argc) &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 讀取 header</span></span><br><span class="line">	retval = prepare_binprm(bprm);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 裡面會呼叫 search_binary_handler，根據檔案格式呼叫適合的binary_handler</span></span><br><span class="line">	retval = exec_binprm(bprm);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ELF的binary handler位在<a href="https://elixir.bootlin.com/linux/v4.17/source/fs/binfmt_elf.c#L690">fs&#x2F;binfmt_elf.c的690行</a>，做了header確認後會load program header和設定並執行elf_interpreter<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">load_elf_binary</span><span class="params">(<span class="keyword">struct</span> linux_binprm *bprm)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 讀取program header</span></span><br><span class="line">	elf_phdata = load_elf_phdrs(&amp;loc-&gt;elf_ex, bprm-&gt;file);</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 讀取elf_interpreter</span></span><br><span class="line">    retval = kernel_read(bprm-&gt;file, elf_interpreter,</span><br><span class="line">                    elf_ppnt-&gt;p_filesz, &amp;pos);</span><br><span class="line">    <span class="comment">// 把當前程式資訊清除並換上新的程式</span></span><br><span class="line">    retval = flush_old_exec(bprm);</span><br><span class="line">...</span><br><span class="line">    current-&gt;mm-&gt;end_code = end_code;</span><br><span class="line">	current-&gt;mm-&gt;start_code = start_code;</span><br><span class="line">	current-&gt;mm-&gt;start_data = start_data;</span><br><span class="line">	current-&gt;mm-&gt;end_data = end_data;</span><br><span class="line">	current-&gt;mm-&gt;start_stack = bprm-&gt;p;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 執行elf_interpreter</span></span><br><span class="line">    start_thread(regs, elf_entry, bprm-&gt;p);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>經過Context Switch後，應該會從elf_interpreter執行，通常應該會是&#x2F;lib&#x2F;ld-x.x.so。ld-x.x.so的進入點是_start，最後會連結到<a href="https://code.woboq.org/userspace/glibc/elf/rtld.c.html">glibc&#x2F;elf&#x2F;rtld.c</a>的_dl_start，針對環境變數做處理。</li>
</ol>
<ul>
<li>我們常見的LD_PRELOAD也是在這邊進行處理的</li>
</ul>
<ol start="6">
<li>當上述工作都做完後，就會進入 ELF binary 的<code>_start</code>，其中會呼叫 glibc 的<a href="https://code.woboq.org/userspace/glibc/csu/libc-start.c.html">__libc_start_main</a>進行初始設定，最後就會呼叫main()<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">result = main (argc, argv, __environ MAIN_AUXVEC_PARAM);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用-system-call"><a href="#使用-system-call" class="headerlink" title="使用 system call"></a>使用 system call</h1><p>通常AP在Linux要跟kernel層互動大概只能透過system call，然而system call的使用大多數已經被包裝起來，所以幾乎不會看到，這邊我們來探討一下要怎麼在Linux直接呼叫system call。以下範例皆來自<a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></p>
<h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>最簡單的呼叫system call方法是syscall。</p>
<p>syscall.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = syscall(__NR_getpid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret=%d pid=%d\n&quot;</span>, ret, getpid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make syscall</span><br><span class="line">$ ./syscall</span><br><span class="line">ret=18 pid=18</span><br></pre></td></tr></table></figure>
<p>看起來是很順利取得PID。我們可以把__NR_getpid換成其他的system call數字，也可以達到同樣效果。</p>
<h2 id="int-0x80"><a href="#int-0x80" class="headerlink" title="int 0x80"></a>int 0x80</h2><p>當然我們也可以用<code>int 0x80</code>來做到同樣的事情，但是要注意的是這樣的效率不會比較好，可參考<a href="https://stackoverflow.com/questions/12806584/what-is-better-int-0x80-or-syscall">What is better “int 0x80” or “syscall”?</a></p>
<p>另外這個做法在x64的架構是無法被使用的，可參考<a href="https://stackoverflow.com/questions/46087730/what-happens-if-you-use-the-32-bit-int-0x80-linux-abi-in-64-bit-code">What happens if you use the 32-bit int 0x80 Linux ABI in 64-bit code?</a></p>
<p>syscall2.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    asm volatile (&quot;int $0x80&quot;:&quot;=a&quot;(ret):&quot;0&quot;(__NR_getpid));</span><br><span class="line">    printf(&quot;ret=%d pid=%d\n&quot;, ret, getpid());</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sysenter"><a href="#sysenter" class="headerlink" title="sysenter"></a>sysenter</h2><p>這部分也是只能在x86的平台上使用，會出現這個機制的理由是int 0x80的效率實在太差了。這邊的使用方式有點複雜，就不列出來了。</p>
<h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><p>這三種方式的比較簡單統整一下</p>
<p>syscall：現在主流，能在x64運行<br>int 0x80：只能在x86，效率差，已被捨棄<br>sysenter：只能在x86，用來替代int 0x80</p>
<p>詳情可以參考<a href="https://www.jianshu.com/p/f4c04cf8e406">Linux系统调用机制int 0x80、sysenter&#x2F;sysexit、syscall&#x2F;sysret的原理与代码分析</a>，寫得非常詳細。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></li>
<li><a href="https://blog.csdn.net/eleven_xiy/article/details/77876702">Linux系统ELF程序的执行过程</a></li>
<li><a href="https://blog.csdn.net/conansonic/article/details/54236335">_dl_start源码分析</a></li>
<li><a href="https://www.jianshu.com/p/f4c04cf8e406">Linux系统调用机制int 0x80、sysenter&#x2F;sysexit、syscall&#x2F;sysret的原理与代码分析</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>IPython Notebook - Jupyter教學</title>
    <url>/2018/12/02/IPython-Notebook-Jupyter%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><a href="https://ipython.org/notebook.html">Jupyter Notebook</a>，過去被稱為ipython notebook，是ipython內的強大工具。</p>
<p>Jupyter最常用在學習資料處理上面，因為輸入指令後就可以產生相對應的圖形結果，做到資料視覺化的功能。而且更重要的是我們可以將自己的結果輸出成html或上傳Github，分享給其他人進行討論。</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>如果有安裝python-pip了，可以直接用如下指令安裝。要是遇到權限問題可以再加上sudo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &quot;ipython[notebook]&quot;</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul>
<li>創造一個資料夾，然後在裡面開啟jupyter notebook<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ipython_notebook &amp;&amp; cd ipython_notebook</span><br><span class="line">jupyter notebook</span><br><span class="line"># 原本是可以用ipython notebook，但是未來可能會被捨棄</span><br></pre></td></tr></table></figure></li>
<li>如果要在別的port開啟<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook --port 8080</span><br></pre></td></tr></table></figure>
接下來在web上應該可以直接連線Jupyter。</li>
</ul>
<p>選擇New-&gt;python3後就可以在web新創一個notebook，值得注意的是這個notebook的副檔名是<code>.ipynb</code>，存放位置就是在我們當前的目錄，也就是<code>ipython_notebook</code></p>
<h2 id="登入機制"><a href="#登入機制" class="headerlink" title="登入機制"></a>登入機制</h2><p>jupyter notebook其實是有登出機制的，在右上角logout後，就要用密碼或token才能登入。</p>
<p>這時候其實可以直接重啟server，或是輸入<code>jupyter notebook list</code>來查看token，就可以再次登入了。</p>
<h2 id="編輯方式"><a href="#編輯方式" class="headerlink" title="編輯方式"></a>編輯方式</h2><p>在Jupyter中，進入notebook後會看到一個可以輸入值的空間，這個叫做cell。cell上面輸入python語法後，按下shift+enter就會產生執行結果。而我們可以增加或減少這些cell。</p>
<p>特別注意原本cell是藍色的，代表在command mode，但是如果點選cell後就會變成綠色，代表進入edit mode。從edit mode跳回command mode只要按下ESC即可。</p>
<p>另外可以注意每個cell可以選擇不同屬性，最常用的還是Code和Markdown。Code就是python的部分，而Markdown則是可以寫上相關的文字敘述。</p>
<h2 id="常用快捷鍵"><a href="#常用快捷鍵" class="headerlink" title="常用快捷鍵"></a>常用快捷鍵</h2><p>主要可以點選Help-&gt;Keyboard Shortcuts來看目前快速鍵怎麼使用(或是按ESC+h更快)</p>
<p>常用快速鍵如下所示：</p>
<ul>
<li><code>c</code>：複製當前的cell</li>
<li><code>x</code>：剪下當前的cell</li>
<li><code>v</code>：貼上剪貼簿的cell</li>
<li><code>dd</code>：刪除當前cell</li>
<li><code>a</code>：在上方插入新的cell</li>
<li><code>b</code>：在下方插入新的cell</li>
<li><code>shift+enter</code>：執行當前cell並跳到下一個cell</li>
<li><code>ctrl+enter</code>：執行當前cell</li>
<li><code>shift+tab</code>：可以顯示當前函式的使用方法</li>
</ul>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>我們除了可以把當前notebook下載成html外，也可以push到Github上並且利用<a href="https://nbviewer.jupyter.org/">nbviewer</a>這個網站來分享。</p>
<p>舉個例子，<a href="https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks">A gallery of interesting Jupyter Notebooks</a>就收集了不少有趣的Juypter Notebook範例。</p>
<p>只要有ipynb上傳到Github，我們就可以看到輸出結果，就像<a href="https://github.com/lrhgit/uqsa_tutorials/blob/master/preliminaries.ipynb">這個GitHub</a>的結果可以被<a href="http://nbviewer.jupyter.org/github/lrhgit/uqsa_tutorials/blob/master/preliminaries.ipynb">nbviewer</a>顯示出來。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://ericjhang.github.io/archives/e300480b.html">ipython notebook安裝教學</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10192614">[Day02]Jupyter Notebook操作介紹！</a></li>
<li><a href="https://medium.com/@yehjames/%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E7%AC%AC1-2%E8%AC%9B-jupyter-notebook%E4%BB%8B%E7%B4%B9-705f023e3720">[資料分析&amp;機器學習] 第1.2講：Jupyter Notebook介紹</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>clean code</title>
    <url>/2017/09/03/clean-code/</url>
    <content><![CDATA[<p>這邊記錄一下我看clean code的筆記整理<br>不過我得承認其實書裡很多做法我是不太贊同的，例如function要壓在20行以內這種<br>在C要這樣實踐很有難度，而且我看很多open source的project也都沒有遵循這樣的規範<br>但是這本書還是很有參考價值的，至少會讓自己反省寫code時有沒有犯了這些問題。<br>書中提到一個概念：</p>
<blockquote>
<p>程式設計師有大半時間花在看code，因此好閱讀的code對快速寫程式是有幫助的</p>
</blockquote>
<p>我想這就是我從書裡得到最大的收穫吧！</p>
<h1 id="有意義的名稱"><a href="#有意義的名稱" class="headerlink" title="有意義的名稱"></a>有意義的名稱</h1><ul>
<li><p>讓程式碼的隱含性高，名稱和意圖符合</p>
</li>
<li><p>避免誤導<br>讓變數不會相似高(autocomplete好找)<br>像是l和1，0和O</p>
</li>
<li><p>產生有意義的區別<br>例如a1,a2、ProductInfo,ProductData,或是table, variable等等都看不出差別</p>
</li>
<li><p>使用能念出來的名稱<br>人類大腦有一大部分都專注在字詞的概念，字詞是可發音的，方便理解<br>方便同事間彼此溝通</p>
</li>
<li><p>使用可被搜尋的名字<br>使用單一字母變數或是數值常數很難被找到<br>例如<code>MAX_CLASSES_PER_STUDENT</code>比<code>7</code>還要好找，命名變數e幾乎每段程式碼都會用到<br>一般來說，長命名比短命名好，命名長度應該和scope作對應，範圍越大的應該要用比較容易識別的名字</p>
</li>
<li><p>避免編碼<br>這邊的編碼是指形態或視野，作者不推薦使用匈牙利標誌法，因為那是早期編譯器不會進形型態檢查，但是現在編譯器已經會做了，所以不需要浪費時間做這件事</p>
<blockquote>
<p>可是有時候在看code，有提示還是比較容易記憶的，見仁見智</p>
</blockquote>
</li>
<li><p>成員的字首<br>不需要在變數前加上類似m_</p>
</li>
<li><p>類別方法命名<br>類別：要用名詞來命名<br>方法：用動詞命名，而且accessors要用get開頭、mutators用set、predicates要用is</p>
</li>
<li><p>使用一致性的詞彙<br>例如取得方法不要同時有get, fetch, retrieve</p>
</li>
<li><p>將命名放在有意義的上下文<br>例如state要配合address看才會知道是州，如果沒辦法配合上下文那就手動加上前綴，例如addrState</p>
</li>
<li><p>不要添加過多無意義資訊<br>例如每個變數名稱都加上特定前綴，會讓IDE無法幫你找變數</p>
</li>
</ul>
<h1 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h1><ul>
<li>函式要非常簡短，盡量低於20行</li>
<li>函式內的縮排也不要大過一兩層</li>
<li>做一件的函式是無法被區分成不同段落的，如宣告區、初始區等等</li>
<li>降層準則：程式閱讀應該是由上而下敘事，希望每個函式後面都進接著下一層次的概念。</li>
<li>函式應該做一件事，他們應該把這件事做好，而且他們應該只做這件事。</li>
<li>函式參數最多不要超過三個，越少越好，如果需要超過三個，可以考慮使用物件代替</li>
<li>越多參數要測試會越困難，而且參數有傳達概念的能力，讀者必須去了解它</li>
<li>另外不要用輸出型參數，用回傳值</li>
<li>分離指令和查詢(set和get)</li>
<li>使用例外處理來取代回傳錯誤碼，讓使用者不需要一遇到錯誤碼就必須馬上處理錯誤</li>
<li>結構化程式：雖然Dijkstra提到在一個函式內只能有一個return，不要有break和continue，以及goto，但是作者認為在小函式時可以適當使用，但是不應該用goto，因為只有大函式goto才有用處</li>
</ul>
<h1 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h1><ul>
<li>適當使用註解是用來彌補我們用程式碼表達意圖的失敗</li>
<li>沒有提供比程式碼更多資訊或是反而誤導的註解就是壞註解，當然過多資訊也是</li>
<li>git已經提供修改紀錄，不該寫在註解中，包括程式碼的註解也應該拿掉</li>
</ul>
<h2 id="適合用註解的時機"><a href="#適合用註解的時機" class="headerlink" title="適合用註解的時機"></a>適合用註解的時機</h2><ul>
<li>法律型註解</li>
<li>資訊型的註解</li>
<li>對意圖的解釋</li>
<li>闡明</li>
<li>對後果的告誡</li>
<li>TODO</li>
<li>放大重要性</li>
<li>Javadoc</li>
</ul>
<h1 id="編排"><a href="#編排" class="headerlink" title="編排"></a>編排</h1><p>每個檔案應該大部分用200行，最多不超過500行</p>
<h2 id="垂直距離"><a href="#垂直距離" class="headerlink" title="垂直距離"></a>垂直距離</h2><ul>
<li>程式中，應該要用垂直空白區分思緒(兩個函式間)，而且如果兩個函式密且相關的話，不要放太多註解在兩者之間</li>
<li>變數宣告：變數的宣告應該盡可能靠近變數被使用的地方</li>
<li>實體變數(instance)：盡量集中在最上方或最下方，方便被查詢</li>
<li>相依的函式應該放在同一區塊，相依性越高，彼此的垂直距離就要越短</li>
</ul>
<h2 id="水平距離"><a href="#水平距離" class="headerlink" title="水平距離"></a>水平距離</h2><ul>
<li><p>通常程式設計師偏好短的程式碼，不一定要80，但不要超過120</p>
</li>
<li><p>水平空白也可以用來表示優先權，例如乘法之間不要有空白，加減法則要</p>
</li>
<li><p>水平的對齊也沒有必要，因為自動化編排程式會毀掉這樣的對齊，而且這樣會讓人忽略變數型態，只關注上下的對齊</p>
<blockquote>
<p>不過像define我就覺得有必要對齊，這樣方便觀看</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>    abc;</span><br><span class="line"><span class="type">float</span>  def;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要使用一行文，包括單行while加上分號，很容易搞錯</p>
<blockquote>
<p>這邊注意if如果是一行，也許加上大括號會比較好，常常會在下方加上其他敘述卻忘了加括號，這樣會有不同的行為</p>
</blockquote>
</li>
</ul>
<h1 id="物件及資料結構"><a href="#物件及資料結構" class="headerlink" title="物件及資料結構"></a>物件及資料結構</h1><p>不要幫每個private都加上get, set，應該要思考怎樣才能隱藏更多資訊<br>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FuelTankCapacityInGallons()&#123;</span><br><span class="line">  double getGallonsOfGasoline();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>會差於</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publice interface Vehicle&#123;</span><br><span class="line">  double getPercentFuelRemaining();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為使用者知道怎麼計算油量</p>
<h2 id="資料與物件有反對稱性"><a href="#資料與物件有反對稱性" class="headerlink" title="資料與物件有反對稱性"></a>資料與物件有反對稱性</h2><p>結構化的程式碼容易添加新函式，而不需變更原有的資料結構<br>物件導向的程式碼容易添加新類別，而不用變動已有函式</p>
<h1 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h1><ul>
<li>如前所說，作者建議用例外事件而非錯誤碼</li>
<li>不要使用java中的checked exception，因為如果底層函式被修改，會強制所有被呼叫的函式都要做錯誤檢查，會破壞函式封閉原則</li>
<li>不要回傳null，會讓使用者需要做額外判斷</li>
<li>傳遞null也會讓函式需要做額外判斷</li>
</ul>
<h1 id="邊界"><a href="#邊界" class="headerlink" title="邊界"></a>邊界</h1><p>當使用第三方軟體時，可以考慮製作一個介面來與第三方API銜接，這樣如果有大改動時，我們只需要修改介面即可</p>
<h1 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h1><p>TDD(Test-Driven Development)有三大準則</p>
<ol>
<li>在撰寫一個單元測試前，不可以撰寫任何產品程式</li>
<li>只撰寫剛好無法通過的單元測試，不能編譯也算無法通過</li>
<li>只撰寫剛好能通過當前測試失敗的產品程式<br>以上準則可以讓程式設計師被限制在30s的循環：測試程式和產品程式是一起被撰寫的。</li>
</ol>
<p>一個測試一個assert，但作者認為不需要嚴格遵守，盡可能少即可<br>一個測試一個概念</p>
<p>FIRST</p>
<ul>
<li>Fast：測試要夠快，能夠快速執行，讓人有意願去執行</li>
<li>Independent：測試程式不應該互相依賴，會讓人更難尋找錯誤</li>
<li>Repeatable：可以在任何環境下執行</li>
<li>Self-Validating：要輸出boolean告知程式成功或失敗，而非去看log主觀判斷</li>
<li>Timely：單元測試要再寫產品程式之前，這樣才能寫出可被測試的程式</li>
</ul>
<h1 id="類別"><a href="#類別" class="headerlink" title="類別"></a>類別</h1><ul>
<li>Single Responsibility Principle(SRP)：單一職責原則</li>
<li>一個類別或模組應該只有一個被修改的理由</li>
<li>保持類別的凝聚性(每個變數被多個method使用)：這樣會得到許多小class</li>
</ul>
<h1 id="系統"><a href="#系統" class="headerlink" title="系統"></a>系統</h1><p>軟體系統相較於實體系統來說是獨特的，如果我們持續保持適當的關注點分離，軟體系統的架構就能遞增地成長</p>
<h1 id="羽化"><a href="#羽化" class="headerlink" title="羽化"></a>羽化</h1><p>遵守四個原則：</p>
<ol>
<li>執行完所有測試：有測試就會消除整理程式碼會破壞程式的恐慌</li>
<li>沒有重複的部分</li>
<li>表達程式設計師的本意</li>
<li>最小化類別和方法的數量：這條守則的優先權是最低的</li>
</ol>
<h1 id="平行化"><a href="#平行化" class="headerlink" title="平行化"></a>平行化</h1><ul>
<li>物件是處理過程的抽象化，執行緒是排程的抽象化</li>
<li>平行化是去耦合的抽象化，讓「做什麼」和「什麼時候做」分開</li>
<li>另外也可以解決response time和throughput的限制</li>
</ul>
<h2 id="迷思"><a href="#迷思" class="headerlink" title="迷思"></a>迷思</h2><p>X 平行化總是能改善效能<br>X 撰寫平行化程式並不需要修改原有的設計<br>O 平行化會帶來額外負擔<br>O 正確的平行化是複雜的<br>O 平行化的錯誤通常不容易重複出現</p>
<h2 id="平行化防禦方法"><a href="#平行化防禦方法" class="headerlink" title="平行化防禦方法"></a>平行化防禦方法</h2><ul>
<li>單一職責原則(SRP)：保持平行化程式碼與其他程式有清楚劃分</li>
<li>限制資料視野：嚴格限制共享資料的存取次數</li>
<li>使用資料的副本：複製唯讀副本，減少共享資料次數</li>
<li>執行緒盡可能獨立運行</li>
<li>另外也要保持同步區塊的簡短，因為cost高</li>
<li>優雅的關閉平行化程式碼，注意能讓子thread可以關閉</li>
</ul>
<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><ul>
<li>不要因為系統後來通過測試就忽略失敗，因為未來會有越來越多錯誤建立在有缺陷的基礎上</li>
<li>先讓非執行緒的程式碼可以運作，不要兩者同時debug</li>
<li>讓執行緒是可以自我調校</li>
<li>執行比處理器還多的執行緒，bug會越容易找到</li>
<li>在不同平台執行</li>
<li>調整程式碼，使其產生失敗</li>
</ul>
<h1 id="Bad-Smell"><a href="#Bad-Smell" class="headerlink" title="Bad Smell"></a>Bad Smell</h1><h2 id="註解-1"><a href="#註解-1" class="headerlink" title="註解"></a>註解</h2><ul>
<li>無效、沒意義、不適當的註解</li>
<li>被註解掉的程式碼</li>
</ul>
<h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><ul>
<li>需要多個步驟建立專案或系統</li>
<li>需要多個步驟進行測試</li>
</ul>
<h2 id="函式-1"><a href="#函式-1" class="headerlink" title="函式"></a>函式</h2><ul>
<li>過多參數</li>
<li>輸出行參數</li>
<li>旗標參數</li>
<li>被遺棄的函式</li>
</ul>
<h2 id="一般狀況"><a href="#一般狀況" class="headerlink" title="一般狀況"></a>一般狀況</h2><ul>
<li>同份原始碼有多種語言</li>
<li>明顯該有的行為沒被實現(最小驚奇原則)</li>
<li>在邊界上的不正確行為：不要依賴直覺，為邊界條件寫測試程式</li>
<li>無視安全規範：不要關閉編譯器的警告</li>
<li>重複的程式碼：這是最重要的規範之一</li>
<li>在錯誤抽象層次上的程式碼：高層次概念都要在基底類別</li>
<li>基底類別相依於其衍生類別</li>
<li>過多資訊：應該要把暴露在介面上的資訊減少</li>
<li>被遺棄的程式碼</li>
<li>垂直分隔：如前所示</li>
<li>不一致性：維持命名一致性</li>
<li>雜亂程式：保持原始檔整潔</li>
<li>人為耦合：不要將變數隨意宣告，然後就留在某處</li>
<li>特色留戀：類別的方法應該只對同一類別裡的變數和函式感興趣，不應該操作其他類的變數或函式</li>
<li>選擇型參數：在函式尾端加上true, false</li>
<li>模糊的意圖：盡可能讓程式碼有表達力</li>
<li>錯置的職責：像是要把常數放在讀者認為他應該要在的地方</li>
<li>使用具解釋性的變數：將計算過程拆解成富有意義名稱的暫存變數</li>
<li>函數名稱要說到做到</li>
<li>了解演算法：不是調整函式做到想讓其做到的事，而是確定解決方法是正確，並且讓函式明顯透露出是怎麼運作的</li>
<li>用多型取代if-else和switch-case</li>
<li>遵循標準的慣例：用團隊的慣例</li>
<li>用有名稱的常數取代魔術數字</li>
<li>要精確：不要有模擬兩可的程式碼，精確表達該函式要做什麼</li>
<li>封裝條件判斷：<code>if(shouldBeDeleted(timer))</code>取代<code>if(timer.hasExpired() &amp;&amp; !timre.isRecurrent())</code></li>
<li>避免否定條件判斷</li>
<li>函式只該做一件事</li>
<li>不要隨意：如果程式碼保持一致性，這樣後來修改的人就會按造前面的原則改</li>
<li>封裝邊界條件：如果a+1常被用到，那就用b&#x3D;a+1取代，這點跟refactoring似乎不太一樣</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>選擇有描述性的名稱</li>
<li>在適當的抽象層次使用適當的名稱</li>
<li>越大的scope就要用較長的名稱</li>
</ul>
<h2 id="測試-1"><a href="#測試-1" class="headerlink" title="測試"></a>測試</h2><ul>
<li>不足夠的測試程式</li>
<li>不要跳過簡單的測試</li>
<li>對程式錯誤處進行詳細測試</li>
<li>測試要夠快速</li>
</ul>
]]></content>
      <categories>
        <category>軟體開發</category>
      </categories>
  </entry>
  <entry>
    <title>code review</title>
    <url>/2017/08/27/code-review/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實我一直對code review有點好奇，到底有什麼樣的好處。<br>所以統整了些資料，研究看看實行的好處以及如何實行code review。</p>
<p><strong>重要：這篇只是我想理解code review方式而整理出來的文章，不一定真的實用，之後會隨著我經驗增加而更新內容</strong></p>
<h1 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h1><ol>
<li>品質提升：開發者太熟悉流程了，可能會有盲點，其他人可能可以幫忙找到邏輯問題。</li>
<li>更容易維護：其他人幫忙看code可以確保程式的可讀性，不會只有開發者才看得懂，開發者開發時也因為會有人來看，所以會思考我這樣是否可以讓review的人看懂邏輯。</li>
<li>同步文化、設計理念：確保程式有符合團隊開發的風格、coding style、API使用習慣等等，也比較不會有開發了功能跟原來架構設計理念有落差的情況。</li>
<li>經驗傳承和相互學習：資深員工把經驗傳給新進員工，或是大家彼此間可以學到寫程式的小技巧。</li>
<li>備份功能：確保至少有兩個人知道code的意思。</li>
</ol>
<h1 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h1><ul>
<li>開發時需要多花費時間在上面code review上，但長遠來說會減少maintain時間</li>
<li>要有正確的心態來review，不然會造成團隊氣氛不佳</li>
</ul>
<h1 id="心態"><a href="#心態" class="headerlink" title="心態"></a>心態</h1><ul>
<li>code和人是分開的：我們是針對code做討論，而不是質疑人的能力。</li>
<li>相互信任：信任團隊沒人會故意寫爛code，有問題是可能只是沒想到而已。</li>
<li>相互尊重：<ul>
<li>討論過程中是相互學習的關係，而不是監視和監視的關係。</li>
<li>review者討論態度語氣不能太尖銳，被review者也要能接受合理的意見</li>
</ul>
</li>
<li>相互學習：做code review不只是要維護品質，更重要的是大家可以彼此學習，學會更好的技巧。</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul>
<li>說明code review規則，以及建立正確的心態</li>
<li>事先訂定公司開發的文化，如coding style，命名規則</li>
<li>使用工具在處理機械化作業，如coding style統一，減少人為介入</li>
</ul>
<h2 id="開發功能前"><a href="#開發功能前" class="headerlink" title="開發功能前"></a>開發功能前</h2><ul>
<li>開發時間需要預估code review的時間</li>
<li>先規劃如何將大功能切成小部分：<ul>
<li>控制在reviewer 15min內可以看完的程度，這樣reviewer可以在工作一段落時稍微看一下，不佔用太多時間</li>
<li>如果功能出了大問題，也可以把風險控制在最小</li>
</ul>
</li>
</ul>
<h2 id="review前"><a href="#review前" class="headerlink" title="review前"></a>review前</h2><ul>
<li>review前要先準備好環境，可以demo或讓reviewer測試</li>
<li>如果有使用分析工具，先使用工具產生報表<ul>
<li>review時可以針對上面的重點討論</li>
<li>減少review的effort</li>
</ul>
</li>
</ul>
<h2 id="review中"><a href="#review中" class="headerlink" title="review中"></a>review中</h2><ul>
<li>讓reviewer主導review的過程，這樣才能發現盲點</li>
<li>code review時間不要超過半小時</li>
<li>利用checklist來檢查<ul>
<li>功能需求是什麼？設計方式是否有達到目的？</li>
<li>是否可以做未來擴充？</li>
<li>是否足夠安全？有沒有邏輯漏洞？</li>
<li>Error handling和corner case是否都有處理好？</li>
<li>程式是否易讀？複雜地方是否有註解？可以再精簡嗎？</li>
<li>有符合團隊coding style嗎？命名好嗎？有沒有通過工具測試？</li>
<li>效能是否可以再提升？</li>
</ul>
</li>
<li>review過程不改code，用todo list先記錄</li>
</ul>
<h2 id="review後"><a href="#review後" class="headerlink" title="review後"></a>review後</h2><ul>
<li>要留下reviewer是誰，不是要抓戰犯，而是當開發者不在時，可以知道有誰懂這段code</li>
<li>review後要留下紀錄提供學習使用</li>
<li>定期開會評估code review流程和效用<ul>
<li>review的方式要不要調整？</li>
<li>工具是否要調整？</li>
<li>checklist是否要更新？</li>
</ul>
</li>
</ul>
<h1 id="輔助工具"><a href="#輔助工具" class="headerlink" title="輔助工具"></a>輔助工具</h1><p>下面工具只是先整理起來，我並沒有每個都用過，等真正用過再來寫心得吧！</p>
<ul>
<li>統一Glossary：<ul>
<li>可以使用wiki等文件建立</li>
</ul>
</li>
<li>找重複程式碼：<ul>
<li>Simian：商用需付費，可參考<a href="http://ithelp.ithome.com.tw/articles/10106013">CI Server 13 - 找出重複的程式碼 (Simian)</a></li>
</ul>
</li>
<li>判斷複雜度：<ul>
<li>SourceMonitor：免費，可參考<a href="https://dotblogs.com.tw/hatelove/archive/2010/02/10/sourcemonitor.aspx">[Tool]SourceMonitor - 程式碼掃瞄</a></li>
<li>Complexity：GNU tool，可參考<a href="http://hao.jobbole.com/complexity/">Complexity：一个测量 C 代码复杂性的工具</a></li>
</ul>
</li>
<li>分析綜合品質：<ul>
<li>FxCop：微軟出的，可參考<a href="https://dotblogs.com.tw/hatelove/2011/12/18/introducing-fxcop-and-vs2010-static-code-analysis-tool">[Tool]靜態程式碼分析－FxCop</a></li>
<li>Adlint：Open source，但似乎很久沒更新了</li>
<li>SonarQube：可參考<a href="https://poychang.github.io/sonarqube-csharp/">SonarQube 程式碼品質分析工具</a></li>
</ul>
</li>
<li>程式法風格：<ul>
<li>StyleCop：似乎只能用在C#，可參考<a href="http://ithelp.ithome.com.tw/articles/10079546">[如何提升系統品質-Day17]品質量測工具-StyleCop</a></li>
<li>Artistic Style：可以自動統一所有程式碼的風格，甚至可以綁在git的commit hook上，確保大家不會commit風格不對的code</li>
</ul>
</li>
</ul>
<h1 id="如何實際落實"><a href="#如何實際落實" class="headerlink" title="如何實際落實"></a>如何實際落實</h1><p>通常要在運作一段時間的團隊加入新機制並不是那麼的容易，特別是怕會影響正常業務。<br>所以可以試試沙盒的概念，先少部分的人開始測試使用，<br>而且也不要一下子就把所有機制加上去，以不一下子造成過多改變為主，慢慢調整<br>最後相信可以找到適合團隊的做法。</p>
<h2 id="可以調整的選項"><a href="#可以調整的選項" class="headerlink" title="可以調整的選項"></a>可以調整的選項</h2><p>code review的基本概念是要讓其他人來看開發者的code，以客觀角度檢視，藉此提高品質和增進彼此相互學習<br>所以只要能達到這個目標的手段其實都是可以接受的，重點是要找到適合團隊的方式<br>這邊有幾項可以思考的方向：</p>
<ul>
<li>review的方式：網路上找到大部分的方式都是git的Pull Request功能，可以線上直接看code，不過或許直接到對方位置看也是個選項。</li>
<li>review的頻率：這個可以隨團隊開發內容的性質作調整</li>
<li>review的大小：有些review是多人一起，這個比較適合有很多新進人員，需要一起建立開發文化。不然一般是用peer review即可。</li>
</ul>
<h1 id="如何評估效用"><a href="#如何評估效用" class="headerlink" title="如何評估效用"></a>如何評估效用</h1><p>當然code review一定是好處大於壞處才會讓大家採用，那要怎麼評估好處部分呢？<br>可以從下面幾個方向來想：</p>
<ol>
<li>執行前後，bug減少的數量(這是品質部分)</li>
<li>執行前後，團隊多花費的時間(這是成本部分)</li>
<li>大家在執行後的感想？是否有所學習？(畢竟學習這種東西很難用數據衡量)</li>
<li>在code review中發現哪些問題？(bug減少數量如果不好統計，可以看有哪些潛在問題被發掘)</li>
<li>code品質部分？這部分可以用工具評分或是問問開發者的感受。</li>
</ol>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://msdn.microsoft.com/zh-tw/communitydocs/visual-studio/ta14052601">Code Review Guidance</a>：這篇微軟的文章非常值得一看，該講的都有講出來。<br><a href="http://ithelp.ithome.com.tw/articles/10081797">[如何提升系統品質-Day30]Code Review與總結</a>：這邊有提到許多工具，可以研究看看<br><a href="https://blog.mz026.rocks/20170812/did-you-code-review-today">你今天 code review 了嗎？</a>：這篇也很推薦，對code review的本質和方法有不錯的論述<br><a href="https://www.zhihu.com/question/41089988">參考腾讯Bugly的回答</a>：這邊提到code review如何實現在不同種類團隊上，偏實務方面的文章<br><a href="https://buzzorange.com/techorange/2016/08/16/airbnb-code-review/">Airbnb 資深工程師分享：怎樣才是正確、有效的 code review</a>：提到了code review的正確態度<br><a href="https://read01.com/JmzyoG.html#.WaJAatOg_OQ">我們是怎麼做Code Review的</a>：別人實現code review的經驗</p>
]]></content>
      <categories>
        <category>軟體開發</category>
      </categories>
  </entry>
  <entry>
    <title>dd - 資料處理的好工具</title>
    <url>/2018/11/25/dd-%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E7%9A%84%E5%A5%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>dd全名叫做data duplicator，這個工具最主要的功能是對資料作複製、修改、備份，是一個很方便的小工具。通常Linux中預設都會有，不需要額外安裝。</p>
<h1 id="使用教學"><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul>
<li>輸入輸出參數<ul>
<li>if&#x3D;FILE：輸入名稱</li>
<li>of&#x3D;FILE：輸出名稱</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=[input_file] of=[output_file]</span><br></pre></td></tr></table></figure>

<h2 id="轉換"><a href="#轉換" class="headerlink" title="轉換"></a>轉換</h2><ul>
<li>做相對應的轉換<code>conv=CONVS</code><ul>
<li>lcase：大寫字母換小寫</li>
<li>ucase：小寫字母換大寫</li>
<li>nocreat：不要建立輸出檔案</li>
<li>notrunc：input小於output時，仍維持output大小</li>
<li>fdatasync：讓資料同步寫入硬碟</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 轉為小寫</span><br><span class="line">dd if=[input_file] of=[output_file] conv=lcase</span><br></pre></td></tr></table></figure>

<h2 id="區塊"><a href="#區塊" class="headerlink" title="區塊"></a>區塊</h2><ul>
<li>bs&#x3D;[bytes]：等同於同時設定ibs和obs，一次讀或寫的block size。<ul>
<li>ibs&#x3D;[bytes]：指定每次讀取的block size(default 512 bytes)</li>
<li>obs&#x3D;[bytes]：指定每次寫入的block size(default 512 bytes)</li>
</ul>
</li>
<li>count&#x3D;[number]：只處理前[number]輸入區塊，block size要參考ibs。</li>
<li>seek&#x3D;[number]：輸出檔案跳過前[number]個區塊，block size要參考obs。</li>
<li>skip&#x3D;[number]：輸入檔案跳過前[number]個區塊，block size要參考ibs。</li>
</ul>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul>
<li>大小寫轉換<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 換大寫</span><br><span class="line">dd if=[input] of=[output] conv=ucase</span><br><span class="line"># 換小寫</span><br><span class="line">dd if=[input] of=[output] conv=lcase</span><br></pre></td></tr></table></figure></li>
<li>產生一個特定大小的檔案<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 內容為空的1KB檔案</span><br><span class="line">dd if=/dev/zero of=[output] bs=1024 count=1</span><br><span class="line"># 內容為亂數的1MB檔案</span><br><span class="line">dd if=/dev/urandom of=[output] bs=1m count=1</span><br></pre></td></tr></table></figure></li>
<li>把特定檔案的開頭512 byte清空<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=[output] bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure></li>
<li>備份硬碟<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=[來源] of=[目標]</span><br><span class="line"># 例如從/dev/sda備份到/dev/sdb</span><br><span class="line">dd if=/dev/sda of=/dev/sdb</span><br></pre></td></tr></table></figure></li>
<li>備份光碟，可參考<a href="https://www.thomas-krenn.com/en/wiki/Create_an_ISO_Image_from_a_source_CD_or_DVD_under_Linux">Create an ISO Image from a source CD or DVD under Linux</a><ol>
<li>先觀察&#x2F;dev&#x2F;cdrom<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isoinfo -d -i /dev/cdrom | grep -i -E &#x27;block size|volume size&#x27;</span><br></pre></td></tr></table></figure></li>
<li>然後應該會出現類似如下內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Logical block size is: 2048</span><br><span class="line">Volume size is: 327867</span><br></pre></td></tr></table></figure></li>
<li>接著參考上面的數字使用dd指令(bs大部分都是2048，而count其實有加沒加都沒差)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/cdrom of=test.iso bs=&lt;block size from above&gt; count=&lt;volume size from above&gt;</span><br><span class="line"># 以上述例子</span><br><span class="line">dd if=/dev/cdrom of=outputCD.iso bs=2048 count=327867</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>拆分&amp;合併檔案，可參考<a href="https://www.linuxquestions.org/linux/answers/applications_gui_multimedia/splitting_and_merging_files_using_dd">Splitting and Merging files using dd</a><ul>
<li>拆分檔案，例如把檔案切成好幾個1G<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=[大檔案] of=[part1] bs=1m count=1024</span><br><span class="line">dd if=[大檔案] of=[part2] bs=1m count=1024</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
<li>合併檔案，例如好幾個1G合併起來<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=[part1] of=大檔案 bs=1m count=1024</span><br><span class="line">dd if=[part2] of=大檔案 bs=1m count=1024 seek=1024</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://blog.gtwang.org/linux/dd-command-examples/">dd 指令教學與實用範例，備份與回復資料的小工具</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>dependency</title>
    <url>/2017/08/26/dependency/</url>
    <content><![CDATA[<h1 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h1><p>通常我們都會用Makefile來看相依性，如果有改動make會自動幫我們判別<br>但是有些情況，make可能無法判斷<br>以下面為例，我們有四個檔案：main.c, test.c, test.h, private.h</p>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;private.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test=%d\n&quot;</span>, PRIV_VALUE);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TEST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEST_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>private.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PRIVATE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PRIVATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRIV_VALUE 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>然後假設我們的Makefile是這樣寫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">OBJ=$(patsubst %.c,%.o,$(wildcard *.c))</span><br><span class="line">BIN=main.out</span><br><span class="line"></span><br><span class="line">%.o: %.c</span><br><span class="line">    $(CC) -c $^</span><br><span class="line"></span><br><span class="line">all: $(OBJ)</span><br><span class="line">    $(CC) $^ -o $(BIN)</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">    rm *.o $(BIN)</span><br></pre></td></tr></table></figure>
<p>我們試著修改private.h的MACRO值，就會發現重新make結果還是不變，需要重新make clean</p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>可以使用gcc的特殊option</p>
<ul>
<li>gcc -M xxx.c: 找出所有相依檔</li>
<li>gcc -MM xxx.c: 同-M，但不含系統檔<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.o: main.c test.h</span><br></pre></td></tr></table></figure></li>
<li>gcc -MP -MM xxx.c: 會加上其他header，避免某些compiler error<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.o: test.c test.h</span><br><span class="line">          </span><br><span class="line">test.h:</span><br></pre></td></tr></table></figure></li>
<li>-MF file: 輸出的dependency檔案名</li>
<li>-MD: 同-M -MF</li>
<li>-MMD: 同-MM -MF</li>
<li>-MT: 可以更改dependency檔案內的目標，可參考<a href="http://blog.sina.com.cn/s/blog_717794b70101gjca.html">关于 gcc MT MF[转] </a></li>
</ul>
<p>因此只要把Makefile改成這樣即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">OBJ=$(patsubst %.c,%.o,$(wildcard *.c))</span><br><span class="line">BIN=main.out</span><br><span class="line"></span><br><span class="line">all: $(OBJ)</span><br><span class="line">    $(CC) $^ -o $(BIN)</span><br><span class="line"></span><br><span class="line">-include $(OBJ:.o=.d)</span><br><span class="line"></span><br><span class="line">%.o: %.c</span><br><span class="line">    $(CC) -c $&lt;</span><br><span class="line">    $(CC) -MM $&lt; &gt; $*.d</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">    rm *.o $(BIN) *.d</span><br></pre></td></tr></table></figure>

<p><code>-</code>代表如果有錯誤不要停止執行，<code>$(OBJ:.o=.d)</code>代表把.o換成.d，因此會變成類似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.o: test.c private.h test.h</span><br><span class="line">main.o: main.c test.h</span><br></pre></td></tr></table></figure>

<p>由於該rule底下沒有statement，所以會直接對應<code>%.o: %.c</code></p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/">Auto-Dependency Generation</a></li>
<li><a href="http://www.ncpress.com.cn/zhuanti/0613_1360GCC/d-015.htm">GCC 技术参考大全 附录D 命令行选项</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 簡易教學</title>
    <url>/2018/05/12/docker-%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><ul>
<li>安裝<br>以前安裝時需要安裝docker和boot2docker，但現在只要到官網下載DOCKER COMMUNITY EDITION (CE)就可以了。</li>
</ul>
<blockquote>
<p>boot2docker是MAC下輕量的Linux VM，專門用來執行docker daemon</p>
</blockquote>
<p>然後以前使用都會用<a href="https://kitematic.com/">kitematic</a>這個GUI的操作介面，現在docker官方也已經整進去了，我們可以直接透過docker的應用程式下載kitematic(在上方工具列的選項裡)</p>
<p>安裝詳細流程可以參考<a href="http://blog.itist.tw/2017/06/how-to-install-docker-ce-with-mac-os-and-os-x.html">如何在 macOS 上安裝 Docker CE</a>，寫得非常清楚。</p>
<h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>Ubuntu的安裝方式也跟以前不一樣了，可參考官網的作法，<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-repository">Get Docker CE for Ubuntu</a></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows的安裝教學連結<a href="https://docs.docker.com/docker-for-windows/install/#about-windows-containers">在此</a>，值得注意的是只有Windows10才有支援Hyper-V，如果是其他版本就必須要安裝使用Virtualbox的Docker Toolbox來取代了。</p>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>可以用一張圖職階概括大部分常用docker的指令，圖片來自<a href="https://philipzheng.gitbooks.io/docker_practice/content/appendix_command/">Docker —— 從入門到實踐  附錄一：命令查詢</a></p>
<p><img src="https://philipzheng.gitbooks.io/docker_practice/content/_images/cmd_logic.png"></p>
<h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><ul>
<li>尋找images<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker search XXX</span><br></pre></td></tr></table></figure></li>
<li>把images抓下來<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull XXX</span><br></pre></td></tr></table></figure></li>
<li>看目前有哪些images<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li>
<li>刪除某images<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi XXX</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><ul>
<li>看目前有哪些container正在跑<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li>
<li>看包括所有停止的container<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li>
<li>讓某個container開始&#x2F;停止<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start/stop XXX</span><br></pre></td></tr></table></figure></li>
<li>刪除某container<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> XXX</span><br></pre></td></tr></table></figure></li>
<li>看某個container資訊<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect XXX</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>執行部分其實可以加上很多參數：</p>
<ul>
<li><p><code>-d</code>: 代表以daemon執行(背景執行)</p>
</li>
<li><p><code>-p port:port</code>: 代表port映射，例如<code>-p 8080:80</code>就是把 port 8080 對應到image的 port 80</p>
</li>
<li><p><code>-v dir:dir</code>: 代表映射目錄，例如<code>-v /home/share:/var/www:rw</code>就是把&#x2F;home&#x2F;share對應到image的&#x2F;var&#x2F;www，且權限為rw。路徑需要為絕對路徑。</p>
</li>
<li><p><code>--rm</code>：當有container存在時自動移除</p>
</li>
<li><p><code>-i</code>：互動模式</p>
</li>
<li><p><code>-t</code>：允許TTY</p>
</li>
<li><p><code>-w path</code>：設定進入container的工作路徑</p>
</li>
<li><p><code>-e key=value</code>：帶入環境變數</p>
</li>
<li><p>跑images</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -i -t -p 8080:80 nginx</span><br><span class="line">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure></li>
<li><p>背景執行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 -v shared_dir:/var/www:rw nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="COMMIT"><a href="#COMMIT" class="headerlink" title="COMMIT"></a>COMMIT</h2><ul>
<li>看有甚麼改變<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker diff XXX</span><br></pre></td></tr></table></figure></li>
<li>提交成新的images<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker commit -m=<span class="string">&quot;註解&quot;</span> -a=<span class="string">&quot;author&quot;</span> XXX repo_name</span><br></pre></td></tr></table></figure></li>
<li>看歷史<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> XXX</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>我們也可以用Dockerfile產生image，可參考<a href="https://peihsinsu.gitbooks.io/docker-note-book/content/docker-build.html">使用Dockerfile建置</a></p>
<p>下面是個範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># base image</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line"></span><br><span class="line"># 執行的command</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line"></span><br><span class="line"># 要開的port，注意在run的時候還是要加上-p才能真正讓外部連接該port</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># 環境變數</span><br><span class="line">ENV PATH $PATH:/home/bin</span><br></pre></td></tr></table></figure>

<p>建立image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t repo_name:tag_name .</span><br></pre></td></tr></table></figure>

<h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><p>看完command可能還是不清楚怎麼用，這邊用安裝nginx的docker image來說明</p>
<h2 id="取得image"><a href="#取得image" class="headerlink" title="取得image"></a>取得image</h2><p>首先我們先搜尋nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker search nginx</span><br><span class="line">NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                                                  Official build of Nginx.                        8564                [OK]</span><br><span class="line">jwilder/nginx-proxy                                    Automated Nginx reverse proxy for docker con…   1331                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm                                Container running Nginx + PHP-FPM capable of…   547</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>我們先抓officical的images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">f2aa67a397c4: Pull complete</span><br><span class="line">3c091c23e29d: Pull complete</span><br><span class="line">4a99993b8636: Pull complete</span><br><span class="line">Digest: sha256:0fb320e2a1b1620b4905facb3447e3d84ad36da0b2c8aa8fe3a5a81d1187b884</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br></pre></td></tr></table></figure>
<p>現在local端就有nginx的image了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              ae513a47849c        11 days ago         109MB</span><br></pre></td></tr></table></figure>

<h2 id="運行container"><a href="#運行container" class="headerlink" title="運行container"></a>運行container</h2><p>開始運行container，並且讓port 8080對應到nginx container的port 80，工作路徑為&#x2F;home，然後執行bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -i -t -p 8080:80 -w /home nginx bash</span><br></pre></td></tr></table></figure>
<p>我們也可以選擇背景執行，並且把shared_dir對應到&#x2F;var&#x2F;www</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8080:80 -v shared_dir:/var/www:rw nginx</span><br></pre></td></tr></table></figure>
<p>一定有人會問這樣的情況下怎麼控制bash呢？我們可以用exec command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker exec -i -t 78fc bash</span><br></pre></td></tr></table></figure>

<h2 id="操作運行中的container"><a href="#操作運行中的container" class="headerlink" title="操作運行中的container"></a>操作運行中的container</h2><p>看一下當前有的container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">e2cf9ea13bb4        nginx               &quot;nginx -g &#x27;daemon of…&quot;   2 minutes ago       Up 2 minutes        0.0.0.0:8080-&gt;80/tcp   priceless_murdock</span><br><span class="line">$ docker inspect e2cf9ea13bb4</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;e2cf9ea13bb477e49f1c0ff75a683555d1a75ef953529087375c83ee1a88b65f&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-05-12T06:17:14.979076095Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;nginx&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>我們可以隨時中斷或啟動該container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker stop e2cf9ea13bb4</span><br><span class="line">$ docker start e2cf9ea13bb4</span><br></pre></td></tr></table></figure>

<h2 id="提交改變成為新的image"><a href="#提交改變成為新的image" class="headerlink" title="提交改變成為新的image"></a>提交改變成為新的image</h2><p>看看該container有什麼改變</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker diff e2cf9ea13bb4</span><br><span class="line">C /run</span><br><span class="line">A /run/nginx.pid</span><br><span class="line">C /var</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br><span class="line">A /var/www</span><br></pre></td></tr></table></figure>
<p>commit我們所做的改變變成新的image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker commit -m &quot;New nginx&quot; -a &quot;evshary&quot; e2cf new_nginx</span><br><span class="line">sha256:ed66214b3e3a510a7cc47e341f64f6596560164d6f06a22f93dca8d05ecac081</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">new_nginx           latest              ed66214b3e3a        17 seconds ago      109MB</span><br><span class="line">nginx               latest              ae513a47849c        11 days ago         109MB</span><br></pre></td></tr></table></figure>
<p>可以從history看我們所做改變歷史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker history new_nginx</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT</span><br><span class="line">ed66214b3e3a        About a minute ago   nginx -g daemon off;                            2B                  New nginx</span><br><span class="line">ae513a47849c        11 days ago          /bin/sh -c #(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B</span><br><span class="line">&lt;missing&gt;           11 days ago          /bin/sh -c #(nop)  STOPSIGNAL [SIGTERM]         0B</span><br></pre></td></tr></table></figure>

<h2 id="刪除container-x2F-images"><a href="#刪除container-x2F-images" class="headerlink" title="刪除container&#x2F;images"></a>刪除container&#x2F;images</h2><p>玩膩了，可以刪除images，記得要先刪掉container才行刪images喔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rm e2cf9ea13bb4</span><br><span class="line">$ docker rmi new_nginx</span><br><span class="line">Untagged: new_nginx:latest</span><br><span class="line">Deleted: sha256:ed66214b3e3a510a7cc47e341f64f6596560164d6f06a22f93dca8d05ecac081</span><br><span class="line">$ docker rmi nginx</span><br><span class="line">Deleted: sha256:ae513a47849c895a155ddfb868d6ba247f60240ec8495482eca74c4a2c13a881</span><br><span class="line">Deleted: sha256:160a8bd939a9421818f499ba4fbfaca3dd5c86ad7a6b97b6889149fd39bd91dd</span><br><span class="line">Deleted: sha256:f246685cc80c2faa655ba1ec9f0a35d44e52b6f83863dc16f46c5bca149bfefc</span><br><span class="line">Deleted: sha256:d626a8ad97a1f9c1f2c4db3814751ada64f60aed927764a3f994fcd88363b659</span><br></pre></td></tr></table></figure>

<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://philipzheng.gitbooks.io/docker_practice/content/">Docker —— 從入門到實踐</a></li>
<li><a href="https://peihsinsu.gitbooks.io/docker-note-book/content/">Docker學習筆記</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>ffmpeg影音處理工具</title>
    <url>/2018/12/01/ffmpeg%E5%BD%B1%E9%9F%B3%E8%99%95%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>有時候需要對影片、音樂做各種處理，例如轉檔、切割等等，這時候可以使用很強大的影音處理神器ffmpeg來做這些操作。</p>
<p>這邊不會細談調整編碼等細節，只是記錄日常常用到的操作指令而已。</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="轉檔"><a href="#轉檔" class="headerlink" title="轉檔"></a>轉檔</h2><p>-f代表format</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -f [目標格式] [輸出檔名]</span><br></pre></td></tr></table></figure>
<p>有哪些格式可選可用如下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -formats</span><br></pre></td></tr></table></figure>
<h2 id="裁減影片"><a href="#裁減影片" class="headerlink" title="裁減影片"></a>裁減影片</h2><p>-ss代表從何時開始，-t代表維持時間，-to代表停止的時間</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 從5秒開始後的30秒</span><br><span class="line">ffmpeg -i [要轉的檔案] -ss 00:00:05 -t 00:00:30 [輸出檔名]</span><br><span class="line"># 從5秒到25秒</span><br><span class="line">ffmpeg -i [要轉的檔案] -ss 00:00:05 -to 00:00:25 [輸出檔名]</span><br></pre></td></tr></table></figure>
<h2 id="顛倒影像"><a href="#顛倒影像" class="headerlink" title="顛倒影像"></a>顛倒影像</h2><p>-vf代表vedio filter，可以讓影片經過處理，轉換影片角度有下面三種常用</p>
<ul>
<li>hflip：水平翻轉</li>
<li>vflip：垂直翻轉</li>
<li>transpose&#x3D;1：順時針轉90度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 水平翻轉</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf hflip [輸出檔名]</span><br><span class="line"># 垂直翻轉</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf vflip [輸出檔名]</span><br><span class="line"># 順時針轉90度</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf transpose=1 [輸出檔名]</span><br><span class="line"># 逆時針轉90度</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf transpose=2 [輸出檔名]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="影片截圖"><a href="#影片截圖" class="headerlink" title="影片截圖"></a>影片截圖</h2><p>-an代表不需要聲音，-vframes代表要抓幾張圖，-r代表每秒抓幾張圖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -an -ss [抓取時間] -vframes [幾張圖] -r [幾張圖] [輸出圖檔]</span><br><span class="line"># 在開始的時間抓一張圖</span><br><span class="line">ffmpeg -i [要轉的檔案] -an -ss 00:00:00 -vframes 1 cover.jpg</span><br><span class="line"># 從頭開始，每10秒抓一張圖</span><br><span class="line">ffmpeg -i [要轉的檔案] -an -ss 00:00:00 -vframes 1 -r 0.1 tmp-%d.jpg</span><br></pre></td></tr></table></figure>

<h2 id="調整音量大小"><a href="#調整音量大小" class="headerlink" title="調整音量大小"></a>調整音量大小</h2><p>-vol代表聲音大小，256是正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -n [聲音大小] [輸出檔名]</span><br></pre></td></tr></table></figure>

<h2 id="播放影音"><a href="#播放影音" class="headerlink" title="播放影音"></a>播放影音</h2><p>在ffmpeg內有一個tool是ffplay，可以簡單用來播放影音</p>
<p>雖然沒有進度條，但是如果按著右鍵左右移動也會有進度條的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay [影片名稱]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果只想要播放音樂<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay -vn [影片名稱]</span><br></pre></td></tr></table></figure></li>
<li>如果只想要播放影片<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay -an [影片名稱]</span><br></pre></td></tr></table></figure></li>
<li>重複循環，0代表無限次<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay -loop [次數] [影片名稱]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li>影片轉音樂<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -f mp3 [輸出檔名]</span><br></pre></td></tr></table></figure></li>
<li>轉換成mp4<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -f mp4 [輸出檔名]</span><br></pre></td></tr></table></figure></li>
<li>裁減影片<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -ss [開始時間] -to [結束時間] [輸出檔名]</span><br></pre></td></tr></table></figure></li>
<li>抓截圖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i [要轉的檔案] -an -ss 00:00:00 -vframes 1 cover.jpg</span><br></pre></td></tr></table></figure></li>
<li>聲音調整<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 調大聲音</span><br><span class="line">ffmpeg -i [要轉的檔案] -vol 300 [輸出檔名]</span><br><span class="line"># 調小聲音</span><br><span class="line">ffmpeg -i [要轉的檔案] -vol 200 [輸出檔名]</span><br></pre></td></tr></table></figure></li>
<li>手機拍攝如果是反的情況<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 順時針</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf transpose=1 [輸出檔名]</span><br><span class="line"># 逆時針</span><br><span class="line">ffmpeg -i [要轉的檔案] -vf transpose=2 [輸出檔名]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://medium.com/@NorthBei/ffmepg-%E9%96%8B%E6%BA%90%E4%B8%94%E5%8A%9F%E8%83%BD%E5%BC%B7%E5%A4%A7%E7%9A%84%E5%BD%B1%E9%9F%B3%E8%99%95%E7%90%86%E6%A1%86%E6%9E%B6-568f19388103">FFmepg — 開源且功能強大的影音處理框架</a> - 針對ffmepg的架構進行介紹</li>
<li><a href="https://www.mobile01.com/topicdetail.php?f=510&t=4487488">FFmpeg 常用選項功能說明</a></li>
<li><a href="https://hk.saowen.com/a/ef089cf4a8cf6dab94c276a8ee0fb38c13e25d9549c8d3cc89f0c4a9e7bf0b9b">ffplay常用命令</a></li>
<li><a href="http://wilsbur.pixnet.net/blog/post/146836324-ffmpeg%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%B4%B9">ffmpeg常用指令介紹</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>gcc常用擴充功能</title>
    <url>/2018/06/09/gcc%E5%B8%B8%E7%94%A8%E6%93%B4%E5%85%85%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>GNU gcc其實在編譯時也可以帶許多特殊功能，讓程式更佳的彈性，並帶來優化或更好debug的效益。這邊我們主要介紹兩個功能，內建函式和屬性<code>__attribute__</code>。</p>
<h1 id="內建函式"><a href="#內建函式" class="headerlink" title="內建函式"></a>內建函式</h1><p>要特別注意的是，這些內建函數是跟CPU架構息息相關，所以並不是每個平台都可以順利使用。另外就是編譯的時候不能帶上<code> -fno-builtin</code>選項，通常<code>-fno-builtin</code>是為了幫助我們確保程式的結果是如同我們所想像的樣子呈現，而不會被一些最佳化改變樣子，方便設定breakpoint和debug。</p>
<h2 id="找呼叫者"><a href="#找呼叫者" class="headerlink" title="找呼叫者"></a>找呼叫者</h2><p>首先我們先來談談找呼叫者這件事，我想大家應該都有經驗曾經發現程式死在某一行，但是卻不知道是誰呼叫的，這時候只能痛苦地去從stack反推return address。但是其實gcc內是有特殊內建函式可以幫助我們的，這邊介紹下面兩個好用函式。</p>
<ul>
<li><code>void *builtin_return_address(unsigned int LEVEL)</code>：找到函式的return address是什麼，參數的LEVEL代表要往上找幾層，填0的話代表呼叫當前函式者的下一個執行指令。</li>
<li><code>void *builtin_frame_address(unsigned int LEVEL)</code>：找到函式的frame pointer，參數的LEVEL代表要往上找幾層，填0的話代表呼叫當前函式者的frame pointer。</li>
</ul>
<p>要注意的是LEVEL不能填變數，也就是編譯時必須確定該數字。</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>我們還是透過一個簡單的例子來說明一下</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test3</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ret_addr, *frame_addr;</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">1</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">2</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">3</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test3\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ret_addr, *frame_addr;</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">1</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">2</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test2\n&quot;</span>);</span><br><span class="line">    test3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ret_addr, *frame_addr;</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">1</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test1\n&quot;</span>);</span><br><span class="line">    test2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ret_addr, *frame_addr;</span><br><span class="line">    ret_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line">    frame_addr = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret_addr=0x%x frame_addr=0x%x\n&quot;</span>, ret_addr, frame_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test\n&quot;</span>);</span><br><span class="line">    test1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好，那我們來編譯並執行看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make test</span><br><span class="line">$ ./test</span><br><span class="line">0: ret_addr=0x4007c8 frame_addr=0x2bba8ba0</span><br><span class="line">test</span><br><span class="line">0: ret_addr=0x4007bc frame_addr=0x2bba8b80</span><br><span class="line">1: ret_addr=0x4007c8 frame_addr=0x2bba8ba0</span><br><span class="line">test1</span><br><span class="line">0: ret_addr=0x40076d frame_addr=0x2bba8b60</span><br><span class="line">1: ret_addr=0x4007bc frame_addr=0x2bba8b80</span><br><span class="line">2: ret_addr=0x4007c8 frame_addr=0x2bba8ba0</span><br><span class="line">test2</span><br><span class="line">0: ret_addr=0x4006e1 frame_addr=0x2bba8b40</span><br><span class="line">1: ret_addr=0x40076d frame_addr=0x2bba8b60</span><br><span class="line">2: ret_addr=0x4007bc frame_addr=0x2bba8b80</span><br><span class="line">3: ret_addr=0x4007c8 frame_addr=0x2bba8ba0</span><br><span class="line">test3</span><br></pre></td></tr></table></figure>
<p>可以看到每層function所對應的return address和frame address都被列出來，但是要怎麼驗證是否真的是這樣呢？我們把程式逆向一下看位置。這邊我們鎖定test1()的return address，也就是0x4007bc，應該是test()函式的呼叫test1()的下一行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ objdump -d test</span><br><span class="line">...</span><br><span class="line">0000000000400770 &lt;test&gt;:</span><br><span class="line">  400770:       55                      push   %rbp</span><br><span class="line">  400771:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">...</span><br><span class="line">  4007b2:       e8 59 fc ff ff          callq  400410 &lt;puts@plt&gt;</span><br><span class="line">  4007b7:       e8 28 ff ff ff          callq  4006e4 &lt;test1&gt;</span><br><span class="line">  4007bc:       90                      nop</span><br><span class="line">  4007bd:       c9                      leaveq</span><br><span class="line">  4007be:       c3                      retq</span><br><span class="line"></span><br><span class="line">00000000004007bf &lt;main&gt;:</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>的確，下一行nop的位置就是就是4007bc，符合我們的想法。</p>
<h2 id="其他有用的builtin函式"><a href="#其他有用的builtin函式" class="headerlink" title="其他有用的builtin函式"></a>其他有用的builtin函式</h2><p>除了上面的例子，其實還有其他有用的builtin函式，這邊就只是列出來提供參考：</p>
<ul>
<li><code>int __builtin_types_compatible_p(TYPE1, TYPE2)</code>：檢查TYPE1和TYPE2是否是相同type，相同回傳1，否則為0。注意這邊const和非const會視為同種類型。</li>
<li><code>TYPE __builtin_choose_expr(CONST_EXP, EXP1, EXP2)</code>：同<code>CONST_EXP?EXP1:EXP2</code>的概念，但是這個寫法會在編譯時就決定結果。常用方式是在寫macro時可以搭配<code>__builtin_types_compatible_p</code>當作CONST_EXP，選擇要呼叫什麼函式。</li>
<li><code>int __builtin_constant_p(EXP)</code>：判斷EXP是否是常數。</li>
<li><code>long __builtin_expect(long EXP, long C)</code>：預先知道EXP的值很大機率會是C，藉此做最佳化，kernel的likely和unlikely也是靠這個實現的。</li>
<li><code>void __builtin_prefetch(const void *ADDR, int RW, int LOCALITY)</code>：把ADDR預先載入快取使用。<ul>
<li>RW：1代表會寫入資料，0代表只會讀取</li>
<li>LOCALITY：範圍是0~3，0代表用了馬上就不用(不用關心time locality)、3代表之後還會常用到</li>
</ul>
</li>
<li><code>int __builtin_ffs (int X)</code>：回傳X中從最小位數開始計算第一個1的位置，例如<code>__builtin_ffs(0xc)=3</code>，當X是0時，回傳0。</li>
<li><code>int __builtin_popcount (unsigned int X)</code>：在X中1的個數</li>
<li><code>int __builtin_ctz (unsigned int X)</code>：X末尾的0個數，X&#x3D;0時undefined。</li>
<li><code>int __builtin_clz (unsigned int X)</code>：X前面的0個數，X&#x3D;0時undefined。</li>
<li><code>int __builtin_parity (unsigned int x)</code>：Ｘ值的parity。</li>
</ul>
<h1 id="attribute"><a href="#attribute" class="headerlink" title="__attribute__"></a><code>__attribute__</code></h1><h2 id="weak-amp-alias"><a href="#weak-amp-alias" class="headerlink" title="weak &amp; alias"></a>weak &amp; alias</h2><h3 id="測試是否支援某function"><a href="#測試是否支援某function" class="headerlink" title="測試是否支援某function"></a>測試是否支援某function</h3><p>通常會使用<code>__attribute__(weak)</code>是為了避免有函式衝突的狀況，我們看個例子<br>a.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">printf_test</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((weak))</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is main function\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(printf_test)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Here is printf_test result: \n&quot;</span>);</span><br><span class="line">        printf_test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;We don&#x27;t support printf_test\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make a</span><br><span class="line">$ ./a</span><br><span class="line">This is main function</span><br><span class="line">We don&#x27;t support printf_test</span><br></pre></td></tr></table></figure>
<p>雖然我們沒有printf_test，但是直接編譯是會通過的，因為printf_test被視為weak，假設在連結時找不到，是會被填0的。</p>
<p>那如果有printf_test的情況呢？我們加上b.c重新編譯看看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is b function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc a.c b.c</span><br><span class="line">$ ./a.out</span><br><span class="line">This is main function</span><br><span class="line">Here is printf_test result:</span><br><span class="line">This is b function.</span><br></pre></td></tr></table></figure>
<p>看起來就會執行printf_test了。這樣的功能對我們要動態看有無支援函式幫助很大。</p>
<h3 id="為函式加上default值"><a href="#為函式加上default值" class="headerlink" title="為函式加上default值"></a>為函式加上default值</h3><p>這邊我們會用到alias的attribute，alias的話通常會跟weak一起使用，最常被用到的是幫不確定有無支援的函式加上default值。</p>
<p>a.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_default</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Not support this function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_foo</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((weak, alias(<span class="string">&quot;print_default&quot;</span>)))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_bar</span><span class="params">(<span class="type">void</span>)</span> __<span class="title function_">attribute__</span><span class="params">((weak, alias(<span class="string">&quot;print_default&quot;</span>)))</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is main function\n&quot;</span>);</span><br><span class="line">    print_foo();</span><br><span class="line">    print_bar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_foo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;foo function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc a.c b.c</span><br><span class="line">$ ./a.out</span><br><span class="line">This is main function</span><br><span class="line">foo function.</span><br><span class="line">Not support this function.</span><br></pre></td></tr></table></figure>
<p>可以看到因為print_bar並沒有被宣告，所以最後會執行alias的print_default。</p>
<h2 id="在main前後執行程式"><a href="#在main前後執行程式" class="headerlink" title="在main前後執行程式"></a>在main前後執行程式</h2><p>有時候會想要在main的執行前後可以做些事，這時候就會用到下面兩個attribute</p>
<ul>
<li>constructor：main前做事</li>
<li>destructor：main之後做事</li>
</ul>
<p>讓我們看個範例</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="type">void</span> <span class="title function_">before</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;before main\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((destructor))</span><br><span class="line"><span class="type">void</span> <span class="title function_">after</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;after main\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is main function\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make test</span><br><span class="line">$ ./test</span><br><span class="line">before main</span><br><span class="line">This is main function</span><br><span class="line">after main</span><br></pre></td></tr></table></figure>
<p>結果的確如我們所料。另外這邊有點要注意，跟前面不一樣的是，<code>__attribute__((constructor))</code>和<code>__attribute__((destructor))</code>必須放在函式前面，不然會有<code>error: attributes should be specified before the declarator in a function definition</code>的錯誤。</p>
<h2 id="其他attribute"><a href="#其他attribute" class="headerlink" title="其他attribute"></a>其他attribute</h2><p>剩下還有一些有機會會用到的attribute，這邊就不多談，只列出來參考。</p>
<ul>
<li><code>__attribute__((section(&quot;section_name&quot;)))</code>：代表要把這個symbol放到<code>section_name</code>中</li>
<li><code>__attribute__((used))</code>：不管有沒有被引用，這個symbol都不會被優化掉</li>
<li><code>__attribute__((unused))</code>：沒有被引用到的時候也不會跳出警告</li>
<li><code>__attribute__((deprecated))</code>：用到的時候會跳出警告，用來警示使用者這個函式將要廢棄</li>
<li><code>__attribute__((stdcall))</code>：從右到左把參數放入stack，由callee(被呼叫者)把stack恢復正常</li>
<li><code>__attribute__((cdecl))</code>：C語言預設的作法，從右到左把參數放入stack，由caller把stack恢復正常</li>
<li><code>__attribute__((fastcall))</code>：頭兩個參數是用register來存放，剩下一樣放入stack</li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></li>
<li><a href="https://blog.csdn.net/jasonchen_gbd/article/details/44948523">gcc的__builtin_函数介绍</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html">6.57 Other Built-in Functions Provided by GCC</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_a9303fd90101d5su.html"><code>__attribute__</code>之weak,alias属性</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>gnuplot：報告必備的繪圖工具</title>
    <url>/2018/12/02/gnuplot%EF%BC%9A%E5%A0%B1%E5%91%8A%E5%BF%85%E5%82%99%E7%9A%84%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>當我們要製作報告或論文的圖表時，除了excel以外，其實也可以使用gnuplot這套工具。<a href="http://www.gnuplot.info/">gnuplot</a>非常的強大，除了可以畫各種圖表以外，還可以跨不同平台使用。</p>
<p>我們這邊簡單紀錄一些常用圖表怎麼繪畫。</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>如果我們要正常顯示圖表的話需要有x11，這部分可以安裝APPLE的<a href="https://www.xquartz.org/">XQuartz</a>即可，這樣啟動gnuplot的時候就會自動啟動XQuartz了，可參考<a href="https://apple.stackexchange.com/questions/103814/cant-plot-with-gnuplot-on-my-mac">Can’t plot with gnuplot on my Mac</a></p>
<p>接下來安裝gnuplot的時候要特別注意，如果沒有加上<code>--with-x11</code>的話，可能會造成<code>Terminal type set to &#39;unknown&#39;</code>的warning，可參考<a href="https://stackoverflow.com/questions/24721305/cant-find-x11-terminal-in-gnuplot-octave-on-mac-os">Can’t find x11 terminal in gnuplot Octave on Mac OS</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install gnuplot --with-x11</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 啟動</span><br><span class="line">gnuplot</span><br><span class="line"># 畫出sin(x)的圖</span><br><span class="line">plot sin(x)</span><br><span class="line"># 設定範圍，x軸是-10到10，y軸是0到2的cos(x)</span><br><span class="line">plot [x=-10:10] [0:2] cos(x)</span><br><span class="line"># 清空之前的設定</span><br><span class="line">reset</span><br><span class="line"># 結束</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<h2 id="讀取檔案"><a href="#讀取檔案" class="headerlink" title="讀取檔案"></a>讀取檔案</h2><p>我們可以把多筆資料先存成檔案，然後再讓gnuplot來讀</p>
<p>我們先存資料到data.txt，中間用空格隔開</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 5</span><br><span class="line">2 10</span><br><span class="line">3 15</span><br><span class="line">4 10</span><br><span class="line">5 5</span><br></pre></td></tr></table></figure>
<p>執行gnuplot就會看到有許多一點一點資料散佈在plot上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gnuplot</span><br><span class="line">plot &quot;data.txt&quot;</span><br></pre></td></tr></table></figure>
<p>如果要開啟多個檔案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plot &quot;data1.txt&quot;, &quot;data2.txt&quot;, &quot;data3.txt&quot;</span><br></pre></td></tr></table></figure>
<h2 id="存成程式"><a href="#存成程式" class="headerlink" title="存成程式"></a>存成程式</h2><p>每次都要自己一個個輸入指令說實在太麻煩了，我們可以存成.plt檔，以下面為例存成plot.plt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plot &quot;data.txt&quot;</span><br></pre></td></tr></table></figure>
<p>進入gnuplot後輸入如下指令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load &quot;plot.plt&quot;</span><br></pre></td></tr></table></figure>
<h2 id="圖表上的文字"><a href="#圖表上的文字" class="headerlink" title="圖表上的文字"></a>圖表上的文字</h2><p>圖表上面總是要有些文字說明，可參考如下設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 設定標題</span><br><span class="line">set title &quot;pic_title&quot;</span><br><span class="line"># x軸說明</span><br><span class="line">set xlabel &quot;x(unit)&quot;</span><br><span class="line"># y軸說明</span><br><span class="line">set ylabel &quot;y(unit)&quot;</span><br><span class="line"># 設定線條說明外框</span><br><span class="line">set key box</span><br><span class="line"># 不要線條說明</span><br><span class="line">set nokey</span><br><span class="line"># 如果要修改線條說明</span><br><span class="line">plot &quot;data1.txt&quot; title &quot;title 1&quot;, &quot;data2.txt&quot; title &quot;title 2&quot;</span><br></pre></td></tr></table></figure>
<h2 id="圖表的顯示"><a href="#圖表的顯示" class="headerlink" title="圖表的顯示"></a>圖表的顯示</h2><p>也許我們會想改變圖表上面的顯示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 增加格線</span><br><span class="line">set grid</span><br><span class="line"># 數據連成一條線</span><br><span class="line">set style data lines</span><br><span class="line"># x軸的範圍</span><br><span class="line">set xrange [-10:10]</span><br><span class="line"># y軸的範圍</span><br><span class="line">set yrange [-10:10]</span><br><span class="line"># X軸的單位</span><br><span class="line">set xtics x: 每次x軸都增加x</span><br></pre></td></tr></table></figure>
<p>plot上其實也可以做一些操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用data.txt，並且畫成線，linestyle為1，linewidth也為1</span><br><span class="line">plot &quot;data.txt&quot; with lines linestyle 1 linewidth 1</span><br><span class="line"># 使用data.txt，pointtype為1，pointsize也為1</span><br><span class="line">plot &quot;data.txt&quot; with point pointtype 1 pointsize 1</span><br><span class="line"># 如果線和點都要的話</span><br><span class="line">plot &quot;data.txt&quot; with linespoints</span><br><span class="line"># 如果要變成長條圖的話</span><br><span class="line">plot &quot;data.txt&quot; with boxes</span><br></pre></td></tr></table></figure>
<h2 id="儲存成圖片"><a href="#儲存成圖片" class="headerlink" title="儲存成圖片"></a>儲存成圖片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 要存成png檔案</span><br><span class="line">set terminal png</span><br><span class="line"># 可以加上size資訊</span><br><span class="line">set terminal png size 1200,800</span><br><span class="line"># 輸出圖片，這個指令會等待後續的plot</span><br><span class="line">set output &quot;output.png&quot;</span><br><span class="line"># 輸出圖片</span><br><span class="line">plot .....</span><br><span class="line"># 記得要再改回x11</span><br><span class="line">set terminal x11</span><br></pre></td></tr></table></figure>
<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li>折線圖<ul>
<li>先產生出data.txt</li>
<li>使用在gnuplot中load如下plt檔<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reset</span><br><span class="line">set title &quot;pic_title&quot;</span><br><span class="line">set xlabel &quot;x(unit)&quot;</span><br><span class="line">set ylabel &quot;y(unit)&quot;</span><br><span class="line">set terminal png</span><br><span class="line">set output &quot;output.png&quot;</span><br><span class="line">plot &quot;data.txt&quot; with linespoints title &quot;title 1&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>長條圖<ul>
<li>先產生出data.txt</li>
<li>使用在gnuplot中load如下plt檔<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reset</span><br><span class="line">set title &quot;pic_title&quot;</span><br><span class="line">set xlabel &quot;x(unit)&quot;</span><br><span class="line">set ylabel &quot;y(unit)&quot;</span><br><span class="line">set terminal png</span><br><span class="line">set output &quot;output.png&quot;</span><br><span class="line"># 設定長條圖的size</span><br><span class="line">set boxwidth 0.3</span><br><span class="line">plot &quot;data.txt&quot; with boxes title &quot;title 1&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://applezulab.netdpi.net/08-useful-tools/gnuplot_basic">實驗基本數據製圖指令 gnuplot</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10158860">Gnuplot 簡單數據繪圖</a></li>
<li><a href="https://hackmd.io/s/Skwp-alOg">gnuplot 語法解說和示範</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>hexo 教學</title>
    <url>/2017/09/09/hexo%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<p>我之前一直想要自己寫 blog，可以留下些記錄，但是一方面不想要自己架 server，管理有點麻煩<br>另一方面又希望可以有 markdown 的功能，而這是 Google 的 blogger 所欠缺的，後來發現可以使用 hexo+Github 架設自己的 blog，對我而言是最佳選擇<br>Github 讓我不用自己架 server，hexo 讓我可以快速有個漂亮的介面，而且還可以用 markdown 來寫 blog</p>
<h1 id="第一次安裝"><a href="#第一次安裝" class="headerlink" title="第一次安裝"></a>第一次安裝</h1><p>這邊一開始要先安裝好 git 和 npm，兩者的使用就不在這邊多提了。</p>
<ol>
<li>先在 GitHub 上創立一個新的 repo，像我的話就是 <code>evshary.github.io</code></li>
<li>clone 下來並且創立 main 和 source 兩個 branch，這兩個 branch 分別有不同用途，main 用來放顯示的網頁，source 用來放產生網頁的原始檔</li>
<li>首先先切到 source 的 branch，然後開始安裝 hexo (當然要先裝好 npm)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安裝 hexo command line tool</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 安裝 deployer</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"># 初始化</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li>修改 <code>_config.yml</code> 的 deploy 參數，branch 改為 main，這個代表的意思是我們會把產生的網頁放到 main 這個 branch 上</li>
<li>執行 <code>hexo g</code> 來產生顯示的網頁</li>
<li>當我們修改好 blog，就可以把 source 的 branch commit 並且 push 上 GitHub</li>
<li>最後執行 <code>hexo d</code> 就可以上傳網頁了，這個動作代表著把 main push 上 GitHub</li>
<li>未來的使用都是在 source 的 branch 下 commit 並 push，然後才用<code>hexo d</code> 上傳</li>
</ol>
<p>備註：<code>hexo d</code>的上傳可以用 GitHub Action 取代，只要 source branch 有更新，就會自動在 main branch 產生 blog 結果。相關設定可以參考<a href="https://github.com/evshary/evshary.github.io/blob/source/.github/workflows/deploy.yaml">這邊的範例</a></p>
<h1 id="重裝"><a href="#重裝" class="headerlink" title="重裝"></a>重裝</h1><p>未來要在新電腦重建環境就不用像第一次那麼麻煩了</p>
<ol>
<li>首先在新電腦把 blog 的 repo clone 下來並切到 source 的 branch，如下面指令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b source git@github.com:[你的github帳號]/[repo名稱].git</span><br></pre></td></tr></table></figure></li>
<li>重新安裝相依套件，然後就可以直接開始使用了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li><p>建立新文章<br>一開始最重要的事怎麼建立新文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章主題&quot;</span><br></pre></td></tr></table></figure>
<p>這時候會在<code>source/_posts/</code>底下新增一個md檔案，打開它就可以開始寫blog了</p>
</li>
<li><p>根據 markdown 產生 html 頁面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>產生結果會在 <code>public</code> 資料夾下</p>
</li>
<li><p>local 端預覽<br>寫完之後的當然要產生頁面來看自己寫的如何，下面這個指令可以建立測試的 server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>這時候開瀏覽器連線 <code>http://localhost:4000</code> 應該就可以連上</p>
</li>
<li><p>push 到 GitHub 上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h1><p>使用 hexo 當然最重要的是漂亮的主題囉，hexo 的 GitHub 上已經有提供許多主題推薦，可以參考 <a href="https://github.com/hexojs/hexo/wiki/Themes">Themes</a><br>不過我個人覺得 <a href="https://github.com/theme-next/hexo-theme-next">theme-next&#x2F;hexo-theme-next</a> 比較好看，所以就用這個了<br><a href="https://theme-next.js.org/docs/getting-started/installation">官網推薦的安裝方法有兩種</a> ，一個是用 npm，另一個是直接 clone repo，為了方便未來升級管理，這邊使用 npm 的方式</p>
<ol>
<li>用 npm 下載 hexo-theme-next，套件會出現在 node_modules 中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></li>
<li>設定檔的部份會先找當前目錄下的 <code>_config.next.yml</code>，所以我們先複製一份設定檔出來<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure></li>
<li>接著在 hexo 的設定檔 <code>_config.yml</code> 修改 theme 關鍵字，也就是剛剛命名的 next，這樣就順利完成了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h1><p>主要會修改到的設定檔有兩個：</p>
<ul>
<li>hexo: 位於 <code>_config.yml</code><ul>
<li><a href="https://hexo.io/docs/configuration">hexo 官方設定教學</a></li>
</ul>
</li>
<li>hexo-theme-next: <code>_config.next.yml</code><ul>
<li><a href="https://theme-next.js.org/docs/getting-started/configuration.html">hexo-theme-next 官方教學</a></li>
</ul>
</li>
</ul>
<h1 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h1><p>當然 hexo 提供很多套件，我目前用到的是下面這兩個</p>
<h2 id="google-analytics"><a href="#google-analytics" class="headerlink" title="google analytics"></a>google analytics</h2><p>可參考 <a href="https://blog.marsen.me/2016/08/25/add_google_analytics_to_hexo_blog_1/">如何讓google analytics追踪你的Hexo Blog</a><br>使用方法很簡單，這個功能在 theme 中已經內建，只要開啟即可</p>
<ol>
<li>先打開 <code>_config.next.yml</code></li>
<li>找到下列字串<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">google_analytics:</span><br><span class="line">  tracking_id: </span><br></pre></td></tr></table></figure>
在 tracking_id 後面填上自己申請的 google analytics ID 就可以了。</li>
</ol>
<h2 id="Disqus的留言板功能"><a href="#Disqus的留言板功能" class="headerlink" title="Disqus的留言板功能"></a>Disqus的留言板功能</h2><p>可參考 <a href="https://blog.ivanwei.co/2016/01/03/2016-01-03-add-disqus-to-blog-by-hexo/">[Hexo] 加入 Disqus 讓 Blog多個留言功能</a><br>部署在 GitHub 的 hexo 沒有讓訪客留言的功能，所以這時候就需要第三方的整合型留言板 Disqus 了<br>這個也是跟 theme 綁一起的</p>
<ol>
<li>開啟 <code>_config.next.yml</code></li>
<li>找到下列字串<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname: evshary</span><br></pre></td></tr></table></figure></li>
<li>確認 enable 為 true，然後在 shortname 填上自己在Disquz註冊的short name就可以囉！</li>
</ol>
<h2 id="LocalSearch-的搜尋功能"><a href="#LocalSearch-的搜尋功能" class="headerlink" title="LocalSearch 的搜尋功能"></a>LocalSearch 的搜尋功能</h2><p>我們如果要 blog 支援搜尋功能，可參考 <a href="https://www.itfanr.cc/2017/10/27/add-search-function-to-hexo-blog/">Hexo博客添加搜索功能</a> ，下面列出應該要做的步驟</p>
<ol>
<li>首先要安裝 <code>hexo-generator-searchdb</code> 套件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>接著在 <code>_config.yml</code> 新增如下設定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure></li>
<li>開啟<code>_config.next.yml</code>，修改 enable 設定<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li>
<li>最後重新生成啟動即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s -g</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="如果搜尋功能不斷轉圈圈"><a href="#如果搜尋功能不斷轉圈圈" class="headerlink" title="如果搜尋功能不斷轉圈圈"></a>如果搜尋功能不斷轉圈圈</h3><p>通常會有一種情況搜尋功能會有問題，就是產生的search.xml有文字編碼錯誤</p>
<ol>
<li>先檢查 search.xml 的語法，可使用 <a href="https://www.xmlvalidation.com/">Validate an XML file</a> 這個線上網站</li>
<li>網站會告訴你哪邊有錯誤的編碼，可以直接進去修改</li>
<li>如果使用 vscode 的話可以從設定啟動 renderControlCharacters，就會顯示錯誤的字元了</li>
<li>如果有必要可以直接把該字元複製並且使用全域搜尋並修正(因為我們沒辦法打出該字元)</li>
</ol>
<p>詳情可參考 <a href="https://guahsu.io/2017/12/Hexo-Next-LocalSearch-cant-work/">HEXO-NexT的Local Search轉圈圈問題</a></p>
<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>如果要在 hexo 上加上 RSS 訂閱，需要使用 hexo-generator-feed 套件</p>
<ol>
<li>先安裝 hexo-generator-feed<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li>
<li>在 <code>_config.yml</code> 內加上如下內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RSS</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 10</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit:</span><br><span class="line">  content_limit_delim: &#x27; &#x27;</span><br></pre></td></tr></table></figure></li>
<li>最後重新生成啟動即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<p>可參考 <a href="https://segmentfault.com/a/1190000012647294">为hexo博客添加RSS订阅功能</a></p>
<h2 id="增加-live2d"><a href="#增加-live2d" class="headerlink" title="增加 live2d"></a>增加 live2d</h2><ol>
<li>先安裝必要的 npm 包<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br><span class="line">npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure></li>
<li>設定 <code>_config.yml</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># live2d</span><br><span class="line"># https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br></pre></td></tr></table></figure></li>
<li>最後重新生成啟動即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<p>可參考 <a href="https://bearbeargo.com/posts/how-to-play-with-live2d-on-hexo/">用Live2D让看板喵入住你的Hexo博客吧(^o^)&#x2F;~</a></p>
<p>不過這邊提一下，<a href="https://github.com/EYHN/hexo-helper-live2d">EYHN&#x2F;hexo-helper-live2d</a> 已經沒有再更新了，如果上到 GitHub，可能會有些套件安全疑慮，以後可能需要找些替代套件了。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>linker script 簡單教學</title>
    <url>/2018/06/02/linker-script-%E7%B0%A1%E5%96%AE%E6%95%99%E5%AD%B8/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>最近由於工作常常會用到，所以打算來談談如何來撰寫 linker script，也可以當作未來自己參考用途。</p>
<p>linker的作用就是把輸入檔(object file)的 section 整理到輸出檔的 section。除此之外也會定下每個object file 中尚未確定的符號位址，所以如果有 object file 用到不存在的symbol，就會出現常看到的 <code>undefined reference error</code>。</p>
<p>而 linker script 就是提供給 linker 參考的文件，它告訴 linker 我想要怎麼擺放這些 section，甚至也可以定義程式的起始點在哪邊。</p>
<h1 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h1><p>最簡單的 linker script 是用<code>SECTIONS</code>指令去定義 section 的分佈。</p>
<p>test.ld</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">. = 0x10000;</span><br><span class="line">.text : &#123; *(.text) &#125;</span><br><span class="line">. = 0x8000000;</span><br><span class="line">.data : &#123; *(.data) &#125;</span><br><span class="line">.bss : &#123; *(.bss) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上例，<code>.</code>被稱作 location counter，代表的是指向現在的位址，我們可以讀取或是移動它 (我覺得可以想像成我們在打電腦文件時的游標，代表現在要處理這個位置)。</p>
<p>這段 script 主要做的事是，先把 location counter 移到 0x10000，在這裡寫入所有輸入檔的<code>.text section</code>後，再來移到0x8000000放所有輸入檔的<code>.data section</code>跟<code>.bss section</code>。</p>
<p>當然，最重要的還是去嘗試，所以讓我們來試試看，結果是不是真的像我們所想的。</p>
<p>main.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void test(void);</span><br><span class="line"></span><br><span class="line">int global_bss;</span><br><span class="line">int global_data = 123;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    global_bss = 0;</span><br><span class="line">    test();</span><br><span class="line">    global_data++;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void test(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    // do nothing.</span><br><span class="line">    for (i = 0; i &lt; 10000; i++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嘗試編譯並看結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c main.c test.c</span><br><span class="line">$ ld -T test.ld main.o test.o</span><br><span class="line">$ objdump -h a.out</span><br><span class="line"></span><br><span class="line">a.out:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class="line">  0 .text         00000046  0000000000010000  0000000000010000  00010000  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, CODE</span><br><span class="line">  1 .eh_frame     00000058  0000000000010048  0000000000010048  00010048  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class="line">  2 .data         00000004  0000000008000000  0000000008000000  00200000  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">  3 .bss          00000004  0000000008000004  0000000008000004  00200004  2**2</span><br><span class="line">                  ALLOC</span><br><span class="line">  4 .comment      00000011  0000000000000000  0000000000000000  00200004  2**0</span><br><span class="line">                  CONTENTS, READONLY</span><br></pre></td></tr></table></figure>

<p>我們可以看到在VMA和LMA的地方，text是從0x10000開始，data和bss則是從0x8000000開始放，跟我們所安排的結果一樣。</p>
<p>這邊說明一下，一定會有人覺得奇怪，為什麼編譯出來的檔案無法執行，這個是因為我們並沒有符合 Linux 可執行的格式來 link，如果你想要知道一般我們下 gcc 是使用什麼 linker script 的話，可以使用如下方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -Wl,-verbose main.c test.c</span><br></pre></td></tr></table></figure>

<p>這樣就可以看到所使用的 linker script 了。</p>
<h1 id="常用的功能"><a href="#常用的功能" class="headerlink" title="常用的功能"></a>常用的功能</h1><p>接著我們來談談在linker script中常見到的功能，這邊我們可以參考 jserv 帶領成大同學開發的 rtenv 中的 <a href="https://github.com/southernbear/rtenv/blob/master/main.ld">linker script</a></p>
<p>那我們就一一了解每個符號的意義吧！</p>
<h2 id="ENTRY"><a href="#ENTRY" class="headerlink" title="ENTRY"></a>ENTRY</h2><p>用 ENTRY 可以指定程式進入點的符號，不設定的話 linker 會試圖用預設<code>.text</code>的起始點，或者用位址0的地方。</p>
<p>以 x86 為例，預設進入點是<code>ENTRY(_start)</code>，而 rtenv 則是設定為 <code>ENTRY(main)</code></p>
<h2 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h2><p>Linker 預設會取用全部的記憶體，我們可以用 MEMORY 指令指定記憶體大小，在 rtenv 的例子中，指定了 FLASH 跟 RAM 兩種的輸出位置與大小</p>
<p>ORIGIN代表起始位置，LENGTH為長度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line">  FLASH (rx) : ORIGIN = 0x00000000, LENGTH = 128K</span><br><span class="line">  RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 20K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下來SECTION部分，就能用 &gt; 符號把資料寫到指定的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss : &#123;</span><br><span class="line">        _sbss = .;</span><br><span class="line">        *(.bss)         /* Zero-filled run time allocate data memory */</span><br><span class="line">        _ebss = .;</span><br><span class="line">    &#125; &gt;RAM</span><br></pre></td></tr></table></figure>

<h2 id="KEEP"><a href="#KEEP" class="headerlink" title="KEEP"></a>KEEP</h2><p>KEEP 指令保留某個符號不要被 garbage collection ，例如我們不希望 ARM 的 ISR vector 會被優化掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text :</span><br><span class="line">    &#123;</span><br><span class="line">        KEEP(*(.isr_vector))</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="section-的本體"><a href="#section-的本體" class="headerlink" title="section 的本體"></a>section 的本體</h2><p>section 的指定方式是 linker script 中的重點，其中也有許多設定。</p>
<p>我們可以參考<a href="https://sourceware.org/binutils/docs/ld/Output-Section-Attributes.html#Output-Section-Attributes">官方文件</a>先對 section 的功能做一個快速了解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">section [address] [(type)] :</span><br><span class="line">  [AT(lma)]</span><br><span class="line">  [ALIGN(section_align) | ALIGN_WITH_INPUT]</span><br><span class="line">  [SUBALIGN(subsection_align)]</span><br><span class="line">  [constraint]</span><br><span class="line">  &#123;</span><br><span class="line">      output-section-command</span><br><span class="line">      output-section-command</span><br><span class="line">      ...</span><br><span class="line">  &#125; [&gt;region] [AT&gt;lma_region] [:phdr :phdr ...] [=fillexp]</span><br></pre></td></tr></table></figure>

<p>output-section-command 代表的就是我們要怎麼擺放每個 section。</p>
<p>在這個例子裡可以看到有許多 LMA，除了 LMA 外，其實還有 VMA，它們兩個究竟有什麼不同呢？</p>
<h3 id="LMA-x2F-VMA-的概念"><a href="#LMA-x2F-VMA-的概念" class="headerlink" title="LMA&#x2F;VMA 的概念"></a>LMA&#x2F;VMA 的概念</h3><p>這裡大概是最重要的部分，也是之前我一直搞不清楚的地方。</p>
<p>link script 中設計了兩種位址：VMA 和 LMA</p>
<table>
<thead>
<tr>
<th></th>
<th>LMA (Load Memory Address)</th>
<th>VMA (Virtual Memory Address)</th>
</tr>
</thead>
<tbody><tr>
<td>位置</td>
<td>ROM&#x2F;Flash</td>
<td>RAM</td>
</tr>
<tr>
<td>意義</td>
<td>程式碼保存的位置</td>
<td>程式碼執行的位址</td>
</tr>
</tbody></table>
<p>也就是 LMA 是 output file 的位置，VMA 是載入 section 到 RAM 時的位置，但是在大多數情況下兩者會是一樣的。</p>
<p>我們再看看上例是怎如何指定 LMA 和 VMA 的</p>
<ul>
<li>LMA 是用<code>AT</code>或<code>AT&gt;</code>來決定位址，為可選，沒指定就用VMA當LMA<ul>
<li><code>AT(LMA)</code>：告訴 linker 這個 section 應該要去哪個 LMA 載入資料到 VMA，要填 address</li>
<li><code>AT&gt;lma_region</code>：為 LMA 所在區域，需事先定義</li>
</ul>
</li>
<li><code>&gt;region</code>：為 VMA 所在區域，region需事先定義</li>
<li>在 linker script 的寫法基本上是這個架構<code>[VMA] : [AT(LMA)]</code></li>
</ul>
<p>繼續以 rtenv 為例，當指定了<code>_sidata</code>的 symbol 位置後，AT 就是要求載入到 FLASH 時要在<code>.text</code>的後面，換句話說<code>.data</code>的 LMA 要在<code>.text</code>後</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Initialized data will initially be loaded in FLASH at the end of the .text section. */</span><br><span class="line">.data : AT (_sidata)</span><br><span class="line">&#123;</span><br><span class="line">  _sdata = .;</span><br><span class="line">  *(.data)        /* Initialized data */</span><br><span class="line">  *(.data*)</span><br><span class="line">  _edata = .;</span><br><span class="line">&#125; &gt;RAM</span><br></pre></td></tr></table></figure>

<h2 id="取得-section-的位置"><a href="#取得-section-的位置" class="headerlink" title="取得 section 的位置"></a>取得 section 的位置</h2><p>在程式中，有時候可能還是會需要取得每個 section 的所在位址，我們可以用如下的方式取得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text :</span><br><span class="line">    &#123;</span><br><span class="line">        KEEP(*(.isr_vector))</span><br><span class="line">         *(.text)</span><br><span class="line">         *(.text.*)</span><br><span class="line">        *(.rodata)</span><br><span class="line">        *(.rodata*)</span><br><span class="line">        _smodule = .;</span><br><span class="line">        *(.module)</span><br><span class="line">        _emodule = .;</span><br><span class="line">        _sprogram = .;</span><br><span class="line">        *(.program)</span><br><span class="line">        _eprogram = .;</span><br><span class="line">        _sromdev = .;</span><br><span class="line">        *(.rom.*)</span><br><span class="line">        _eromdev = .;</span><br><span class="line">        _sidata = .;</span><br><span class="line">    &#125; &gt;FLASH</span><br></pre></td></tr></table></figure>
<p>上面的7個 symbol 分別代表開始和結束，例如<code>_smodule</code>代表 module 的開始，而<code>_emodule</code>則代表 module 的結束。</p>
<p>這樣的好處是 symbol 的部分我們可以在主程式這樣使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern uint32_t _sidata;</span><br><span class="line">extern uint32_t _sdata;</span><br><span class="line">extern uint32_t _edata;</span><br><span class="line"></span><br><span class="line">uint32_t *idata_begin = &amp;_sidata; </span><br><span class="line">uint32_t *data_begin = &amp;_sdata; </span><br><span class="line">uint32_t *data_end = &amp;_edata; </span><br><span class="line">while (data_begin &lt; data_end) *data_begin++ = *idata_begin++;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，如果 C 已經有用到該變數<code>_sidata</code>，那就要用<code>PROVIDE(_sdata = .)</code>來避免 linker 出現重複定義的錯誤</p>
<h2 id="Stack-的位址"><a href="#Stack-的位址" class="headerlink" title="Stack 的位址"></a>Stack 的位址</h2><p>通常 stack 位址我們都會放在 RAM 的最下方讓他往上長，所以我們可以用下面表示方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_estack = ORIGIN(RAM) + LENGTH(RAM);</span><br></pre></td></tr></table></figure>
<p>代表 stack 的放置位址是在 RAM 的最下方。</p>
<h1 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h1><h2 id="如果section重複被使用，會發生什麼事？"><a href="#如果section重複被使用，會發生什麼事？" class="headerlink" title="如果section重複被使用，會發生什麼事？"></a>如果section重複被使用，會發生什麼事？</h2><p>每個輸入檔的 section 只能在出現在 SECTIONS 中出現一次。什麼意思呢？讓我們看個例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">.data : &#123; *(.data) &#125;</span><br><span class="line">.data1 : &#123; data.o(.data) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們可以看到<code>data.o</code>中的<code>.data section</code>應該在第一個 OUTPUT-SECTION-COMMAND (也就是<code>.data : &#123; *(.data) &#125;</code>)被用掉了，所以在<code>.data1 : &#123; data.o(.data) &#125;</code>將不會再次出現，代表的就是<code>.data1 section</code>會是空的。</p>
<h2 id="如果只想要把某個library的-o放入的話"><a href="#如果只想要把某個library的-o放入的話" class="headerlink" title="如果只想要把某個library的.o放入的話"></a>如果只想要把某個library的.o放入的話</h2><p>可用<code>*xxx.a:*yyy.o (.bss*)</code>的方式，舉例來說：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss_RAM2 : ALIGN(4)</span><br><span class="line">    &#123;</span><br><span class="line">    	*libmytest.a:*.o (.bss*)</span><br><span class="line">    	*(.bss.$RAM2*)</span><br><span class="line">    	*(.bss.$RamLoc64*)</span><br><span class="line">       . = ALIGN(4) ;</span><br><span class="line">    &#125; &gt; RamLoc64</span><br></pre></td></tr></table></figure>

<h2 id="如果我不想要把特定檔案的section放入"><a href="#如果我不想要把特定檔案的section放入" class="headerlink" title="如果我不想要把特定檔案的section放入"></a>如果我不想要把特定檔案的section放入</h2><p>可以使用<code>EXCLUDE_FILE</code>，例如我想放除了 foo.o、bar.o 外，所有的<code>.bss section</code>，可以這麼做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(*(EXCLUDE_FILE (*foo.o *bar.o) .bss))</span><br></pre></td></tr></table></figure>

<p>詳細可參考下方連結</p>
<ul>
<li><a href="http://forum.andestech.com/viewtopic.php?f=16&t=600">linker script之EXCLUDE_FILE語法</a></li>
<li><a href="https://stackoverflow.com/questions/21418593/linker-script-put-a-particular-file-at-a-later-position">Linker Script: Put a particular file at a later position</a></li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://sourceware.org/binutils/docs/ld/">ld 官方文件</a></li>
<li><a href="http://yodalee.blogspot.tw/2015/04/linker-script.html">Linker script 簡介</a></li>
<li><a href="http://wiki.csie.ncku.edu.tw/embedded/Lab19/stm32-prog.pdf">嵌入式系統建構：開發運作於STM32的韌體程式</a></li>
<li><a href="http://wen00072.github.io/blog/2014/03/14/study-on-the-linker-script/">Linker Script初探 - GNU Linker Ld手冊略讀</a></li>
<li><a href="https://www.slideshare.net/zzz00072/gnu-ldlinker-script">GNU ld的linker script簡介</a></li>
<li><a href="http://wen00072.github.io/blog/2014/12/22/rtenv-linker-script-explained/">Rtenv的linker Script解釋</a></li>
<li><a href="http://opass.logdown.com/posts/255812-introduction-to-stm32f429-linker-script">stm32f429 Linker Script簡介</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 openssl 工具與函式庫</title>
    <url>/2018/05/13/openssl-library-example/</url>
    <content><![CDATA[<h1 id="安裝openssl"><a href="#安裝openssl" class="headerlink" title="安裝openssl"></a>安裝openssl</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install openssl</span><br></pre></td></tr></table></figure>
<p>MAC上如果要使用library有點麻煩，需要先找到對應的路徑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find /usr/local/Cellar/ -name &quot;libssl.*&quot;  # 找到library的路徑</span><br><span class="line">/usr/local/Cellar//openssl/1.0.2o_1/lib/pkgconfig/libssl.pc</span><br><span class="line">/usr/local/Cellar//openssl/1.0.2o_1/lib/libssl.dylib</span><br><span class="line">...</span><br><span class="line">$ find /usr/local/Cellar/ -name &quot;ssl.h&quot;  # 找到header的路徑</span><br><span class="line">/usr/local/Cellar//node/8.4.0/include/node/openssl/ssl.h</span><br><span class="line">/usr/local/Cellar//openssl/1.0.2o_1/include/openssl/ssl.h</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>看起來路徑是在<code>/usr/local/Cellar/openssl/1.0.2o_1/</code>我們先記起來，後面編譯時會用到。</p>
<h1 id="創造憑證"><a href="#創造憑證" class="headerlink" title="創造憑證"></a>創造憑證</h1><p>openssl本身就有提供很多好用的工具，我們最常用到的大概就是用來產生憑證吧！</p>
<p>這邊介紹產生兩種常見憑證(RSA,ECC)的方法。</p>
<h2 id="產生RSA憑證"><a href="#產生RSA憑證" class="headerlink" title="產生RSA憑證"></a>產生RSA憑證</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 產生2048長度的key</span><br><span class="line">$ openssl genrsa -out server.key 2048</span><br><span class="line"># 用key產生CSR，指定用sha384簽CSR</span><br><span class="line">$ openssl req -new -sha384 -key server.key -out server.csr</span><br><span class="line"># 產生自簽名證書</span><br><span class="line">$ openssl x509 -req -sha1 -days 3650 -signkey server.key -in server.csr -out server.crt</span><br></pre></td></tr></table></figure>
<h2 id="產生ECC憑證"><a href="#產生ECC憑證" class="headerlink" title="產生ECC憑證"></a>產生ECC憑證</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 產生ECC key</span><br><span class="line">$ openssl ecparam -genkey -name secp384r1 -out ecc.key</span><br><span class="line"># 用key產生CSR，指定用sha384簽CSR</span><br><span class="line">$ openssl req -new -sha384 -key ecc.key -out ecc.csr</span><br><span class="line"># 產生自簽名證書</span><br><span class="line">$ openssl x509 -req -sha1 -days 3650 -signkey ecc.key -in ecc.csr -out ecc.crt</span><br></pre></td></tr></table></figure>

<h1 id="使用openssl內建的連線工具"><a href="#使用openssl內建的連線工具" class="headerlink" title="使用openssl內建的連線工具"></a>使用openssl內建的連線工具</h1><p>有時候我們只是想要測試ssl連線而已，還要自己寫程式有點麻煩，還好我們可以使用openssl提供的連線工具</p>
<p>client和server都有提供，非常方便的！</p>
<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><ul>
<li><code>-msg</code>：看細節(hex格式)</li>
<li><code>-cipher</code>：決定要用哪種cipher連線</li>
<li><code>-showcerts</code>：把cert的chain也列出來</li>
<li><code>-curves</code>：指定要用的橢圓算法，client hello的extension中的elliptic_curves</li>
<li><code>-sigalgs</code>：指定交換key要用的簽名方式，client hello的extension中的signature_algorithms</li>
<li><code>-no_tls1 -no_ssl3</code>：加上後就可以只用tls1.2連線了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 最基本連線</span><br><span class="line">$ openssl s_client -connect [IP]:[port]</span><br><span class="line"># 看連線細節</span><br><span class="line">$ openssl s_client -msg -connect [IP]:[port]</span><br><span class="line"># 指定連線方式</span><br><span class="line">$ openssl s_client -connect sslanalyzer.comodoca.com:443 -cipher ECDHE-RSA-AES128-GCM-SHA256 -curves secp384r1 -sigals RSA+SHA512</span><br><span class="line"># 限制只能用TLS1.2連線</span><br><span class="line">$ openssl s_client -no_tls1 -no_ssl3 -connect [IP]:[port]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># server開啟5678 port並且用server.key當private key，cert用server.pem</span><br><span class="line">$ openssl s_server -accept 5678 -key server.key -cert server.pem</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果要看有哪些連線方式，可使用如下指令</span><br><span class="line">$ openssl ciphers ALL</span><br></pre></td></tr></table></figure>

<h1 id="函式庫使用"><a href="#函式庫使用" class="headerlink" title="函式庫使用"></a>函式庫使用</h1><p>我們來介紹openssl的函式庫最基本的使用方式。</p>
<h2 id="基本範例-client-amp-server"><a href="#基本範例-client-amp-server" class="headerlink" title="基本範例 - client &amp; server"></a>基本範例 - client &amp; server</h2><p>這邊寫了兩個client和server的基本範例當作參考，大家可以基於這兩者來拓展自己的程式。</p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>ssl_client.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECV_SIZE 256</span></span><br><span class="line"></span><br><span class="line">SSL_CTX *<span class="title function_">create_sslcontext</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> SSL_METHOD *method;</span><br><span class="line">    SSL_CTX *ctx;</span><br><span class="line">    <span class="comment">// Support only TLSv1.2</span></span><br><span class="line">    method = TLSv1_2_client_method();</span><br><span class="line">    <span class="comment">// Create context</span></span><br><span class="line">    ctx = SSL_CTX_new(method);</span><br><span class="line">    <span class="keyword">if</span> (!ctx) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">create_socket</span><span class="params">(<span class="type">char</span> *ip, <span class="type">int</span> port)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// New socket</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// TCP connect to server</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(port);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line">    <span class="keyword">if</span> (connect(fd, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage: ./ssl_client.out [IP] [port]</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    SSL_CTX *ctx;</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    SSL *ssl;</span><br><span class="line">    <span class="type">char</span> buf[RECV_SIZE];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Parse parameter</span></span><br><span class="line">    port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Connect to %s:%d\n&quot;</span>, argv[<span class="number">1</span>], port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SSL init</span></span><br><span class="line">    OpenSSL_add_ssl_algorithms();</span><br><span class="line">    <span class="comment">// Create SSL_CTX</span></span><br><span class="line">    <span class="keyword">if</span> ((ctx = create_sslcontext()) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Create socket</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = create_socket(argv[<span class="number">1</span>], port)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Start to build ssl connection</span></span><br><span class="line">    ssl = SSL_new(ctx);</span><br><span class="line">    SSL_set_fd(ssl, fd);</span><br><span class="line">    <span class="keyword">if</span> (SSL_connect(ssl) &lt;= <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// SSL write/read</span></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Write data to server (q for quit): &quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        gets(buf);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;q&quot;</span>, buf) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (SSL_write(ssl, buf, <span class="built_in">strlen</span>(buf)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        len = SSL_read(ssl, buf, RECV_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Recv %d bytes: %s\n&quot;</span>, len, buf);</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// SSL close</span></span><br><span class="line">    SSL_shutdown(ssl);</span><br><span class="line">    <span class="comment">// Free resource</span></span><br><span class="line">    SSL_free(ssl);</span><br><span class="line">    close(fd);</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line">    EVP_cleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ssl_server.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_CERT <span class="string">&quot;server.crt&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_KEY  <span class="string">&quot;server.key&quot;</span>   </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_LEN  256</span></span><br><span class="line"></span><br><span class="line">SSL_CTX *<span class="title function_">create_sslcontext</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> SSL_METHOD *method;</span><br><span class="line">    SSL_CTX *ctx;</span><br><span class="line">    <span class="comment">// Support only TLSv1.2</span></span><br><span class="line">    method = TLSv1_2_server_method();</span><br><span class="line">    <span class="comment">// Create context</span></span><br><span class="line">    ctx = SSL_CTX_new(method);</span><br><span class="line">    <span class="keyword">if</span> (!ctx) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">configure_sslcertkey_file</span><span class="params">(SSL_CTX *ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    SSL_CTX_set_ecdh_auto(ctx, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Load certificate file</span></span><br><span class="line">    <span class="keyword">if</span> (SSL_CTX_use_certificate_file(ctx, SSL_CERT, SSL_FILETYPE_PEM) &lt;= <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Load private key file</span></span><br><span class="line">    <span class="keyword">if</span> (SSL_CTX_use_PrivateKey_file(ctx, SSL_KEY, SSL_FILETYPE_PEM) &lt;= <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">create_socket</span><span class="params">(<span class="type">int</span> port)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(port);</span><br><span class="line">    addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (bind(fd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (listen(fd, <span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage: ./ssl_server.out [port]</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> server_fd, client_fd;</span><br><span class="line">    SSL_CTX *ctx;</span><br><span class="line">    SSL *ssl;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    uint len = <span class="keyword">sizeof</span>(addr);</span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line">    <span class="type">char</span> buf[BUF_LEN];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    port = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Listen port: %d\n&quot;</span>, port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SSL init</span></span><br><span class="line">    OpenSSL_add_ssl_algorithms();</span><br><span class="line">    <span class="comment">// Create SSL_CTX</span></span><br><span class="line">    <span class="keyword">if</span> ((ctx = create_sslcontext()) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Configure cert and key</span></span><br><span class="line">    <span class="keyword">if</span> (configure_sslcertkey_file(ctx) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Create socket</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = create_socket(port)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Accept connection</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = accept(server_fd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, &amp;len)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Build SSL connection</span></span><br><span class="line">    ssl = SSL_new(ctx);</span><br><span class="line">    SSL_set_fd(ssl, client_fd);</span><br><span class="line">    <span class="keyword">if</span> (SSL_accept(ssl) &lt;= <span class="number">0</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// SSL read/write</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        len = SSL_read(ssl, buf, BUF_LEN);</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SSL_write(ssl, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Close client</span></span><br><span class="line">    SSL_free(ssl);</span><br><span class="line">    close(client_fd);</span><br><span class="line">    <span class="comment">// Close server and relase resource</span></span><br><span class="line">    close(server_fd);</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line">    EVP_cleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="編譯與執行"><a href="#編譯與執行" class="headerlink" title="編譯與執行"></a>編譯與執行</h3><p>接下來寫個簡單的Makefile，這時候就要用到前面所找到的路徑了。</p>
<figure class="highlight mak"><table><tr><td class="code"><pre><span class="line">SSL_PATH=/usr/local/Cellar/openssl/1.0.2o_1/</span><br><span class="line">CFLAGS=-I<span class="variable">$(SSL_PATH)</span><span class="keyword">include</span> -L<span class="variable">$(SSL_PATH)</span>lib/ -lcrypto -lssl</span><br><span class="line">CC=gcc</span><br><span class="line">BIN=ssl_server ssl_client</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(BIN)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">ssl_server: ssl_server.c</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span>.out <span class="variable">$(CFLAGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">ssl_client: ssl_client.c</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span>.out <span class="variable">$(CFLAGS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        -rm *.o</span><br><span class="line">        -rm *.out</span><br></pre></td></tr></table></figure>
<p><strong>這邊要特別記住<code>-lcrypto -lssl</code>要放最後面，不然有些平台會有error</strong></p>
<p>然後就可以執行看看了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ ./ssl_server 2222</span><br><span class="line">Listen port: 2222</span><br></pre></td></tr></table></figure>
<p>這時候另一邊再來執行client</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ssl_client.out 127.0.0.1 2222</span><br><span class="line">Connect to 127.0.0.1:2222</span><br><span class="line">Write data to server (q for quit): abcd</span><br><span class="line">Recv 4 bytes: abcd</span><br></pre></td></tr></table></figure>
<p>可以順利收送資料了！</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://unix.stackexchange.com/questions/346864/how-to-link-openssl-library-in-macos-using-gcc">How to link OpenSSL library in macOS using gcc?</a></li>
<li><a href="https://wiki.openssl.org/index.php/Simple_TLS_Server">Simple TLS Server</a></li>
</ul>
]]></content>
      <categories>
        <category>protocol</category>
      </categories>
  </entry>
  <entry>
    <title>port knocking</title>
    <url>/2017/08/27/port-knocking/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>port knocking就像是敲門的暗號一樣，以特定順序碰觸port，server就會執行特定指令<br>我們可以把這個功能用來開port，就像阿里巴巴要用咒語才可以開門一樣。<br>詳情可參考<a href="http://www.portknocking.org/view/about/summary">port knocking的定義</a></p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>我這邊server是用Ubuntu, client是MAC環境。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install knockd</span><br></pre></td></tr></table></figure>
<h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew insrall knock</span><br></pre></td></tr></table></figure>

<h1 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h1><p>通常在位置在<code>/etc/knockd.conf</code><br>最初的設定檔，可參考<a href="http://linux.die.net/man/1/knockd">manual</a><br>這邊是客製化的設定，目的是可以開關port 22，防止有人亂連。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[options]</span><br><span class="line">        UseSyslog</span><br><span class="line"></span><br><span class="line">[openSSH]</span><br><span class="line">        sequence    = 3389:udp,80:tcp,21:udp,53:tcp,23:udp</span><br><span class="line">        seq_timeout = 5</span><br><span class="line">        command     = /sbin/iptables -I INPUT 1 -s %IP% -p tcp --dport 22 -j ACCEPT</span><br><span class="line">        tcpflags    = syn</span><br><span class="line"></span><br><span class="line">[closeSSH]</span><br><span class="line">        sequence    = 443:tcp,80:udp</span><br><span class="line">        seq_timeout = 5</span><br><span class="line">        command     = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT</span><br><span class="line">        tcpflags    = syn</span><br></pre></td></tr></table></figure>

<p>功能大概看名字也可以猜出來</p>
<ul>
<li>sequence: 敲port的順序</li>
<li>seq_timeout: 間隔時間</li>
<li>command: 如果成功敲完，要執行什麼命令，這邊是用開ssh來當示範</li>
<li>tcpflags: 如果是TCP連線，需要有什麼flag</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h2><p>把<code>/etc/default/knockd</code>中的<code>START_KNOCKD</code>改成1<br>然後啟動</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service knockd start</span><br></pre></td></tr></table></figure>
<p>記得防火牆要先設定不讓外面的人進入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT --dport 8888 -j DROP</span><br></pre></td></tr></table></figure>

<h2 id="client端"><a href="#client端" class="headerlink" title="client端"></a>client端</h2><p>須先安裝knock</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 開啓</span></span><br><span class="line">knock -v 192.168.0.1 3389:udp 80:tcp 21:udp 53:tcp 23:udp</span><br><span class="line"><span class="comment"># 關閉</span></span><br><span class="line">knock -v 192.168.0.1 443:tcp 80:udp</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>knock不一定要完全正確<br>例如說如果順序是7000,8000,9000<br>那麼我們用7000-9000依序敲過去仍然是可以打開<br>但是如果是分兩次knock就沒有用了</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>youtube-dl網路影片下載器</title>
    <url>/2018/11/25/youtube-dl%E7%B6%B2%E8%B7%AF%E5%BD%B1%E7%89%87%E4%B8%8B%E8%BC%89%E5%99%A8/</url>
    <content><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>當我們要下載網路影片時，通常會去使用browser上的套件來下載，其實除了browser套件外，我們也可以使用command-line的方式，也就是這篇要介紹的youtube-dl。</p>
<p>youtube-dl功能十分強大，也有很多參數可以調整，能下載的網站不只是youtube，也可以是其他熱門網站，例如Facebook等等，更重要的是這個工具有多個平台可以使用(Windows、Mac、Linux)。</p>
<p>除了<a href="https://rg3.github.io/youtube-dl/index.html">指令youtube-dl</a>以外，我們也可以用GUI的介面的工具<a href="https://github.com/MrS0m30n3/youtube-dl-gui">youtube-DLG</a>，使用上更為方便，詳請可參考<a href="https://www.kocpc.com.tw/archives/162438">最強的網路影片下載器　Youtube-dl-gui 只要有網址就能幫你搞定</a>。</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install youtube-dl</span><br><span class="line"># 如果有需要後續轉檔的話</span><br><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install youtube-dl</span><br><span class="line"># 如果需要後續轉檔的話</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>其實更好的方法是使用Python的pip來安裝，因為youtube-dl本身就是使用Python所寫成的，而由於影片的網站更新很快，所以可能要隨時更新到最新版的youtube-dl才行，OS distribution不一定會出的那麼快。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade youtube_dl</span><br><span class="line"># 如果使用python3的話</span><br><span class="line">pip3 install --upgrade youtube_dl</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>這邊介紹一些常用的指令</p>
<h2 id="支援"><a href="#支援" class="headerlink" title="支援"></a>支援</h2><ul>
<li>確定有支援下載哪些影片網站，相關列表也可以從<a href="https://github.com/rg3/youtube-dl/blob/master/docs/supportedsites.md">官網</a>查詢<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl --extractor-descriptions</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>如果我們沒有指定格式的話，通常youtube-dl會幫我們挑最好的</p>
<ul>
<li>指定下載的影片格式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先查詢有哪些格式可下載</span><br><span class="line">youtube-dl -F [URL]</span><br><span class="line"># 指定下載格式</span><br><span class="line">youtube-dl -f mp4 [URL]</span><br><span class="line"># 或是用format code</span><br><span class="line">youtube-dl -f [列表中的format code] [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="輸出格式"><a href="#輸出格式" class="headerlink" title="輸出格式"></a>輸出格式</h2><p>由於官方的輸出格式預設有帶ID(<code>%(title)s-%(id)s.%(ext)s</code>)，我們可以將其去除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -o &#x27;%(title)s.%(ext)s&#x27; [URL]</span><br></pre></td></tr></table></figure>

<h2 id="字幕"><a href="#字幕" class="headerlink" title="字幕"></a>字幕</h2><ul>
<li>選擇嵌入特定字幕<ul>
<li><code>--write-sub</code>代表下載字幕</li>
<li><code>--embed-sub</code>代表嵌入字幕</li>
<li><code>--sub-lang</code>代表要選擇的字幕<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先列出可下載的字幕列表</span><br><span class="line">youtube-dl --list-subs [URL]</span><br><span class="line"># 嵌入想要的字幕</span><br><span class="line">youtube-dl --write-sub --embed-sub --sub-lang [字幕] [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>直接嵌入所有字幕<ul>
<li><code>--all-subs</code>選擇所有字幕<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl --write-sub --embed-sub --all-subs [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="轉為音樂格式"><a href="#轉為音樂格式" class="headerlink" title="轉為音樂格式"></a>轉為音樂格式</h2><p>如果我們要下載音樂格式的話，基本上需要有ffmpeg的輔助</p>
<ul>
<li>選擇要下載的音樂格式，例如mp3、m4a、flac等等<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -x --audio-format [音樂格式] [URL]</span><br></pre></td></tr></table></figure></li>
<li>可以用<code>--audio-quality</code>強迫ffmpeg轉換較高品質的音樂，0是最好，9是最差<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -x --audio-format [音樂格式] --audio-quality [音樂品質] [URL]</span><br></pre></td></tr></table></figure></li>
<li>下載時附上封面(使用youtube截圖)和音樂資訊(作曲者等等)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -x --audio-format [音樂格式] --embed-thumbnail --add-metadata [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="下載播放清單"><a href="#下載播放清單" class="headerlink" title="下載播放清單"></a>下載播放清單</h2><ul>
<li>其實只要把[URL]換成播放清單的網址即可，不過我們也可以指定開始和結束位址<ul>
<li><code>--playlist-start</code>：開始</li>
<li><code>--playlist-end</code>：結束，也就是倒數第幾個影片<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl --playlist-start [開始位置] --playlist-end [結束位置] [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><p>我這邊直接列出常用的指令，如果要使用可以直接copy比較快</p>
<ul>
<li>下載mp4影片並加上字幕<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -f mp4 --write-sub --embed-sub --all-subs -o &#x27;%(title)s.%(ext)s&#x27; [URL]</span><br></pre></td></tr></table></figure></li>
<li>下載mp3音樂，並加上封面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl -x --audio-format mp3 --audio-quality 0 --embed-thumbnail --add-metadata [URL]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="https://blog.gtwang.org/useful-tools/youtube-dl/">youtube-dl：下載 YouTube 影片的指令工具（支援 Windows、Linux 與 Mac OS X）</a></li>
<li><a href="https://yogapan.github.io/2017/08/16/Youtube-dl%E6%BF%83%E7%B8%AE%E6%95%99%E5%AD%B8%E7%AD%86%E8%A8%98/">Youtube-dl濃縮教學筆記</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>「深度學習的技術」讀後感</title>
    <url>/2018/03/11/%E3%80%8C%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E7%9A%84%E6%8A%80%E8%A1%93%E3%80%8D%E8%AE%80%E5%BE%8C%E6%84%9F/</url>
    <content><![CDATA[<p>會知道這本書是因為之前有在追蹤該作者的<a href="https://4think.net/">部落格</a>，該部落格是分享作者看完書後的讀後心得，他看的書品質都算是很高，有時候我也都會參考他的書單、心得來決定是否要看這本書。後來作者把他看的書做一個總結，寫成一本關於學習的書，也就是這本<a href="https://4think.net/%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E7%9A%84%E6%8A%80%E8%A1%93%E3%80%8B/">「深度學習的技術」</a>。原本是有點懶得買，因為並不是實體而且感覺轉帳什麼的很麻煩，不過在同事的勸誘下還是買了。從結論來說我覺得這本真的值得這個價錢，畢竟作者的論述很清晰、有條理，而且都有引用其他著名書籍內容，某種程度上也是集大成了，可以從作者的方法再進一步學習、研究出屬於自己的學習方式。</p>
<p>作者把整個學習過程分成五個階段：<strong>記、懂、網、拓、活</strong>。記是記憶的意思，講了幾個科學上實驗研究很有用的記憶方法，包括「提取練習效應」、「間隔效應」、「交錯效應」、「生產效應」、「變動效應」等等。但我從中學到的是<strong>記不是要強調記憶本身，而是要練習「提取記憶」這件事</strong>，所以這些方法都是訓練自己在不同情況下都能夠順利提取記憶，確保自己真的有記憶牢靠，所以也難怪背誦時只是不斷重複閱讀是效率極差，而透過各種提取，如講出來、寫出來、測驗等等記憶的效率會再高一點。這點我應該可以拿來在學習單字上試試做些驗證。</p>
<p>懂的部分就是要讓自己記憶力最大化，有幾個方式：相鄰可能(複利效應)、發散模式(利用散步等時間思考事情)、自然頻率(找適合人類的學習方式，如故事、思想實驗)、透徹程度(以教為學)、工作記憶(善用紙筆)。內容就不一一多提，但是我想最重要的是人類在演化上、構造上還是屬於生物，所以學習上還是有一定生理限制，這些就是讓我們可以用比較輕鬆的方式理解知識。</p>
<p>網則是強調知識的排列重要性，作者強調了碎片化學習不是不好，畢竟很多時候都只能利用零散的時間來學習，但是最重要的是我們需要把知識進行排列，因為往往知識的排列本身比起知識點是更為重要的。要構成知識網有兩個支柱，分別為知識排列以及刻意練習，知識排列算是我們對外顯知識(例如物理學、經濟學等理論)的人工佈線，透過佈線構成自己的知識架構，而刻意練習則是用在學習內隱知識(如開車、游泳等等難用文字描述的領域)，強化我們網狀架構的廣度、強度和密度。這邊不得不提<a href="http://www.books.com.tw/products/0010752714">刻意練習</a>真的自從出版後就被各種提到，而且都是我覺得值得一看的好書，好的方法果然是會被其他好書不斷重複提起，這也驗證了重要知識是很容易在生活中重複出現的。</p>
<p>前面都在講怎麼學習，但是學習什麼也是很重要的。拓的部分在講知識是有品質的差別的，要如何辨別知識對自己的價值有三個方面：正確性(過濾機制)、多樣性(跨領域學習)、創造性(思想孵化器)。我認為正確性講的是人類總是有心理學上的弱點，而透過第二層思考就可以盡可能避免被錯誤的知識誤導。多樣性則提到了蒙格的多元思維模型，透過學習多個學科最重要的模型，破除學問間的壁壘，可以解決更多困難的問題。順帶一提，蒙格的<a href="http://www.books.com.tw/products/0010643983">窮查理的普通常識</a>也是被各種推廣的好書，雖然內容並不是很有條理的方法論(比較多是演講形式)，但背後的思想可是備受推崇，之後可能也會想收藏一本當傳教用(誤)。最後的創造性則是強調透過寫作讓自己的思維可視化，並且促進更進一步的思考。</p>
<p>最後的「活」先提到了要時時注意一石多鳥，學習要用最有效率的方式學習，不論是閱讀還是做筆記都是，找到好的方法，並且使用它。而更重要的是學了知識就是要用，我很喜歡書中的這句話<strong>「知識就像是金錢一樣，不花就等於不曾有過」</strong>，作者建議使用知識的方法是開始屬於自己的個人項目，並且給了一些找到與實踐個人項目的方法和原則。我是很認同他的想法，畢竟我也常覺得看完書後好像就只是這樣，沒有真正改變了什麼。也許我也該從一個個人項目開始發揮我所學到的內容。</p>
<p>這本書原則上我非常地推薦，是值得一讀的好書。先不論書中方法對錯，光是作者把各個書的精華統整出自己的知識架構就已經值回票價了。當然，我不是完全認同書中的方法，但是我覺得書中的統整確確實實是改變我一些學習的方法。所以我的建議是<strong>不要完全照抄書中的方法，而是要善用作者的統整，建構出屬於自己的學習習慣</strong>，這樣才算是最大化利用這本書。</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>「被討厭的勇氣」-擁有承擔責任的勇氣</title>
    <url>/2018/10/21/%E3%80%8C%E8%A2%AB%E8%A8%8E%E5%8E%AD%E7%9A%84%E5%8B%87%E6%B0%A3%E3%80%8D-%E6%93%81%E6%9C%89%E6%89%BF%E6%93%94%E8%B2%AC%E4%BB%BB%E7%9A%84%E5%8B%87%E6%B0%A3/</url>
    <content><![CDATA[<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>這篇想要介紹的是「被討厭的勇氣」這本書，書中用哲學家和年輕人用對話方式來闡述阿德勒心理學。由於阿德勒心理學跟較廣為人知的佛洛伊德心理學相比更冷門一點，所以很多想法都給現代人帶來啟發，也因此廣受歡迎。<br>這系列書分為兩集，上集是對阿德勒心理學有個綜觀認識，而下集則是因為讀者有回饋不少意見而針對這些疑問的回答。個人認為下集比較偏向怎麼去實踐方面，其中幾乎有八成是在講教育部分。雖然我覺得一般人如何去實踐部分較少有點可惜，但是對諮商師、教師來說可能極具價值吧！<br>其實書中討論的阿德勒心理學範圍還蠻廣的，原本我想嘗試用整體架構來分析，但是發現可能以目前所掌握的相關知識不足以做這樣的評論，所以我改成會針對幾點比較有收穫的概念來介紹。</p>
<h2 id="目的論"><a href="#目的論" class="headerlink" title="目的論"></a>目的論</h2><p>目的論其實是這本書很重要的精華，反對了宿命論，強調了人類可以自我改變的能力。我們常常太過注重因果關係了，「因為過去發生怎樣怎樣，所以現在的我才變成這樣」或是「都是因為他先怎樣怎樣，我才會這樣」。雖然某種層面上可能是對的，但是更可能的是這些都只是藉口，因為我們並非受制過去原因而行動，而是朝向自己決定好的目的而行動。換句話說，<strong>自己之所以不幸，完全是自己親手所選擇的</strong>。<br>這個概念很重要，如果強調因果論，那代表的是現在的我是無法改變的，因為過去是無法改變的，這是宿命。然而將其想成是我們為了什麼目的才變成現在的自己，那隱含的意思是只要改變了目的，現在的自己也會跟著改變。不是因為過去的經驗形塑了現在的我，而是我去賦予過去經驗什麼意義來解釋自己的人生。由此可知，<strong>重要的不是經歷了什麼，而是如何去運用它</strong>。<br>我們在生活中常常會對現狀不滿，這時候就會去找理由，都是因為環境、過去等等什麼原因導致自己這樣的。但是如果用目的理論來看，我們可能是「不想去改變」而去找理由。雖然現狀令人不滿，但是改變更加痛苦，為了不去改變，我們必須要有可以歸罪的理由。說直白一點，我們是因為缺乏「<strong>改變的勇氣</strong>」，所以寧可選擇了不幸的現狀。<br>在目的論下，一切的理由都是藉口，當前現況完全是自己所選擇的。在下集有提到一個三角柱的概念，我們跟親人、朋友常常會抱怨誰誰誰很可惡，自己很可憐，這也就是三角柱其中兩面，「可惡的他」和「可憐的我」，但是更為重要的是第三面「<strong>今後該怎麼辦</strong>」。不斷地找理由不會改變現況，要專注於自己能改變的事情上面。<br>老實說，目的論真的蠻殘酷的，我們為了讓自己好過一點，感性上會想逃避自己的責任，去抱怨外在的環境，但是就現實與邏輯而言，如果真的要改變現狀，那就得承擔起自己應負的責任，並找出改變的方法。「責任」與「勇氣」說起來容易，但是當想到要用在自己身上時，才真正感受到其重量。</p>
<h2 id="逃離競爭關係"><a href="#逃離競爭關係" class="headerlink" title="逃離競爭關係"></a>逃離競爭關係</h2><p>阿德勒説：「一切的煩惱都是人際關係的煩惱」。雖然有點極端，不過確實人類的煩惱大多數是來自人際關係。其中對我而言，最常見的煩惱是怕自己輸給別人。人類與身俱來就有「追求卓越」的慾望，想奮發向上，但是一旦理想無法達成時，就會有產生自己低劣無能的「自卑感」。<br>在當前社會上，其實都會有「競爭」的關係，在學校時是同學，在公司時是同事，會害怕自己輸給別人，擔心自己可能會輸，因此要不斷贏下去。儘管這種方式可以不斷促進自己進步，但也導致看到別人成功幸福時，會無法發自內心地去祝福，甚至更惡劣的，看到別人不幸會覺得可以證明自己的成功。<br>其實我從求學階段就或多或少發現自己也有這樣的心態，不斷去比較自己與同儕間。然而競爭是一個無限循環，我打敗了一群人，還有更厲害的人在等著，就算我打敗所有人站在巔峰，還是會時時擔心自己會輸，不斷去維持自己的地位，這也意味著永遠得不到幸福。如果我們真的想獲得幸福，必須要脫離競爭模式，放棄比較。<br>目前的我會把人生當做擁有一筆錢可以隨意去買自己想要的東西，如果去比較我買的東西跟別人比起來有沒有比較大、比較好，那並不會得到快樂。不如專心在選擇自己要買哪些東西，我想要買的東西組合肯定跟別人不一樣，也無從比較起，重點是買到的東西能不能帶給我快樂，而不是比別人還要好。</p>
<h2 id="課題的切割"><a href="#課題的切割" class="headerlink" title="課題的切割"></a>課題的切割</h2><p>其實從上面提到的目的論可以看出，阿德勒心理學很重視可控制這件事，因為可控這件事對人類而言十分重要，甚至<a href="https://zhuanlan.zhihu.com/p/21918033">有研究指出會影響到健康</a>。如果用目的論來看，那代表人生是可控制的，我們能去改變。然而事實上人生還是有很多層面是不能控制的，特別是人與人關係，我沒辦法掌握別人怎麼想，如果不能控制，那就會造成自己的不安，對幸福人生來說是種破壞。<br>關於這點，阿德勒提出了「課題切割」，劃清界線，這件事從哪邊開始是自己的課題，哪邊是別人的，最簡單的區分方式是思考「因為這個決定而帶來的結果，最後會由誰來承受？」。切割課題後，不去介入他人課題，也不讓他人介入自己的課題。介入他人的課題會背負他人的人生，而讓他人介入自己的課題則會讓自己左右為難，就像父子騎驢的故事，不管自己怎麼做，都有人會不滿意的。<br>課題切割最高明的點在於確認了什麼是自己可控，什麼不是。我們只要專注在自己能改變的事情上，其他則不用太在意。按照書中的說法，這個就是人際關係的王牌，因為主動權在我手上，不用在意他人想法。<br>也許會有人認為這樣會很招人厭惡，不太能夠做到。然而不這麼做，將會讓自己的人生變得很被動，因為要不斷去迎合別人。這邊也帶出了本書的書名，為了行使自由，讓自己依照自己的生活方針過日子，必須要能接受別人的討厭，因此需要<strong>擁有被討厭的勇氣</strong>。</p>
<h2 id="建立橫向關係"><a href="#建立橫向關係" class="headerlink" title="建立橫向關係"></a>建立橫向關係</h2><p>人際關係有分為橫向和縱向，阿德勒心理學否定一切的「縱向關係」，提倡所有的人際關係都應該是「橫向關係」。縱向關係帶來的是稱讚、責罵，然而橫向關係帶來的是尊敬、感謝。<br>我會特別把這點拿出來提的原因是書中有舉一個很有趣的例子：假設你遵從上司的指示，結果卻因此面臨工作上的挫敗，這應該是誰的責任？如果是縱向關係的人就會認為是上司的責任，因為是上司的指示，然而這個卻是隱含著自己逃避了責任、閃避複雜的人際關係，因為不用思考太過困難的事、不必為失敗負責，所以仰賴他人的指示過日子。對於橫向關係的人來說，應該要拒絕並提出更好的方案，工作成敗是自己要負責的，沒有任何理由推託。其實在工作上還蠻常遇到為了避免麻煩，把問題交給別人決定的情況，讓別人決定別人負責，但是真正負責任的做法也許是自己也提出想法，然後再與別人共同討論並共識出較好的做法。<br>除了對上關係外，對下也是「縱向關係」的一種，像是對孩童的讚賞或責罵。阿德勒很尖銳地指出，大人說對孩子好而去責罵通常不是真正為了小孩好，而是因為小孩犯錯隱含著大人有教育失敗的責任，而為了自己不要被批評，所以想要控制他照著自己的想法走。然而教育是為了讓孩子能夠自立，我們只能從旁提供協助，就算是失敗也是要由自己去負起責任。有點像是學習騎腳踏車，真正騎車的人是小孩自己，跌倒也必須是自己去承擔，但我們可以提供他建議和方法，如果怕小孩受傷而不放手，那他就永遠學不會騎車，只能不斷依賴我們。這跟教育有關的部分目前我大概只有這樣的了解，也許未來有小孩之後可能會有更多的體悟吧！</p>
<h2 id="活在當下"><a href="#活在當下" class="headerlink" title="活在當下"></a>活在當下</h2><p>「活在當下」這句話大部分的人都聽膩了，幾乎都變成是一個政治正確的口號，不過這邊我想提提阿德勒對活在當下的看法。本書用旅遊來比喻人生，出去旅遊絕對不是到達目的才叫旅行，如果是這樣我們就用最快的方式飛到目的地，然後再快速返回不就達成目標了？從自己踏出家門的那一刻起，就已經稱作旅行，旅行的概念是在到達目的前的每個瞬間，認真享受每個瞬間才是旅行的目的。<br>同理人生也一樣，人生就像是登山攻頂的活動，有大半時間都在半路上，如果不能認真對待這個過程，只期待登頂的那個瞬間，那不就代表人生有一大半是沒有價值的？對我而言，常常也會期待未來會變得更好，希望「當下」趕快過去，只要我做完什麼事情人生就會不一樣了，像是學生時期要準備大考、工作時要面對大案子等等。可是再回過頭來想，面對困難挑戰永遠只想說熬過去人生會更好，好像完全沒有真正更好過，因為我只有完成挑戰那一瞬間獲得解脫的快樂，但很快又會有下一個挑戰。與其自己只能在這樣的痛苦中不斷輪迴，不如專心面對當下每個瞬間。<br>關於活在當下，其實也是呼應了前面目的論的看法。「人生是一連串的剎那，過去和未來都不存在，別想要藉著回顧過去、預見未來，給自己一個免除責任的藉口。」由於自己真正擁有的是現在，如果用過去當做藉口，就意味著放棄了現在所擁有的選擇權。當自己想把現在的不如意推給過去，或是期盼未來會更好時，都要注意是不是根本沒有活在現在，應該要認真做當下自己所能做改變的事情。</p>
<h2 id="評價"><a href="#評價" class="headerlink" title="評價"></a>評價</h2><p>以書寫手法來說，兩本書的結尾基本上是年輕人被哲學家說服，受到感動想去嘗試阿德勒心理學，說實在這有點讓人覺得矯情，我覺得其實不用用這種傳教意味濃厚的結尾也不會讓書的價值打折扣，不太清楚為什麼用這種想煽動人心的結尾。<br>另外，很多觀念在對話中並沒辦法越辯越明，個人認為講不夠詳細、邏輯不夠清楚的地方還蠻多的。舉個例子，書中有提到要無條件相信別人，但下集又提到相信不是照單全收，對於對方的思想信念要持懷疑態度，如果我都對人產生懷疑了，還稱得上是信任嗎？這裡作者沒有做更詳細的解釋。當然這可能也是對話方式的書籍所受限之處，畢竟對話類型的書比起理論類型更能讓一般人接受，但對話勢必要省略比較細節的內容了。<br>看完上下兩集後，我認為如果是要把阿德勒心理學當作是自己的人生觀，還有太多需要釐清之處了，而且這也會有洗腦之嫌。然而不可否認，他在百年前提出的這些思想確實有其高明之處，簡而有力地戳破我們不敢面對的一面，這些部分可以再好好理解並且善用在生活中。我們可以利用前人的思想來形塑自己的人生觀，但是不要只是照本宣科去執行，這樣就跟下集一開始的年輕人一樣會陷入苦惱之中了。<br>如果認為完完全全照著某個理論做就可以得到幸福，那其實不也是逃避負責任，缺乏真正去面對自己人生的勇氣呢？</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>「請停止無效努力」讀後感</title>
    <url>/2018/04/15/%E3%80%8C%E8%AB%8B%E5%81%9C%E6%AD%A2%E7%84%A1%E6%95%88%E5%8A%AA%E5%8A%9B%E3%80%8D%E8%AE%80%E5%BE%8C%E6%84%9F/</url>
    <content><![CDATA[<p>第一次看到這本書的原因是是跟朋友在逛書展時發現的，原本對書名並沒有什麼興趣，但是忽然瞄到作者是孫圈圈，馬上就有興致了。之前都會在她的公眾號發現不錯的文章，內容有條理，而且不會流於口號，都有如何實行的方法論。而這本書看完後的確是不負所望，內容很紮實，有把她做諮詢累積的經驗分享出來，我覺得非常適合初入職場的人閱讀。</p>
<p>本書大致上分為好幾個部分：挖掘天賦、如何學習、思維、溝通、職涯規劃、情緒等等，每個都有寫出作者的見解和方法論，這本書編排很好的地方是在每篇文章最後面都會有總結，以及可以怎麼做讀後練習，就像書中一開始所說，現在「道」和「器」的書太多了，但很多都沒有實作方法，所以她想要寫一篇關於「術」的文章。</p>
<p>簡單分享一下我在書中特別有感觸的觀念。挖掘天賦這塊作者列舉了各種職業定位並做簡單分析，並且合理推出天賦型的定位比較適合我們，然後再給出了挖掘自己天賦的方法。雖然我不認同作者說的每個人天生上就有各自的天賦，因為我覺得只要是硬體沒差很多(人的身體)，基本上差異都是後天學習造成的，但是作者在這邊有擴大天賦的定義，她認為意願也是種天賦，有些人可能因為家庭等後天學習因素而喜歡做什麼事、不喜歡做什麼事，這也算天賦的優勢。這個觀念我以前並沒有想過，不過想想也是很合理，理論上人透過一定正確的訓練應該能力不會差太多，但是如果有些人本身就不喜歡該領域，就更不可能去做正確的訓練了，因此能力上就會出現落差。</p>
<p>學習的部分並沒有提到什麼新東西，大概還是離不開刻意練習的概念，然而在思維和溝通的部分就有很多可以參考的點了。畢竟作者是做諮商的，所以這兩個領域都算是她的專業吧！思維的話可以分為結構化思維和創造性的思維，而這其中是有些方法論可以運用來思考的。像是結構化思維可以用常用的架構來輔助思考，或是透過歸納法從資訊找出有意義的內容等等。除了思維，定義問題也是其中一個很重要的因素，我們要清楚自己要解決什麼問題，而且不是所有問題都值得被解決。我以前常常都會想說每個遇到的事情都要全力去做，不這樣做的話就好像是沒有負責任，但是作者反駁這樣的想法，應該是要看CP值，高的才需要全力找最佳解，一般的就只要能處理掉即可。溝通部分則是描述有條理發表言論、與人找話題聊天的方法，這邊是我的弱項，應該可以再好好地吸收消化一下。</p>
<p>職涯規劃的部分有提到可以使用個人商業模式畫布，這個概念我在「<a href="https://read.douban.com/ebook/7611058/">程序員跳槽全攻略</a>」看過，不過當初自己做職涯規劃只有幾年後要達到什麼目標，學到什麼能力之類，結果列完後還是沒有去做到，應該說連去回顧都沒有了。作者強調說我們做職涯規劃不該強調目標，而是要強調過程、實現的路徑是什麼，這樣的概念相對來說也比較踏實，不會只是空中畫大餅而已。書中最後情緒的部分有個概念讓我非常受用：<strong>面對所謂的性格缺陷，最佳策略不是對抗，而是找應對方式</strong>。我很清楚自己的弱點，包括不擅長社交、不喜歡在人多的地方、不喜歡引人注目，但是有時還是會想說要克服自己的缺陷，努力去改變。然而作者的說法是性格是我們的天性，需要花很多資源去改變，因此與其去改變，不如想想如何提高其他的能力來彌補這個缺陷。例如社交要做得好有很多因素，性格只是其中一項，我們可以強化其他因素來達到同樣結果。這個概念在前面的天賦也有提過，不要想著要彌補自己的弱點，而是將彌補劣勢的時間拿來強化自己的天賦，發揮他並且用其他能力彌補弱勢的部分。這個概念就如同巴菲特的<a href="https://jamesclear.com/buffett-focus">雙目標清單系統(Two-List System)</a>一樣，集中資源在自己的目標、強項，不會變成樣樣通樣樣鬆。</p>
<p>本書的內容從我的角度來看，雖然還是有些自己並不是很認同或是覺得有邏輯不清的地方，但是這本書提供給我們一個可以去嘗試的方法，利用這個方法來嘗試改變自己，而我們可以基於這些方法開始思考要怎麼建立屬於自己的方法論，而不會遇到職業、人生的問題時總是滿頭霧水，不斷窮緊張。透過不斷參考、試錯，就可以找到更適合的方法來面對自己的人生。</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>一些減少code size的方法</title>
    <url>/2019/08/03/%E4%B8%80%E4%BA%9B%E6%B8%9B%E5%B0%91code-size%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在開發嵌入式系統的時候，很常遇到需要在資源緊張的環境上進行開發，所謂的資源緊張大概不外乎memory不夠使用、flash不夠大，但是老闆或PM仍然希望RD在產品上面新增feature，這時候就只能針對code size進行優化了。我自己待的部門剛好就是遇到這種產品已經維護10年以上，可是又希望加新feature的狀況，因此開始尋找減少code size的方法，這邊分享一些我自己的心得。</p>
<h1 id="Compile-Optimization"><a href="#Compile-Optimization" class="headerlink" title="Compile Optimization"></a>Compile Optimization</h1><p>首先我們可以看一下compiler是不是已經做過優化了，大家都知道gcc在編譯的時候可以選擇optimization的level，從0-3。0代表的是default，而隨著數字越高，對code size和execution time的優化就越高。</p>
<p>大部分的人都會建議使用-O2，在code size和execution time取平衡，但是如果真的對code size十分在意的話，其實也可以使用-Os，代表的是-O2但是不包含部分會影響code size的優化。</p>
<p>到底每個optimization的level是做了那些優化，可參考<a href="https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html">GCC的官方文件</a></p>
<h1 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h1><p>strip算是最基本的降低code size工具，他會移除debug資訊(可供gdb使用的資訊)以及symbol table，因此size會降低許多。</p>
<p>這邊簡單做個實驗：</p>
<ul>
<li>我們先寫個簡單程式：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接著來編譯，為了凸顯strip的效果，我們加上-g來加上gdb debug訊息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -g test.c -o test</span><br></pre></td></tr></table></figure></li>
<li>接著我們可以用<code>nm -a test</code>來看到他的symbol table<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000000000 a</span><br><span class="line">0000000000201030 b .bss</span><br><span class="line">0000000000201030 B __bss_start</span><br><span class="line">0000000000000000 n .comment</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
<li>以及用<code>objdump -h test</code>來看到有哪些section header，可以發現有許多debug資訊<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> 27 .debug_aranges 00000030  0000000000000000  0000000000000000  0000105d  2**0</span><br><span class="line">                  CONTENTS, READONLY, DEBUGGING</span><br><span class="line"> 28 .debug_info   0000033a  0000000000000000  0000000000000000  0000108d  2**0</span><br><span class="line">                  CONTENTS, READONLY, DEBUGGING</span><br><span class="line"> 29 .debug_abbrev 000000f6  0000000000000000  0000000000000000  000013c7  2**0</span><br><span class="line">                  CONTENTS, READONLY, DEBUGGING</span><br><span class="line"> 30 .debug_line   000000d4  0000000000000000  0000000000000000  000014bd  2**0</span><br><span class="line">                  CONTENTS, READONLY, DEBUGGING</span><br><span class="line"> 31 .debug_str    0000028a  0000000000000000  0000000000000000  00001591  2**0</span><br><span class="line">                  CONTENTS, READONLY, DEBUGGING</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>接著執行<code>strip test</code>後，會發現symbol table已經消失了(無法使用nm)，以及沒有debug的section header。兩者size有極大差異。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ls -al</span><br><span class="line">-rwxrwxrwx 1 evshary evshary 11152 Aug  4 11:34 test</span><br><span class="line">&gt; strip test</span><br><span class="line">&gt; ls -al</span><br><span class="line">-rwxrwxrwx 1 evshary evshary 6304 Aug  4 11:39 test</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="objcopy"><a href="#objcopy" class="headerlink" title="objcopy"></a>objcopy</h1><p>strip可以減少極大部分的code size，但是如果這樣還不夠的話，我們可以用objcopy把一些沒用到的section header移除掉，但是要提醒一下，這個移除幾乎不會影響太大，大概就幾百byte而已。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; objcopy -R .comment -R .note.ABI-tag -R .gnu.version test small_test</span><br><span class="line">-&gt; ls -al</span><br><span class="line">-rwxrwxrwx 1 evshary evshary 6304 Aug  4 11:39 test</span><br><span class="line">-rwxrwxrwx 1 evshary evshary 6024 Aug  4 11:45 small_test</span><br></pre></td></tr></table></figure>

<p>這邊所謂的沒用到section header主要是一些環境的版本資訊，到底這些header代表什麼意思，可以參考<a href="http://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/specialsections.html">Linux Standard Base PDA Specification 3.0RC1 - Chapter 5. Special Sections</a></p>
<h1 id="利用-compile-option-來移除沒用到的-symbol"><a href="#利用-compile-option-來移除沒用到的-symbol" class="headerlink" title="利用 compile option 來移除沒用到的 symbol"></a>利用 compile option 來移除沒用到的 symbol</h1><p>我們知道程式裡面常常會有些程式碼(function&#x2F;data)並沒有被人使用到，不論是因為長久maintain被修修改改，還是因為本身就有預留給未來使用。但是這些沒用到的功能如果都被編進去程式中其實是很浪費的，我們這邊可以用一些小手段來移除。</p>
<p>在gcc的編譯過程中我們可以加上特別的編譯參數<code>-fdata-sections</code>和<code>-ffunction-sections</code>，這兩個的意思是把每個symbol(function或data)獨立成不同的section。為什麼要這樣做呢？當然是為了後面在link的時候我們可以直接移除沒用到的section，在link的時候多加上<code>--gc-sections</code>參數即可。</p>
<p>細節可以參考<a href="https://stackoverflow.com/questions/6687630/how-to-remove-unused-c-c-symbols-with-gcc-and-ld">How to remove unused C&#x2F;C++ symbols with GCC and ld?</a>。</p>
<h1 id="觀察-map-file"><a href="#觀察-map-file" class="headerlink" title="觀察 map file"></a>觀察 map file</h1><p>map file是我們在編譯過程中很重要的一個工具，他可以用來檢視目前symbol的size有多大，我們可以用nm來取得symbol table，甚至根據symbol的size大小來排序(指令是<code>nm --size-sort -r -S [執行檔]</code>)。透過觀察map file，我們可以瞭解程式內部每個功能佔的大小為何，進一步思考有沒有優化的空間，甚至發現該功能根本是沒有在使用的。</p>
<p>我自己也曾經有遇過code size的問題，那時候我一樣是用nm來讀取map file，忽然發現某個變數大到不可思議，觀察了一下發現那個變數是直接用global的方式宣告，並不是要用的時候才malloc，導致在一般firmware運作的過程中那塊記憶體完全沒辦法被使用。更重要的是那個功能並不常被使用，而且還會隨著硬體平台有不一樣的大小，結果RD為了方便，直接保留可能會用到的最大值，造成空間的極度浪費。</p>
<h1 id="Remove-debug-message"><a href="#Remove-debug-message" class="headerlink" title="Remove debug message"></a>Remove debug message</h1><p>其實RD在開發的過程中，或多或少都會留一些debug訊息，雖然少少的，但是累積起來量也是很驚人，畢竟一個debug訊息就是一個字串。在code size緊張的情況下，應該可以審視一下，看能不能把debug訊息移除。</p>
<p>值得注意的是有些embedded的firmware確實是會有關閉debug資訊的方式，但是這個有可能只是不顯示(例如關閉console顯示)，並不是真的移除，要仔細確認自己的狀況是哪種。</p>
<p>不過如果真的到了一定要移除debug訊息程式才能夠被使用的情況，這樣也挺危險的了，因為未來如果要maintain，必要的debug訊息還是逃不了。我會建議程式開發的過程中每個功能都可以自行決定要不要把debug的程式碼編進去，至少遇到bug還可以只開啟相關功能的debug訊息，而不是全部訊息都全開。</p>
<h1 id="移除沒用到的功能-library-、檔案"><a href="#移除沒用到的功能-library-、檔案" class="headerlink" title="移除沒用到的功能(library)、檔案"></a>移除沒用到的功能(library)、檔案</h1><p>在我們的embedded firmware裡面有些會需要使用SSL或SSH這種非常龐大的library，可能佔firmware的size超過1&#x2F;3。像是這種library其實有很多功能是我們沒有用到的，以SSL、SSH來說，其實我們只會用到其中少部分的加密cipher，而不是全部。如果真要使用，建議要對library本身功能機制足夠熟悉，在編譯的時候只開用到的option即可。</p>
<p>除了library外，一個產品經過長時間的maintain，中間一定會有許多功能是後來沒用到，卻沒被移除的。如果只是程式碼倒還好，可以用前面提到的gc-section來排除，但是如果是file system的檔案，那就要靠自己來處理了。我個人的經驗是，有很多功能是過去產品有的，但是因為後來時代不符合被移除，結果相關檔案就都一直遺留下來，例如可在browser上面運作的java plugin等等，這些的size是也很可觀的。</p>
<h1 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h1><p>壓縮也是減少code size的其中一個方法，除了啟動的程式外，我們可以把runtime過程才要load的東西進行壓縮。通常這類的角色可以是kernel啟動完成後另外加載的AP，或是filesystem。不過壓縮要考慮的點就是壓縮率、解壓的程式碼的大小以及速度，最好可以在這其中之間取得平衡。壓縮率對我們來說就是可以把程式縮小到什麼地步，如果縮小不大就沒有意義了，然後解壓的部分也很重要，要是有很高壓縮率，但是解壓程式很大，那整體來說並沒有得到多高的效益。而如果壓縮率高，但解壓速度過慢，也會影響到使用者體驗，這些都需要考慮到。</p>
<p>filesystem的部分有點可以稍微注意一下，大部分的應用都是web居多，而web其實是有壓縮的空間，且不需另外解壓的。我們知道一般web都是由html、CSS、javascript所組成，而這些內容丟給browser的時候並不需要是人眼比較好閱讀的方式，例如說不需要換行、縮排等等。這麼一來我們就有可以動手腳的空間，可以在編譯過程中，把原始的檔案做壓縮，最後才變成file system，這樣的壓縮率是很可觀的。除了減少size外，這還帶來另外一個很大的好處就是減少網路流量的傳輸，特別在embedded system中系統效能其實都不快。提醒一下，記得開發過程使用git追蹤的web檔案最好是原始檔案(人眼好讀的)，編譯過程才壓縮，不然這只是給自己帶來開發的困擾而已。</p>
<p>web壓縮的方式網路上有很多，有些甚至提供online的服務，例如<a href="https://htmlcompressor.com/compressor/">HTMLCompressor</a>或是<a href="https://www.textfixer.com/html/compress-html-compression.php">textfixer</a>等等，可以自己尋找適合的工具。</p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>上面分享了許多方法，但最後我要先澄清一下，自己需要搞清楚到底不夠的是flash還是memory，上面的方法並不是做了兩個都一定會減少。舉個例子來說，移除沒有必要用到的大變數通常只會影響memory的使用率，因為compile出來firmware的size並沒有包括大變數(因為是bss section，未初始化區段)，而file system的壓縮通常也只會影響flash的使用率，除非firmware有把檔案預先從flash讀出來放在memory中。我想強調的是使用這些方法時，還是要有必備的系統觀以及對你的系統有一定熟悉程度。</p>
<p>老實說軟體開發者最討厭的大概就是被各種硬體條件所限制，然而這些在embedded的世界中還是有很大的機會會遇到，特別是考量到成本的時候。雖然很討厭這類的問題，但是解決後其實還是蠻有成就感的。以上分享希望能夠幫助大家解決code size issue。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://linux.vbird.org/somepaper/20050117-jianfei.pdf">程式減肥三步走</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
  </entry>
  <entry>
    <title>三年的工作省思</title>
    <url>/2019/06/23/%E4%B8%89%E5%B9%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%9C%81%E6%80%9D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作到現在已經三年半了，雖然有許多成長，但也看見自己很多的不足，可以再進步的地方。個人覺得如果要能夠更快速地成長，需要定期總結自己的經驗以及所學習的東西，並且思考未來可以再怎麼做會更好。平常我有做日記的習慣，但是還沒有為自己統整工作上面的心得，這邊除了當作紀錄以外，也是可以提供給跟我差不多狀況的人參考。不過老實說，這些分享並不一定正確，但是至少是此時此刻的我最真實的想法，也歡迎大家多多指教。</p>
<h1 id="經歷"><a href="#經歷" class="headerlink" title="經歷"></a>經歷</h1><h2 id="畢業前"><a href="#畢業前" class="headerlink" title="畢業前"></a>畢業前</h2><p>我是從研替開始軟體工程師的生涯，以前在大學、研究所時，雖然有寫程式，但是畢竟都還是學生等級的程式，個人是覺得不夠深入與成熟。不過另一方面其實也累積了不少基礎，有許多重要的知識都是那時紮根的，包括Linux的使用、git的使用、Network的概念、Security的概念，這些對後來的自己都有很多幫助。雖然有時會想要是現在的自己回到過去的話，肯定可以學得更快更好、更有效率，畢竟產業和學術上還是有多少落差，但這也都有點後見之明了，而且正是因為曾經經歷過，才會有不同看事情的角度。會覺得過去要是怎樣怎樣現在就會更好，大概是人免不了的通病吧！</p>
<h2 id="第一年"><a href="#第一年" class="headerlink" title="第一年"></a>第一年</h2><p>進到職場後，最不習慣的是每件事都要很清楚是在做什麼，過去在學校基本上只要code能work就行了，所以最常做的就是上stack overflow找找，然後copy &amp; paste，不太會去理清背後的原理，或是思考怎麼做才會更有效率。然而在職場上，如果只是剪剪貼貼的話，遲早會出問題的，被同事問回答不出來還是小事，更慘的是自己做完了導致其他的bug出現。另外一點是動作需要很迅速，我記得剛過試用期後就被交付了要porting BSP上的ICMP的功能到FreeRTOS，時間給我3天，結果最後花費的時間還是超過，這跟學校其實差異很大，我在學校光是改一個memory leak的bug就改了2個月(雖然是因為還要兼顧課業)。最後，關於品質的部分，也是那時的我需要克服的坎，我不喜歡做測試，可是當時的主管就很強調要做自我驗證，才不會提供的程式上面有很多顯而易見的問題，給出去的程式也是代表自己的品牌，需要細心驗證才行。</p>
<p>其實整體來說，我在職場上的第一年大概是以調整心態並且適應工作為主，而工作內容大概都是偏向AP層的修改，或是開發些應用程式。最常見的case大概是做客製化的firmware以及處理客戶回報的問題，改的內容不外乎是web上的修改，或是AP層上面的邏輯的問題。不過也不是沒有要寫新feature，包括在JAVA應用程式上用JNI連結到C library、Linux command line tool、帳號管理API等等，或多或少訓練了怎麼設計程式架構。</p>
<h2 id="第二年"><a href="#第二年" class="headerlink" title="第二年"></a>第二年</h2><p>第二年開始我已經有能力解決比較困難的問題，那時團隊遇到SDRAM不足的問題，後來我透過分析map檔找到一個沒有必要使用的巨大global variable，克服這個難關。不過老實說，我現在回想起來這個問題也不是太難，只是要對firmware compile過程有比較深一點的認知而已。另外當時遇到了過熱當機的問題，這個老實說是幫助我成長最大的問題，我把NXP的MCU spec讀了好幾次，了解了ARM的exception架構，另外也深入理解FreeRTOS以及lwip等NXP提供的BSP是怎麼與MCU互動的。除此之外，我基於資深同事提出的proprietary protocol架構上做改進，並且設計提供給AP使用的API，其實也理解了設計protocol的原則，包括易用、相容性、功能獨立性等等。</p>
<p>這一年對我來說是技術成長最快的一年，開始練習解決問題需要有系統的思維，除了AP層以外，更加理解軟體與硬體的相依性，BSP的概念等等。那時候我常常都是在ARM的exception handler中加上dump stack的功能，然後反推造成當機的原因。這些經驗對後來看待問題時有很大的幫助，會思考這個OS的運作性質是什麼，怎麼去分配記憶體的，比較能夠有系統觀去解決問題。</p>
<h2 id="第三年"><a href="#第三年" class="headerlink" title="第三年"></a>第三年</h2><p>第三年因為要做經驗傳承，開始跟資深同事學習公司既有的proprietary OS，除了AP以外，更重要的是底層kernel的運作，類似UNIX上面STREAM的架構。由於FreeRTOS的架構相對來說比較簡單(有些人甚至認為比較像library)，所以proprietary OS也是強化了我對OS的理解，而且多了可以比較的參照物。除此之外，因緣巧合下我開始有了機會可以當project leader，雖然團隊加上我只有3個人，不過也算是個不錯的經驗。我主要負責的是與PM、測試溝通，然後分配feature &amp; bug給團隊，並且確保merge的code沒有任何問題。同時間，我也開始和其他同事合作導入CI&#x2F;CD、code review的概念，剛好就在我的project上進行實驗。</p>
<p>這個時間點對我來說除了技術以外，開始有了與人相關的任務，不論是領導還是溝通。另外因為自己有比較多一點的權力，所以也嘗試導入自己所喜歡的文化，如CI&#x2F;CD。比較有趣的是，我發現以前的同學也差不多在這個時間擔任leader的角色，也許大家走的路都差不多吧！</p>
<h2 id="現在"><a href="#現在" class="headerlink" title="現在"></a>現在</h2><p>延續前一年，我開始擔任既有產品的maintain窗口，學習分配工作給團隊的其他人，並且思考要怎麼進行有效率的溝通，不論是團隊內還團隊外。技術方面則是開始接觸eCos這個系統，雖然外界已經沒人在用了，但是這個產品仍然需要有人maintain。發現挺有趣的是我差不多一年接觸一種OS，也加深了以前學OS的一些概念，例如synchronization、scheduler等等。</p>
<p>其實到了現在我覺得已經進入了一個坎，技術開始進步緩慢，而且因為既有產品線眾多，有許多maintain的effort，沒有心力去學新技術。目前，不得不好好反思自己的職涯規劃，以往我都是認為只要有學習成長就可以了，沒有想太多自己未來的走向，包括什麼是自己的強項，我接下來的時間要學什麼，可以成長多少等等。如果再宏觀一點，從人生角度來說，我規劃學習這些技術對工作有什麼幫助？在我的生命中是什麼樣的地位？我的人生究竟是想要什麼？成就感嗎？還是只要賺夠多錢就行了？這些都是以前有想過，但是沒有仔細思量的，現在因爲工作上面遇到了些障礙，所以會開始思考什麼才是自己想要的。</p>
<p>雖然我是因為感覺沒有成長所以思考是不是要改變跑道，但是另一方面來說，我覺得也是因為這個契機才開始會反省工作在自己人生中的意義是什麼，這倒也不是什麼壞事。人本來就應該要很清楚自己想要什麼，留在某個地方就是要承擔自己失去的其他機會成本，離開某個地方就是要能捨棄當前環境的舒適以及穩定，沒有好或壞，就只是要自己承擔相對應的責任。</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>這職場三年多下來，其實我也學習了很多事情，比起技術而言，我覺得最重要的是觀念的改變。從一個人的觀念和面對事情的態度，大概就可以推估他的未來發展。技術要學其實是可以很快，但是個人特質是很難短時間內改變，因此我覺得這是影響個人成就非常深遠的關鍵。以下就我的觀點分享認為重要的事情。</p>
<ol>
<li>發問前一定要再三思考<ul>
<li>在問別人問題的時候，要先思考想從對方那邊得到什麼樣的答案。簡單來說就是不要無腦發問，同事都是很忙的，所以相對應來說可以問問題的次數是有限制。因此每次發問都先思考：我問的問題是否其實查一查資料或做做實驗就可以解決？我想問的問題到底是什麼？有時候整理一下自己的想法後，就赫然發現其實問題已經得到了解答，根本不需要問人，這也是常聽到的<a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95">Rubber Duck Debugging</a>。</li>
<li>一般來說我們遇到不確定的問題都會去請教主管，看要怎麼做會比較好，這個做法在剛進公司時是OK的，畢竟對工作內容還不熟，但是隨著自己慢慢熟悉，要做的應該是自己能夠做主並且決策。以公司的角度來說，多請人就是要減少大家的工作量，如果事事都要去問人的話，那就不需要多請人了。當然有些問題可能是一定要主管做決策的，那可以提出自己的想法以及建議的解決方式，主管只要確認我們的解法沒有什麼大問題就可以了。</li>
</ul>
</li>
<li>定期反省，找出更有效率的做法<ul>
<li>可以的話，建議每天做日記，思考今天的工作內容有什麼可以改進之處。不過老實說這樣確實是蠻累的，而且會變成無腦的慣性，所以也可以改成每週一次。一個人在工作上的表現，大概就是解決問題的能力和效率，如果這個能力能不斷提升，能創造的價值就越高。</li>
<li>舉例來說，在我的公司就是要處理很多文件流程，每次要跑大家就都要到處問人，後來我受不了了，乾脆自己整理一份跑流程的SOP，每次跑我就參考SOP執行，如果有錯再修改SOP，大大減少我在工作上的煩躁感。而且後來有新人進來要跑流程時，我也可以請他們看SOP，而不需要手把手教學，減少時間的浪費。</li>
</ul>
</li>
<li>用目的論思考，了解自己做的事情是為了什麼，要解決什麼問題<ul>
<li>我發現有時候自己做的事情和別人對我的期待其實是有落差，我認為重要的東西，別人卻覺得那個不是重點。因此面對任何任務，都要確定做這件事的目的是什麼，例如是要給客戶滿意的解釋，還是要百分之百肯定問題的根因，然後是不是值得投入相對應的資源。</li>
<li>常常做事情都會不小心過度鑽研在細節上面，大家各自提出自己的意見，而無法做出正確的決策，這時候最好都是要回到最初的問題：我們到底是要解決什麼，怎麼決策才能符合我們最一開始的目的。不會有完美的解答，但是只要能達到設定的目標，那就是可以接受的答案。</li>
</ul>
</li>
<li>溝通的時候，站在對方的立場思考<ul>
<li>工作上基本上一定會有cowork的機會，而很多的爭論幾乎都是來自於溝通不夠完全。回應他人的問題時，可以站在他的角度思考，他想得到什麼答案，我能提供什麼答案，怎麼在中間取得平衡，不要變成事情都是某一方去承擔，另一方面也是提高溝通效率，不會信件來回很多次都得不到共識。</li>
<li>有時候不要太依賴信件，有些情況直接面對面溝通會來得有效率，且也不會太過生硬，讓人有距離感，有時候都是因為雙方文字上彼此誤會而吵起來。</li>
</ul>
</li>
<li>要定期盤點自己的能力<ul>
<li>我會強烈建議要隨時maintain一份A4的履歷，並不是說要騎驢找馬，而是為了把自己重點且精華的能力精簡成一份履歷，其實也是認識自我的一種方式。整理完後會發現原來自己的強項是什麼、還欠缺什麼，工作的時候就比較不會得過且過，而是會用宏觀的視野思考為什麼要做，還能怎麼做會更好，因為這些都將變成未來與人談判的籌碼。當然如果有好的機會的話，已經有一份履歷在手，就可以隨時把握。</li>
</ul>
</li>
<li>負起責任<ul>
<li>負起責任有幾個方面，首先就是對自己做的事情，任務交到自己的手上，那就是要把它做好，如果發現有任何問題就是要隨時反應，不要到了最後一刻才說。另外這也隱含了一點：我不是機器人，別人說什麼就做什麼，而是要有能力自己判斷、決策並且承擔最後的結果。能做到這點，周圍的人就可以放心與自己合作了。</li>
<li>另外一方面是對自己負責，<strong>永遠要記得不管做什麼決定，承擔結果的是自己</strong>。不管是想要加班做事情、針對某個問題作深入鑽研、隱藏遇到的問題裝做表面一片和諧，其實都無妨，只要能夠接受最終結果就好。既然都已經是成年人了，就不要想著拿盡所有好處而且可以逃避責任。以職業生涯來說，選擇自己的去留也是同樣的道理，如果放棄了現在的位置，那就別未來才後悔失去了許多福利，如果選擇留著，那也別再抱怨沒有新的成長，一切都是在於自己的選擇。</li>
</ul>
</li>
</ol>
<p>不過老實說，上面的分享也只適用於想不斷提升自己的情況，但是人生是有很多面向的，我也曾經看過有人工作只出五分力，剩下的時間都是專注在自己的生活品質上面。這並沒有什麼不好，甚至如果以長遠來看，他說不定活得還比認真努力打拼的人更快樂。反正，最重要的還是要記得<strong>人生是自己的，做什麼決定都沒關係，只要肯承擔後果就好</strong>。</p>
]]></content>
      <categories>
        <category>自我反省</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>常用軟體工具統整</title>
    <url>/2017/11/11/%E5%B8%B8%E7%94%A8%E8%BB%9F%E9%AB%94%E5%B7%A5%E5%85%B7%E7%B5%B1%E6%95%B4/</url>
    <content><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="開啟docx-pttx-xlsx"><a href="#開啟docx-pttx-xlsx" class="headerlink" title="開啟docx, pttx, xlsx"></a>開啟docx, pttx, xlsx</h2><ul>
<li>Office(word, excel, powerpoint, visio)：Windows和MAC上還是用就微軟的工具比較方便。</li>
<li>LibreOffice：Linux上的話可以用這個，但是其實我是不推薦在Linux上做類似的事。</li>
</ul>
<h2 id="開啟pdf"><a href="#開啟pdf" class="headerlink" title="開啟pdf"></a>開啟pdf</h2><ul>
<li>Foxit：適用於Windows、Linux，可用來取代Adobe Reader來看pdf檔案。</li>
<li>MAC的話其實用預設的預覽程式就足夠了。</li>
</ul>
<h2 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h2><p>下方筆記軟體都是可以跨平台的</p>
<ul>
<li>QOwnNotes：支援Markdown、tags和資料夾的筆記軟體，我會搭配dropbox來進行同步，可參考<a href="http://www.qownnotes.org/">官網</a></li>
<li>evernote：最常見的筆記軟體，但是不支援完整Markdown，我只用來記雜事用。</li>
<li>GitBook：之前有用這個來做筆記，但是反應速度有點慢，不推薦。</li>
</ul>
<h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><ul>
<li>texmaker: 專門處理Latex的工具</li>
<li>Poedit: 專門處理po的工具</li>
</ul>
<h1 id="網路功能"><a href="#網路功能" class="headerlink" title="網路功能"></a>網路功能</h1><h2 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h2><ul>
<li>Chrome</li>
<li>Firefox</li>
</ul>
<h2 id="檔案交換"><a href="#檔案交換" class="headerlink" title="檔案交換"></a>檔案交換</h2><ul>
<li>Dropbox：支援跨平台</li>
</ul>
<h2 id="FTP-client"><a href="#FTP-client" class="headerlink" title="FTP client"></a>FTP client</h2><ul>
<li>FileZilla FTP：支援跨平台。</li>
</ul>
<h2 id="遠端連線"><a href="#遠端連線" class="headerlink" title="遠端連線"></a>遠端連線</h2><ul>
<li>TeamViewer：支援跨平台。</li>
</ul>
<h2 id="ssh-client"><a href="#ssh-client" class="headerlink" title="ssh client"></a>ssh client</h2><p>下面只介紹Windows的部分，因為Linux和MAC都可以用ssh或scp指令連線</p>
<ul>
<li>putty(MTPutty)</li>
<li>pietty：支援Big5的putty版本</li>
<li>winscp：如果要用ssh來取得檔案用這個很方便。</li>
</ul>
<h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><ul>
<li>FortiClient SSL VPN：我只用過這個，而且還是舊版的，我記得是每個OS都可以使用，未來可以再研究看看。</li>
</ul>
<h2 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h2><p>只支援Windows，如果是Linux和MAC是可以用command line下載TFTP。</p>
<ul>
<li>Tftpd32：如果要自架TFTP Server的好工具，可參考<a href="http://tftpd32.jounin.net/">官網</a></li>
</ul>
<h1 id="社交軟體"><a href="#社交軟體" class="headerlink" title="社交軟體"></a>社交軟體</h1><ul>
<li>Skype</li>
<li>LINE</li>
<li>Telegram</li>
</ul>
<h1 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h1><h2 id="文字編輯器"><a href="#文字編輯器" class="headerlink" title="文字編輯器"></a>文字編輯器</h2><p>一樣只介紹Windows，其他平台建議直接用vim</p>
<ul>
<li>notepad++：非常輕量級的文字編輯器，非常好用。</li>
<li>gvim：Windows上的vim，但是有時候並不是那麼好用。</li>
</ul>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>其他平台我是都用command line，但是也許可以再找找有沒有好的圖形化介面</p>
<ul>
<li>Git &#x2F; Tortoise Git：用來追蹤code必備工具</li>
</ul>
<h2 id="虛擬化"><a href="#虛擬化" class="headerlink" title="虛擬化"></a>虛擬化</h2><ul>
<li>VirtualBox：跟其他虛擬機的差異是他是Open Source，但是穩定度比起來還是有差。</li>
<li>Docker：我是比較少用，但是用的對的話，其實是個好工具。</li>
<li>qemu：當沒有開發板的時候挺好用的</li>
</ul>
<h2 id="interpreter"><a href="#interpreter" class="headerlink" title="interpreter"></a>interpreter</h2><ul>
<li>Python：可以用來執行我們寫的簡單小程式。</li>
</ul>
<h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><ul>
<li>CodeBlock：要測試code可以在上面compile看看，但是不夠輕量，有時候不如開Linux虛擬機測試比較快。</li>
<li>gcc：MAC和Linux。</li>
</ul>
<h2 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h2><ul>
<li>vscode：好用的編輯器，而且跨平台，支援許多套件，但是對C&#x2F;C++的支援比較低。</li>
</ul>
<h2 id="debug工具"><a href="#debug工具" class="headerlink" title="debug工具"></a>debug工具</h2><ul>
<li>Wireshark：抓封包專用，三個平台都適用。</li>
</ul>
<p>以下都是Windows上的工具，還沒找到其他平台的版本</p>
<ul>
<li>iReasoning：可以用來做SNMP query。</li>
<li>HxD：看檔案的二進位。</li>
<li>WinMerge：比對code專用。</li>
<li>Colasoft Packet Builder: 修改pcap</li>
<li>Colasoft Packet Player: 重放packet</li>
</ul>
<h1 id="影音"><a href="#影音" class="headerlink" title="影音"></a>影音</h1><h2 id="播放音樂"><a href="#播放音樂" class="headerlink" title="播放音樂"></a>播放音樂</h2><ul>
<li>iTunes：適用Windows和MAC，播放、整理音樂的工具。</li>
</ul>
<h2 id="影片"><a href="#影片" class="headerlink" title="影片"></a>影片</h2><ul>
<li>SMPlayer：適用於Windows和Linux的播放器</li>
<li>IINA：適用於MAC。</li>
</ul>
<h2 id="剪輯影片"><a href="#剪輯影片" class="headerlink" title="剪輯影片"></a>剪輯影片</h2><ul>
<li>威力導演：剪影片專用，適用於MAC</li>
</ul>
<h2 id="燒錄"><a href="#燒錄" class="headerlink" title="燒錄"></a>燒錄</h2><p>目前找到的都只適合Windows</p>
<ul>
<li>Free Make Vedio Converter：燒DVD專用。</li>
<li>burnaware：可以燒iso和音樂CD。</li>
<li>DVDFab Virtual Drive：模擬虛擬光碟機。</li>
</ul>
<h2 id="轉檔"><a href="#轉檔" class="headerlink" title="轉檔"></a>轉檔</h2><ul>
<li>格式工廠：如果要轉檔的話非常好用。</li>
</ul>
<h1 id="系統"><a href="#系統" class="headerlink" title="系統"></a>系統</h1><h2 id="套件管理"><a href="#套件管理" class="headerlink" title="套件管理"></a>套件管理</h2><ul>
<li>Linux就隨Distro而有不同</li>
<li>MAC的話可用homebrew<ul>
<li>brew的使用方法如下  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新list</span><br><span class="line">brew update</span><br><span class="line"># 找套件</span><br><span class="line">brew search [套件名]</span><br><span class="line"># 檢查哪些套件過時</span><br><span class="line">brew outdated</span><br><span class="line"># 更新套件</span><br><span class="line">brew upgrade</span><br><span class="line"># 清除cache</span><br><span class="line">brew cleanup</span><br><span class="line"># 找官網</span><br><span class="line">brew home</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="優化電腦"><a href="#優化電腦" class="headerlink" title="優化電腦"></a>優化電腦</h2><ul>
<li>WiseCare 365：適合Windows</li>
<li>Magican、AppCleaner：適合MAC</li>
</ul>
<h2 id="監控系統狀態"><a href="#監控系統狀態" class="headerlink" title="監控系統狀態"></a>監控系統狀態</h2><ul>
<li>CrystalDiskInfo：監控硬碟狀態，適合Windows</li>
<li>smartd：Linux可用這套軟體看硬碟狀態。</li>
<li>menumeter：看系統整體資訊的付費軟體，適用MAC。</li>
</ul>
<h2 id="解壓縮工具"><a href="#解壓縮工具" class="headerlink" title="解壓縮工具"></a>解壓縮工具</h2><ul>
<li>7-zip：適合Windows</li>
<li>The Unarchiver：解壓縮工具，適用MAC</li>
<li>CleanArchiver：壓縮工具，適用MAC</li>
</ul>
<h2 id="連接手機"><a href="#連接手機" class="headerlink" title="連接手機"></a>連接手機</h2><ul>
<li>Android File Transfer：在MAC上如果要連android手機必備</li>
</ul>
<h1 id="CLI-tools"><a href="#CLI-tools" class="headerlink" title="CLI tools"></a>CLI tools</h1><p>MAC可以用iterm取代原來terminal</p>
<h2 id="Editor-1"><a href="#Editor-1" class="headerlink" title="Editor"></a>Editor</h2><ul>
<li>vim</li>
</ul>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul>
<li>zsh</li>
<li>tmux</li>
<li>mosh：可以保持連線不要斷掉，當網路一旦恢復就會馬上連回去。</li>
</ul>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><ul>
<li>git</li>
<li>tig</li>
</ul>
<h2 id="program"><a href="#program" class="headerlink" title="program"></a>program</h2><ul>
<li>ipython</li>
<li>irb</li>
<li>silversearcher-ag：找字串</li>
<li>cloc：算程式碼數量</li>
<li>ctags</li>
<li>astyle：coding style工具</li>
</ul>
<h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><ul>
<li>lynis: 檢查系統安全性<ul>
<li>使用方式<code>lynis -c</code></li>
</ul>
</li>
<li>smartmontools：讀取硬碟資訊</li>
<li>mtr：看網路狀態，ping和traceroute的結合</li>
<li>tree：可以列出目錄</li>
<li>htop、iotop、iftop：各類的top</li>
<li>httpie：command是http</li>
<li>ncdu：加強版的du</li>
<li>tldr：簡化版的man</li>
<li>trash-cli：trash-list, trash-rm, trash-put, trash-empty, restore-trash</li>
<li>fd：更簡單的find</li>
</ul>
<h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h2><ul>
<li>nmap：掃描網路上的機器</li>
<li>hydra：暴力破解的軟體</li>
<li>openssl：加解密工具</li>
<li>sqlmap：SQL injection工具</li>
</ul>
<h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><ul>
<li>qpdf：對pdf檔做一些操作</li>
<li><a href="https://evshary.github.io/2018/12/02/gnuplot%EF%BC%9A%E5%A0%B1%E5%91%8A%E5%BF%85%E5%82%99%E7%9A%84%E7%B9%AA%E5%9C%96%E5%B7%A5%E5%85%B7/">gnuplot</a>：畫圖的工具</li>
<li><a href="https://evshary.github.io/2018/11/25/youtube-dl%E7%B6%B2%E8%B7%AF%E5%BD%B1%E7%89%87%E4%B8%8B%E8%BC%89%E5%99%A8/">youtube-dl</a>：下載youtube<ul>
<li>使用方式youtube-dl -F [URL]：看有哪些格式</li>
<li>youtube-dl -f 136&#x2F;mp4 [URL]：選擇格式下載</li>
</ul>
</li>
<li><a href="https://evshary.github.io/2018/12/01/ffmpeg%E5%BD%B1%E9%9F%B3%E8%99%95%E7%90%86%E5%B7%A5%E5%85%B7/">ffmepg</a>：轉換影片檔</li>
<li><a href="https://evshary.github.io/2018/10/14/GnuPG%E6%95%99%E5%AD%B8/">GPG</a>：認證工具</li>
<li>irssi：IRC工具</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>updating</tag>
      </tags>
  </entry>
  <entry>
    <title>心流與人生</title>
    <url>/2018/04/28/%E5%BF%83%E6%B5%81%E8%88%87%E4%BA%BA%E7%94%9F/</url>
    <content><![CDATA[<p>人生的意義到底是什麼呢？這個問題應該每個人或多或少在成長過程都有想過吧？特別是在青春期的時候，心裡因為不知道未來的方向，而有陷入迷惘中，會覺得人生好像是沒有意義的。在我高中時期就是在這樣的狀態中，為了符合外在的要求(拿到好成績)而努力，但是卻不知道自己心裡真正是為何而努力。這樣的心情雖然隨著年齡的增長而慢慢減緩，但是若是問到自己的人生有什麼意義這回事，我想我還是回答不出來。</p>
<p>但是，人生的意義其實根本就只是個偽命題。我們通常期望很輕鬆地得到一個目標，然後再去努力，但是常常人生的意義是先去努力，然後才會得到。最近看了「<a href="http://www.books.com.tw/products/CN11489806">心流：最優體驗心理學</a>」 ，裡面提到了「<strong>最終目標只要能為一生的精神能量建立秩序，它本身是什麽並不重要。人生的意義就在於“尋求意義”：不論它的本質，不論它來自何處，只要找到一個統一的大方向，人生就會有意義。</strong>」，這時才隱隱約約明白，原來我根本不缺乏人生意義，我想要的是內心的平靜、內心的秩序，也就是作者所講的心流狀態。意義本身並不重要，每個人都可能有屬於自己的意義，但是在追求意義本身就會為自己生命賦予價值。</p>
<p>「心流」這個概念其實我很久以前就聽過了，一開始是從強者我朋友那裡得知，我原本以為這是一個用在學習的工具罷了，並不是很在意。最近因為有些我看的書籍有再次提到這個概念，才想說來看看當初提出這個概念的作者米哈里的原書。這本書最早是在1990出版，台灣也有出自己的翻譯本，應該是叫<a href="http://www.books.com.tw/products/0010036164">快樂.從心開始</a> ，但也已經絕版了，而最近中國才重出了這本書。的確，如果 google 心流這個詞，十之八九是講我們在面對有一定挑戰性的事情時，進入了聚精會神的狀態，忘了時間的流動，只專注在當下。進入心流會創造最佳的體驗，會讓自己想要一再體驗，這也是很多學習的書籍鼓吹的學習方式。</p>
<p>如果把進入心流的條件和刻意練習相比，會發現兩著有很高的相似性。兩者都一樣需要有個明確的目標、有即時的反饋、需要全神貫注地投入、需要有適當的挑戰性(跨出舒適圈)。但是在本書的介紹序也有提到，兩者的動機是完全不同的，刻意練習是為了讓自己的能力獲得提升，是一種行為，而心流則是一種體驗，讓人沈醉且上癮。儘管如此，我個人的經驗是有意識進行刻意練習時，有時候也會有種進入心流的狀態，忘記時間，想要繼續做下去。雖然本質不同，但是兩者是可以相輔相成的。</p>
<p>為什麼進入心流會讓我們愉悅呢？書中有提到一個概念叫做精神熵，熵在物理的意義是亂度，越高代表越混亂。如果我們的精神熵越高，就代表我們的意識失去了秩序，受到了威脅，我們必須要去防衛，自然就會感到不快樂。心流的意義我會解釋成<strong>心靈的秩序</strong>，就像磁鐵要有磁性一定要被磁化，讓內部分子的南北極都同向，對外才會產生出一股磁力。當我們進入心流狀態也就是在內心建立起了秩序，不會被外界可能讓心靈混亂的事物打擾，因此才會有忘記自我，忘記時間的感覺。</p>
<p>以秩序來解釋為什麼會快不快樂似乎有其道理。米哈里提到了享樂和樂趣的差別：享樂是恢復均衡的體驗，主要是維持意識的秩序，但無法創造新秩序，樂趣需要高度注意力，完成意料之外的事情。因為樂趣的高複雜度、有挑戰性，所以不斷提供大腦新鮮感，這也是樂趣可以維持比較長久的快樂。另外值得一提的是，如果我們是為了什麼目的才做某件事情，可能就不有趣，就像我們不是為了得到勝利而玩遊戲，而是享受在玩遊戲的過程。因為如果有目的的話，我們就不是專心在當下遊戲規則所帶來的秩序了。遊戲規則主導了我們的心流，讓我們內心維持了秩序，所以有些人在使用外掛後很快就會對遊戲失去興趣的原因也是在秩序已經被破壞了，規則無法再帶給我們心靈秩序了。</p>
<p>米哈里不只是用心流來解釋我們進入專心的狀態，書中他更是嘗試用心流來解釋人類的社會、文化、甚至是遇到困境時要怎麼克服。這也是讓我眼界大開的一部份，原來心流也是可以用來解釋更高層次的現象。社會與文化說穿了其實也就是一種規則，一種秩序，在過去社會文化上的規範會規定我們的外在行為應該要怎麼做，有很多的限制，但是大多數人在成長過程中接受了這樣的限制，然後久而久之自己也成為要求他人遵守這些規則的人。然而在現在的世界，國際間的文化交流、網際網路的發達，拓展了每個人的視野，追求個人自由的風氣中屏棄掉了傳統文化，因此人們有更多選擇。但是更多選擇不代表會更快樂，因為會陷入了不知道要選什麼才好的狀態。這就跟我們父母一輩不會有用興趣選職業這件事，而是找個穩定收入的工作或繼承家業，沒有什麼其他選擇，而我們這代則會迷惘進大學時到底要選擇什麼樣的科系，未來要找什麼工作，到底自己對什麼有興趣。這個選擇越多越不快樂的現象正呼應了人失去了秩序後會不快樂的概念。</p>
<p>但是我個人覺得，這不代表我們要走回頭路，的確規範可以帶給大多數人秩序，但是並沒有道理要求所有人都遵守這樣的規範，自由與民主已經深入人心，難以逆轉。我們能做的是知道這個現象，然後清楚自己的迷惘是來自心靈的失序，接著透過不斷與外界的互動來重新建立自己的秩序，最後就會形塑出屬於個人的價值觀，也就是個人的生命意義。米哈里也建議，我們可以從宗教、歷史、文學等等過去前人所建立的秩序中吸取經驗，建立起屬於自己內心不被擾亂的模式，用前人的力量賦予自己生命新的意義。</p>
<p>本書帶給我很多新的觀念，特別是讓我重新認識了「心流」。在閱讀時，我得承認作者的敘述、排版方式有點冗長，比較沒有架構性，不過不妨礙本書的價值。另外我會推薦大家要看一下推薦序的部分，雖然我從來沒看過那麼長的推薦序，但是卻是一個很好的總結，書中大多數的精華都有被整理出來了。我們不只是要追求在學習上全神貫注的心流，更是要追求人生的心流，真正內心的秩序必須要上從人生觀下到自己的行為都達成一致，並且能心無旁騖專注在其中。如果要用一句話解釋我從這本書得到的觀念，我會這麼說：<strong>快樂與幸福來自我們內心的和諧，建立一個可以應付外界干擾的秩序，讓自己的外在行為與內心秩序一致，那就是在人生的心流之中了</strong>。</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談函式庫</title>
    <url>/2018/05/12/%E6%B7%BA%E8%AB%87%E5%87%BD%E5%BC%8F%E5%BA%AB/</url>
    <content><![CDATA[<h1 id="比較shared-x2F-static-library"><a href="#比較shared-x2F-static-library" class="headerlink" title="比較shared&#x2F;static library"></a>比較shared&#x2F;static library</h1><p>程式在執行的時候，大部分都會需要引用函式庫(library)，library有分shared和static，兩者代表不同的引用方式。</p>
<table>
<thead>
<tr>
<th></th>
<th>static library</th>
<th>shared library</th>
</tr>
</thead>
<tbody><tr>
<td>優點</td>
<td>不需要考慮執行環境的相依性問題</td>
<td>使用空間小(檔案和記憶體)、更換library不用重build</td>
</tr>
<tr>
<td>缺點</td>
<td>執行檔極大、更換library需重build</td>
<td>在異地執行可能會因為相依性無法執行</td>
</tr>
</tbody></table>
<h1 id="動態函式庫"><a href="#動態函式庫" class="headerlink" title="動態函式庫"></a>動態函式庫</h1><p>在開始前，先確定幾個名詞</p>
<ul>
<li>soname：代表特定library的名稱，如libmylib.so.1，最後面的1是version</li>
<li>real name：實際放有library程式的檔案名稱，名稱會包含三個版號，分別為version, minor和release，如libmylib.so.1.0.0<ul>
<li>version代表原介面有移除或改變，與舊版本不相容</li>
<li>minor代表新增介面，舊介面沒改</li>
<li>release代表程式修正，介面沒改</li>
</ul>
</li>
<li>linker name：用於連結時的名稱，不含版號的soname，如libmylib。通常會link到實際的real name。</li>
</ul>
<h2 id="如何編譯"><a href="#如何編譯" class="headerlink" title="如何編譯"></a>如何編譯</h2><p>首先我們先把<code>.c</code>編譯成<code>.o</code>，這邊要加上-fPIC的參數</p>
<p>這個原因是要產生Position Independent code，確保code segment在動態連結時不用花時間重新定位，而且重新定位會造成無法和其他process共享.text區段。</p>
<p>事實上，如果不加-fPIC也是可以產生library，但是產生的執行檔就需要另外存有重新定位的資訊(.rel.dyn區段)，而且會有上述的問題。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c -fPIC hello.c world.c</span><br></pre></td></tr></table></figure>
<p>接下來就是產生shared library了，解釋一下參數的意思</p>
<ul>
<li><code>-shared</code>：代表要編成shared library</li>
<li><code>-Wl</code>：是用來傳遞參數給linker，讓-soname和libmylib.so.1傳給linker處理</li>
<li><code>-soname</code>：用來指名soname為libmylib.so.1</li>
<li><code>-o</code>：最後library會被輸出成libmylib.so.1.0.0<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -shared -Wl,-soname,libmylib.so.1 -o libmylib.so.1.0.0 hello.o world.o</span><br></pre></td></tr></table></figure>
soname很重要，就如同前面所提，可以讓開發者和應用程式表示兼容標準，可以用objdump確認soname<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ objdump -p libmylib.so.1.0.0 | grep SONAME</span><br><span class="line">  SONAME               libmylib.so.1</span><br></pre></td></tr></table></figure>
完成後再用ln建立soname和linker name兩個檔案<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ln -s libmylib.so.1.0.0 libmylib.so</span><br><span class="line">$ ln -s libmylib.so.1.0.0 libmylib.so.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>如果有人要使用的話，下列兩種方式都可以。不過要注意目錄下如果同時有static和shared會使用shared為主，如果要static就要加上-static編靜態函式庫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc main.c libmylib.so -o a.out</span><br><span class="line">$ gcc main.c -L. -lmylib -o a.out</span><br></pre></td></tr></table></figure>
<p>但是shared library執行的時候還是需要有library才能執行，所以要把.so安裝到系統中，有三種方法：</p>
<ol>
<li>把libmylib.so.1 放到系統常見的library目錄，如&#x2F;lib, &#x2F;usr&#x2F;lib</li>
<li>設定<code>/etc/ld.so.conf</code> ，加入一個新的library搜尋目錄，並執行ldconfig更新<code>/etc/ld.so.cache</code></li>
<li>設定LD_LIBRARY_PATH 環境變數來搜尋library，如<code>LD_LIBRARY_PATH=. ./a.out</code></li>
</ol>
<p>這邊提一下一般而言找library的順序</p>
<ol>
<li><code>LD_LIBRARY_PATH</code>或<code>LD_AOUT_LIBRARY_PATH</code>環境變數所指的路徑</li>
<li>從<code>ld.so.cache</code>的記錄來找shared library。</li>
<li><code>/lib</code>,<code>/usr/lib</code>內的檔案</li>
</ol>
<h2 id="查看shared-library的關係-ldd"><a href="#查看shared-library的關係-ldd" class="headerlink" title="查看shared library的關係 - ldd"></a>查看shared library的關係 - ldd</h2><p>我們要怎麼知道某個執行檔有使用到哪些library呢？這時候就要用到ldd這個指令了。</p>
<p>ldd其實是一個shell script，它會把檔案所用到library一一列出，包括library會用到的library。</p>
<p>舉例來說，如果我們不用ldd，其實是可以從ELF的Dynamic Section獲得shared library資訊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -d /bin/cat</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x7dd8 contains 26 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class="line"> 0x000000000000000c (INIT)               0x15e8</span><br><span class="line"> 0x000000000000000d (FINI)               0x5a4c</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>我們看到NEEDED就是需要的dynamic library，但是這個library可能也需要其他library。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -d /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x198ba0 contains 26 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x0000000000000001 (NEEDED)             Shared library: [ld-linux-x86-64.so.2]</span><br><span class="line"> 0x000000000000000e (SONAME)             Library soname: [libc.so.6]</span><br><span class="line"> 0x000000000000000c (INIT)               0x20050</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>因此我們知道&#x2F;bin&#x2F;cat需要libc.so.6，而libc.so.6還需要ld-linux-x86-64.so.2。這樣尋找實在太麻煩了，其實我們可以直接用ldd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ldd /bin/cat</span><br><span class="line">        linux-vdso.so.1 (0x00007fff8613c000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f654a3bf000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f654a967000)</span><br></pre></td></tr></table></figure>
<p>看，是不是很輕鬆呢？</p>
<h1 id="靜態函式庫"><a href="#靜態函式庫" class="headerlink" title="靜態函式庫"></a>靜態函式庫</h1><p>會有static library的概念是，如果我有很多.o檔，那每次要引用其實都不是很方便，所以最好的方法還是可以打包起來，也就是使用ar指令。</p>
<h2 id="如何編譯-1"><a href="#如何編譯-1" class="headerlink" title="如何編譯"></a>如何編譯</h2><p>static libary建立方式很簡單，一樣要先建立.o</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c test1.c test2.c</span><br></pre></td></tr></table></figure>
<p>接下來開始打包，參數意義如下</p>
<ul>
<li>r：代表加入新檔案或取代現有檔案</li>
<li>c：.a檔不存在時不會跳錯誤訊息</li>
<li>u：根據timestamp保留檔案</li>
<li>s：建立索引，加快連結速度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ar rcs libtest.a test1.o test2.o</span><br></pre></td></tr></table></figure>
如果要顯示函式庫 libstack.a 的內容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ar -tv libtest.a</span><br><span class="line">rw-r--r-- 0/0   1464 Jan  1 00:00 1970 test1.o</span><br><span class="line">rw-r--r-- 0/0   1464 Jan  1 00:00 1970 test2.o</span><br></pre></td></tr></table></figure>
如果要從libtest.a中取出test1.o<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ar -x libtest.a test1.o</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h2><p>編譯方法一樣很簡單，有兩種</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc main.c libtest.a</span><br><span class="line"># 也可以使用gcc的-l，-L代表要搜尋的目錄位置，-l會捨去library的lib開頭</span><br><span class="line">gcc main.c -L. -ltest</span><br></pre></td></tr></table></figure>

<h1 id="symbol衝突"><a href="#symbol衝突" class="headerlink" title="symbol衝突"></a>symbol衝突</h1><p>假設我們在創建library時遇到symbol衝突會發生什麼事呢？這邊我們分三種情況探討</p>
<p>首先先創三個檔案</p>
<p>hello.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>world.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="shared-library連結時，object-file有衝突"><a href="#shared-library連結時，object-file有衝突" class="headerlink" title="shared library連結時，object file有衝突"></a>shared library連結時，object file有衝突</h2><p>嘗試編譯與連結</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c -fPIC hello.c world.c</span><br><span class="line">$ gcc -shared -o libmylib.so hello.o world.o</span><br><span class="line">world.o: In function `test&#x27;:</span><br><span class="line">world.c:(.text+0x0): multiple definition of `test&#x27;</span><br><span class="line">hello.o:hello.c:(.text+0x0): first defined here</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>
<p>會發現出現錯誤，原因是動態連結跟一般編譯一樣會檢查symbol是否重複</p>
<h2 id="static-library打包時，object-file有衝突"><a href="#static-library打包時，object-file有衝突" class="headerlink" title="static library打包時，object file有衝突"></a>static library打包時，object file有衝突</h2><p>那如果是用static library呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c hello.c world.c</span><br><span class="line">$ ar crs libhello.a hello.o</span><br><span class="line">$ ar crs libworld.a world.o</span><br><span class="line">$ gcc -o main.out main.c libhello.a libworld.a</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>發現居然沒事，這個原因是因為ar只有打包功能不負責檢查。可是問題來了，到底是執行哪個呢？答案是看順序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -o main.out main.c libhello.a libworld.a</span><br><span class="line">$ ./main.out</span><br><span class="line">hello</span><br><span class="line">$ gcc -o main.out main.c libworld.a libhello.a </span><br><span class="line">$ ./main.out</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<h2 id="使用shared-library時，不同library有衝突"><a href="#使用shared-library時，不同library有衝突" class="headerlink" title="使用shared library時，不同library有衝突"></a>使用shared library時，不同library有衝突</h2><p>那如果是兩個shared library彼此間有函數衝突的現象呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -fPIC -shared -o libhello.so  hello.c</span><br><span class="line">$ gcc -fPIC -shared -o libworld.so  world.c</span><br><span class="line">$ gcc -o main.out libhello.so libworld.so main.c </span><br></pre></td></tr></table></figure>
<p>結果一樣沒有錯誤，原因是在動態連結時會使用最先看到的symbol，所以順序不同就有不同結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -o main.out libhello.so libworld.so main.c </span><br><span class="line">$ LD_LIBRARY_PATH=. ./main.out</span><br><span class="line">hello</span><br><span class="line">$ gcc -o main.out libworld.so libhello.so main.c </span><br><span class="line">$ LD_LIBRARY_PATH=. ./main.out</span><br><span class="line">world</span><br></pre></td></tr></table></figure>
<p>這個特性也跟LD_PRELOAD有關，我們可以用LD_PRELOAD來抽換shared library就是因為連結時會先使用先看到的symbol。當然這也曾經造成了一些危害，例如goahead的<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17562">CVE-2017-17562</a>。</p>
<h1 id="執行中載入library"><a href="#執行中載入library" class="headerlink" title="執行中載入library"></a>執行中載入library</h1><p>除了執行開始時載入library外，我們也可以用程式來載入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 動態載入所需的header</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="comment">// 載入指定library</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> flag)</span>;</span><br><span class="line"><span class="comment">// 透過symbol name取得symbol在library的記憶體位址</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">dlsym</span><span class="params">(<span class="type">void</span> *handle, <span class="type">const</span> <span class="type">char</span> *symbol)</span>;</span><br><span class="line"><span class="comment">// 關閉dlopen開啟的handler</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dlclose</span><span class="params">(<span class="type">void</span> *handle)</span>;</span><br><span class="line"><span class="comment">// 傳回錯誤訊息。</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">dlerror</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>範例：dltest.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">void</span> *handle;</span><br><span class="line">  <span class="type">void</span> (*f)();</span><br><span class="line">  <span class="type">char</span> *error;</span><br><span class="line">  <span class="comment">/* 開啟之前所撰寫的libmylib.so 程式庫 */</span></span><br><span class="line">  handle = dlopen(<span class="string">&quot;./libmylib.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">  <span class="keyword">if</span>( !handle ) &#123;</span><br><span class="line">    <span class="built_in">fputs</span>( dlerror(), <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 取得hello function 的address */</span></span><br><span class="line">  f = dlsym(handle, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(( error=dlerror())!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">fputs</span>(error, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 呼叫function */</span></span><br><span class="line">  f();</span><br><span class="line">  <span class="comment">/* 結束handler */</span></span><br><span class="line">  dlclose(handle);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>記得編譯時要連結dl library</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc dltest.c -ldl</span><br><span class="line">$ LD_LIBRARY_PATH=. ./a.out</span><br></pre></td></tr></table></figure>

<h1 id="library公開symbols管理"><a href="#library公開symbols管理" class="headerlink" title="library公開symbols管理"></a>library公開symbols管理</h1><p>有時候我們並不希望所提供的library會把所有symbol都洩漏出去，這時候大部分的人都會使用static限制外部呼叫。但是當這個函式在library中其他檔案會引用到，那就沒辦法設為static了。</p>
<p>那該怎麼辦呢？這邊有兩個方法：</p>
<h2 id="使用-version-script"><a href="#使用-version-script" class="headerlink" title="使用 version script"></a>使用 version script</h2><p>首先我們先創兩個檔案當範例</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;test\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>func.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;func\n&quot;</span>);</span><br><span class="line">  test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後我們編成shared library，並且看看symbol</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -fPIC -c test.c func.c</span><br><span class="line">$ gcc -shared -o libmylib.so test.o func.o</span><br><span class="line">$ nm -D libmylib.so | grep -v &#x27;_&#x27;  # -D 代表顯示dynmaic部分，-v 代表反向選擇</span><br><span class="line">00000000000005e8 T func</span><br><span class="line">                 U puts</span><br><span class="line">00000000000005d5 T test</span><br></pre></td></tr></table></figure>
<p>可以看到test還是被暴露出來了，但是明明test應該只想要在library中被使用而已。</p>
<p>這時候我們可以試試GNU linker的version script。<br>libmylib.map</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  global: func;</span><br><span class="line">  local: *;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這個意思是只要顯示func，其他function都要隱藏。然後我們link的時候加上version script試看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -shared -o libmylib.so test.o func.o -Wl,--version-script,libmylib.map</span><br><span class="line">$ nm -D libmylib.so | grep -v &#x27;_&#x27;</span><br><span class="line">00000000000004e8 T func</span><br><span class="line">                 U puts</span><br></pre></td></tr></table></figure>
<p>成功隱藏test了！</p>
<h2 id="使用-attribute-語法"><a href="#使用-attribute-語法" class="headerlink" title="使用__attribute__語法"></a>使用__attribute__語法</h2><p>除了使用version script以外，也可以用gcc特有的語法，<code>__attribute__((visibility(&quot;default&quot;)))</code></p>
<p>首先我們先改寫要公開的函式，代表我們只要暴露func()給外界看到</p>
<p>func.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">__attribute__((visibility(<span class="string">&quot;default&quot;</span>))) <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;func\n&quot;</span>);</span><br><span class="line">  test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後在編譯成.o時要記得加上<code>-fvisibility=hidden</code>，把其他function都隱藏起來。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -c -fPIC test.c func.c -fvisibility=hidden</span><br><span class="line">$ gcc -shared -o libmylib.so test.o func.o</span><br><span class="line">$ nm -D libmylib.so | grep -v &#x27;_&#x27;</span><br><span class="line">00000000000005a8 T func</span><br><span class="line">                 U puts</span><br></pre></td></tr></table></figure>
<p>達到的效果和version script一樣！</p>
<h2 id="用version-script控制版本"><a href="#用version-script控制版本" class="headerlink" title="用version script控制版本"></a>用version script控制版本</h2><p>這邊我們再多談談version script其他的用法，其實他除了管理要暴露出來的symbol外，我們也可以依照版本控制library要暴露出來的function。</p>
<p>首先我們先出第一版程式<br>libtest.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>libtest1.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span>;</span><br></pre></td></tr></table></figure>
<p>version1.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libtest1.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  func(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後正常編譯執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -fPIC -c libtest.c</span><br><span class="line">$ gcc -shared -o libtest.so libtest.o</span><br><span class="line">$ gcc -L. -ltest -o version1.out version1.c</span><br><span class="line">$ LD_LIBRARY_PATH=. ./version1.out</span><br><span class="line">num=1</span><br></pre></td></tr></table></figure>
<p>很順利正常執行，那我們假設現在要出第二個版本可以怎麼做</p>
<p>libtest2.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func_1</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func_2</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;num1=%d, num2=%d\n&quot;</span>, num1, num2);</span><br><span class="line">&#125;</span><br><span class="line">__asm__(<span class="string">&quot;.symver func_1,func@LIBTEST_1.0&quot;</span>);</span><br><span class="line">__asm__(<span class="string">&quot;.symver func_2,func@@LIBTEST_2.0&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>稍微解釋一下，首先先實作兩個function，然後再用後面兩個<code>__asm__</code>的<code>symver</code>來把同樣symbol加上版號，至於第二行<code>@@</code>的意思代表為預設版本。</p>
<p>接下來的部分就一樣撰寫新的程式</p>
<p>libtest2.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>;</span><br></pre></td></tr></table></figure>
<p>version2.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libtest2.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  func(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後這時候就要出動version script了</p>
<p>libtest2.map</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIBTEST_1.0 &#123;</span><br><span class="line">  global: func;</span><br><span class="line">  local: *;</span><br><span class="line">&#125;;</span><br><span class="line">LIBTEST_2.0 &#123;</span><br><span class="line">  global: func;</span><br><span class="line">&#125;LIBTEST_1.0;</span><br></pre></td></tr></table></figure>
<p>然後我們編譯並執行看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -fPIC -c libtest2.c</span><br><span class="line">$ gcc -shared -o libtest.so libtest2.o -Wl,--version-script,libtest2.map</span><br><span class="line">$ gcc -L. -ltest -o version2.out version2.c</span><br><span class="line">$ LD_LIBRARY_PATH=. ./version1.out</span><br><span class="line">num=1</span><br><span class="line">$ LD_LIBRARY_PATH=. ./version2.out</span><br><span class="line">num1=1, num2=2</span><br></pre></td></tr></table></figure>
<p>可以看到兩者執行結果不同，為什麼會這樣呢？我們先看一下他們連結到的symbol</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ readelf -a version1.out  | grep func</span><br><span class="line">000000601018  000500000007 R_X86_64_JUMP_SLO 0000000000000000 func + 0</span><br><span class="line">     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND func</span><br><span class="line">    51: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND func</span><br><span class="line">＄ readelf -a version2.out  | grep func</span><br><span class="line">000000601018  000100000007 R_X86_64_JUMP_SLO 0000000000000000 func@LIBTEST_2.0 + 0</span><br><span class="line">     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND func@LIBTEST_2.0 (2)</span><br><span class="line">    46: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND func@@LIBTEST_2.0</span><br></pre></td></tr></table></figure>
<p>可以看到version1.out是使用<code>func</code>，而version2.out的symbol就是<code>func@@LIBTEST_2.0</code>。那同樣是引用相同library，到底是怎麼知道要呼叫哪個func呢？在呼叫<code>func</code>的情況下，會自動找到最初的版本也就是<code>func@LIBTEST_1.0</code>。而之後的程式編譯時link library則會去找default的版本，也就是有兩個@的<code>func@@LIBTEST_2.0</code>，所以就不會有搞混的情況發生了。</p>
<p>這個方法在要維持兼容性的情況下非常好用，可以在不影響舊版的情況下改變函式規格。</p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul>
<li><a href="http://www.books.com.tw/products/0010587783">BINARY HACKS：駭客秘傳技巧一百招</a></li>
</ul>
]]></content>
      <categories>
        <category>系統程式</category>
      </categories>
      <tags>
        <tag>GNU tool</tag>
      </tags>
  </entry>
  <entry>
    <title>稀缺其實是一種陷阱</title>
    <url>/2018/05/27/%E7%A8%80%E7%BC%BA%E5%85%B6%E5%AF%A6%E6%98%AF%E4%B8%80%E7%A8%AE%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<p>我們很常聽到這些例子：有人會因為缺錢去借高利貸，結果不得翻身。有些人因為太忙於事業，忽略了家人，到了後來才後悔。雖然很常聽到，但是我們都很難想像這些人為什麼會去做這樣的決策，畢竟理智上告訴我們高利貸是不能去碰觸的，因為利息很可怕、家人比起事業更為重要，要多陪家人。「 <a href="http://www.books.com.tw/products/CN11194292">稀缺：我們是如何陷入貧窮與忙碌的</a> 」這本書為我們做了解答，故事中的主角都是因為稀缺導致了無法做長遠思考。</p>
<p>稀缺，也是代表了資源有限，所以我們大腦會告訴我們要節省，不要浪費，使用的時候就會再三權衡。這個也是我們演化的機制，像是老祖先可能缺乏食物，就必須要對食物存量極度小心，確保自己的生存。這樣最大好處當然就是我們可以確保稀有資源有被最大化使用。我們在日常生活中其實也有相關經驗，當我們在死線最後一刻，效率會非常高，因為這時時間是稀缺資源，會排除掉其他不重要的事情只專注在當前需要被完成的事，這也就是作者所提到的「專注紅利」。</p>
<p>甚至，這樣的專注力也可以讓我們表現更好。我們知道經濟學總是假設人類是理性的，會跟著需求供給曲線走，但是現實生活卻不是如此，人常常會被感覺所誤導。舉個例子，如果有兩家店有一段距離，我們在A看到20塊錢的東西，但是知道B有賣10元的同樣商品，大多數人願意跑去B買。但是如果現在換成比較貴的就不一樣了，A賣3000，B賣2990，大部分的人寧可在A買一買就好。因為人類有這樣不合理性的行為，所以才有行為經濟學這門學科崛起。這些不合理的概念其實都來自我們對金錢比較沒有實感，我們很難估計省下的10元到底有什麼價值，這點就連經濟學家可能也會犯錯。但是貧窮的人在使用金錢上會更有概念，不會被誤導，因為他們很清楚省下的錢要用來做什麼。我們也可以這麼說，貧窮會讓人更加理性，更接近經濟學裡面理性個體的假設。</p>
<p>儘管稀缺擁有專注的好處，但是它帶來的壞處更多。首先，我們可能會因為過度專注在稀缺資源，所以有了「管窺」現象，只看到自己所關注的，忽略掉其他事情。舉個例子，當我們在忙碌時，可能對其他外界的打擾就會很敏感，甚至脾氣會很差。除了管窺，我們用來處理事情的「帶寬」也變少了，因為心裡心心念念想著稀缺的資源，做其他事情時會很難專心，效率變差。而且因為資源稀少，我們也必須花更多精力去「權衡」怎麼使用資源，作者用行李箱的例子來具體描述這個部分。如果我們行李箱很大，我們可以什麼都不用想，把所有可能用到的東西一股腦塞進去，但是如果行李箱很小，那就必須要仔細思考到底什麼東西會用到，什麼應該用不到。這個「權衡」的行為也是消耗精力(或說帶寬)的主要來源。</p>
<p>因為管窺、帶寬減少、權衡，我們會過度放大眼前的問題，無法好好的考慮未來並且做計畫。這時就很可能出現了「借用」的狀況。我們前面提到的會去借高利貸就是因為貧窮者為了解決眼前的問題，跟未來借錢(未來要還高利貸的利息)，而且因為沒辦法客觀評估未來，所以高估自己未來還錢的能力。不斷地跟未來借用，就會陷入稀缺陷阱中，因為現在的稀缺，導致未來的稀缺，讓人無法逃出這個輪迴。這個就像是我們一天的行事曆每項任務緊接下一項任務，假設第一個事情delay了，就會影響到後面的每個行程，陷入自己需要需要不斷趕下一個行程的輪迴中。</p>
<p>很明顯的，要解決稀缺陷阱的問題，就是要保留餘裕。以前面趕行程的例子，如果我們有留一個緩衝時間，那就能利用緩衝的資源把拖延到的時間補上。但是這個緩衝機制絕對不是在問題發生時才做，<strong>我們需要在資源還充足的時候就做好這些規劃</strong>。想像你自己已經都很忙了，怎麼可能還能夠想到要留一個緩衝時間呢？除此之外，我們還有其他手段可以應付稀缺陷阱，像是我們可以用預設取代需要主動操作，一次性的任務不要分多次去做、減少自己需要權衡的機會、多個milestone取代單一deadline。這邊我就不細多提了，但是我認為這邊最主要的概念是當自己已經陷入「稀缺」中，我們要減少需要消耗精力去做的事，因為稀缺必然會導致自己去處理其他事情的精力減少，進而增加出錯的機會。一旦出錯，這個就可能會變成下個你要去救火的點。這個概念其實跟之前讀到 <a href="https://book.douban.com/subject/1019959/">精力管理</a> 還蠻像：我們該管理的不是時間，而是精力，因為能讓你把事情做好做滿的是你的精力。減少自己的精力消耗，就可以讓你更能夠專注於處理重要的事情。</p>
<p>本書是2013所出，離現在已經有點時間。我原本也想說書中的概念大概早就過時了，但是沒想到卻出乎意料，讓我重新理解大家常掛在嘴上的「沒錢、沒時間」。了解了稀缺帶給我們的影響，才能知道要怎麼去面對它，避免落入稀缺陷阱，讓自己總是忙於救火。我想，人生在世大概都會遇到某項資源缺少的問題，所以了解「稀缺」應該是我們不得不去面對的課題。</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
  <entry>
    <title>軟技能：軟體界的「原則」</title>
    <url>/2018/07/04/%E8%BB%9F%E6%8A%80%E8%83%BD%EF%BC%9A%E8%BB%9F%E9%AB%94%E7%95%8C%E7%9A%84%E3%80%8C%E5%8E%9F%E5%89%87%E3%80%8D/</url>
    <content><![CDATA[<p>今天想要來介紹一本對軟體工程師來說很棒的書，叫做<a href="https://www.tenlong.com.tw/products/9787115429476">軟技能：代碼之外的生存指南 (Soft Skills : The software developer’s life manual) </a>。最一開始會關注到這本書是因為有人介紹說這本書堪稱是軟體界的「<a href="http://www.books.com.tw/products/0010782941">原則</a>」。由於對「原則」有還不錯的評價，所以就有了閱讀的興趣。這本書號稱是給軟體工程師看的書，但是裡面卻沒有任何一行程式碼，作者希望告訴讀者的是要成好的軟體工程師，不能只專注在專業上，要把重點放在「整個人」上。書中分享了如何找工作、自我營銷、自我學習等等，甚至還有理財、健身和愛情。同樣身為軟體工程師，我認為可以從前人身上觀察和學習他的經驗應該是蠻有幫助的，因此下面會分享幾個從書中學到比較重要的概念。</p>
<p>第一個是就算是受聘於公司，也應該要當作自己是在經營生意。只有把「我」當成是一家公司看待，才能做出好的商業決策。在一般公司朝九晚六(如果沒加班的話)的生活，很容易把個人的思維限制住，認為就是把固定事情做好然後領固定的薪水。然而，如果從經濟學的角度來看，其實我們都是在販賣服務並且獲取報酬，只是販賣的對象是固定某個客戶而已。當可以用比較宏觀的角度看待工作的時候，就會發現可以選擇的策略比想像中多很多，例如開始評估自己所提供的服務和價錢跟當前市場狀況是否有吻合，不吻合的話就會進一步精進服務的內容(提升能力)，或是開拓其他可能的客戶(找其他公司)。這種心態上的轉變會讓我們不會只是被動接受現況，而會有積極的思維去影響現實，獲得更好的結果。</p>
<p>再來關於自我行銷的方面作者也提到很多，自我行銷其實跟前面相呼應，如果要把工作當作在經營生意，怎麼讓潛在客戶知道自己就很重要。找工作最容易的方法是讓工作來找你，當別人有求於你時，就更容易得到比較好的條件。對軟體工程師來說，最好的行銷方式就是寫blog，有許多有價值的文章，自然知名度就會打開。書中強調了好幾次經營blog的重要性，然後還提到最重要的就是毅力，只要持之以恆地撰寫文章，就已經勝過大多數的同行了。雖然我本身已經有意識地在經營blog了，但是常常都只是想說留個紀錄供自己未來參考。然而作者反對這種做法，他認為如果要能吸引別人最重要的是出發點是對他人有益，如果能夠對他人產生價值，就會受到關注，因此文章不是自己寫開心就好。這對我過去寫文章的方式是一種震撼，現在開始會思考我的記錄事情的角度是否可以解決讀者遇到的問題，是否容易閱讀及理解。</p>
<p>在變動很快的科技業中，如何自我學習是非常重要的，特別是軟體業，沒多久就有新的framework或程式語言出現，這些技術大概很難透過學校老師教導，只能靠著自己尋找資源去學習。書中作者介紹了十步學習法，不過我不打算在這裡細部講解這個方法，取而代之，我想分享作者提到的四個自學方式循環：學習、實踐、掌握、教授。我們不應該期待自己把某個領域學完後再開始應用，要盡量在最短時間內找到必須要學會的內容，然後就去實踐，從實踐過程中一定會遇到問題，這時再回去翻資料掌握這些問題，當有一定程度的理解後，嘗試跟他人分享，確認是否真的理解。透過這樣的循環，可以幫助自己更快掌握該領域知識。其實這套方法跟之前我看過的有效自學方式很類似，例如<a href="https://rocket.cafe/talks/85231">最小必要知識架構術</a>、<a href="https://www.drcleaner.com/zh-hans/%E6%9C%80%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%EF%BC%9A%E8%B4%B9%E6%9B%BC%E6%B3%95/">費曼法</a>，很明顯這些方法已經成為主流了。我想，不應該被傳統的學習概念(從基礎知識一步步慢慢學習)所限制，而是從應用面來學習，也就是知道自己要做到什麼，反推回去需要學習哪些知識，不但有效率，而且也更符合這個社會緊湊的腳步。</p>
<p>關於時間管理的部分，作者推薦用使用番茄鐘(通常代表的是工作25min後休息5min)，如果不知道番茄鐘可以參考<a href="https://zh.wikipedia.org/zh-tw/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95">wiki的介紹</a>。這一年下來，其實我都是用番茄鐘來管理我的時間，目前也覺得透過番茄鐘，確實可以幫助專注力，然而我卻從書中發現自己並沒有善用番茄鐘最大的威力。番茄鐘並不只是用來幫助自己提升效率的工具，更重要的是可以用來幫助時間規劃。在時間管理上，最常遇到的問題就是不知道每項工作到底要花多少時間做完，而在固定時間內，到底可以做完多少事情。這兩個問題番茄鐘都幫忙解決了，透過把一項大任務切割成番茄鐘的長度，代表的是強迫自己分割大任務變成可估算完成時間的小任務，而每個人每天可以完成多少的番茄鐘是有數量限制的，也代表我們會很清楚每天可以做多少事情，這樣規劃方式可以加強預測工作進度的準確度。另外番茄鐘帶來的另一個好處是可以更安心地進行休閒活動，大家應該會有經驗如果去玩樂會有種罪惡感想逼自己去工作，如果清楚每日能做到的番茄鐘數量，那休息享樂時就不會感到內疚，因為每天該完成的工作都已經達成了！</p>
<p>最後一點是關於自我弱點的方面，從小到大我們所受的教育都是要把缺點彌補起來，然而這在專業上其實是說不通的，大家應該常聽過樣樣通，樣樣鬆。與其告訴他人自己會很多東西，不如專精在比較小的領域(或是大領域中的某種應用)，也許在市場上並沒有那麼多的需求，但是錄取機率則會大幅增加。不過也是有要去彌補弱點的情況，那就是該弱點會大幅影響效率時。當不知道某項技術其實可以很容易達成某件事前，可能都會很排斥去學習，但其實只要花幾個小時就能獲得很大的效益，也就是常聽到的CP值很高。然而要怎麼找到這些CP值高的技術呢？我們可以記錄每個自己沒聽過技術的遇到頻率，當遇到頻率高於一定值時，那就代表有學習的價值。舉個例子，其實我有時候看經濟新聞都會聽到A輪、B輪等等名詞，但是都一直沒動力去搞懂，結果對新聞內容都一知半解。在看本書的理財部份時，作者有做一個簡單的解釋，結果花不到半小時，就對這些常見名詞有初步認識了，也變相了加深我對經濟新聞理解，像是這種知識就很值得花時間投資。</p>
<p>當然這本書還有很多很有價值的內容，不過受限於篇幅，無法每個都說。如果對上面的分享心有戚戚焉的話，我想這本書應該蠻適合你。進入科技業也不過快三年而已，未來應該還有很長的職業生涯，如何好好經營是很大的課題。目前還是以多多參考前輩們的經驗以及不斷自我反省為主，找出真正適合自己的道路。</p>
]]></content>
      <categories>
        <category>讀書心得</category>
      </categories>
      <tags>
        <tag>自我成長</tag>
      </tags>
  </entry>
</search>
